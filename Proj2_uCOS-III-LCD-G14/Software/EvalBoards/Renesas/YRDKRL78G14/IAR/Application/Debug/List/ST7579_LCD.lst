###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             23/Mar/2014  17:08:33 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\BSP\Glyph\Drivers\ST7579_LCD.c                  #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\BSP\Glyph\Drivers\ST7579_LCD.c --core rl78_2    #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\ --dlib_config            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --no_clustering --debug -lC                              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\ -I                      #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\ -I C:\Users\Suddenlink\Dropbox\git #
#                    _files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\E #
#                    valBoards\Renesas\YRDKRL78G14\IAR\Application\Source\    #
#                    -I C:\Users\Suddenlink\Dropbox\git_files\embedded_design #
#                    \Proj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDK #
#                    RL78G14\IAR\Application\..\uCOS-III\ -I                  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\ -I                          #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\applilet3_src\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\Drivers\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\glyph\ -I              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\RL78\IAR\ -I  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-LIB\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uCOS-III\Ports\Renes #
#                    as\RL78\IAR\ -I C:\Users\Suddenlink\Dropbox\git_files\em #
#                    bedded_design\Proj2_uCOS-III-LCD-G14\Software\EvalBoards #
#                    \Renesas\YRDKRL78G14\IAR\Application\..\..\..\..\..\uCOS #
#                    -III\Source\ --relaxed_fp                                #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\ST7579_LCD.lst           #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\ST7579_LCD.r87            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL78G14\IAR\BSP\Glyph\Drivers\ST7579_LCD.c
      1          /******************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only
      4          * intended for use with Renesas products. No other uses are authorized.
      5          * This software is owned by Renesas Electronics Corporation and is protected under
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
      8          * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
      9          * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
     10          * PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY
     11          * DISCLAIMED.
     12          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
     13          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
     14          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
     15          * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
     16          * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     17          * Renesas reserves the right, without notice, to make changes to this
     18          * software and to discontinue the availability of this software.
     19          * By using this software, you agree to the additional terms and
     20          * conditions found by accessing the following link:
     21          * http://www.renesas.com/disclaimer
     22          ******************************************************************************/
     23          /* Copyright (C) 2010 Renesas Electronics Corporation. All rights reserved. */
     24          /* Code written for Renesas by Future Designs, Inc. www.teamfdi.com */
     25          
     26          /******************************************************************************
     27          * File Name : ST7579_LCD.c
     28          * Version : 1.00
     29          * Device(s) : ST7579 LCD Controller
     30          * Tool-Chain : Glyph - The Generic API for Graphics LCD API version 1.00
     31          * H/W Platform : RX62N Group
     32          * Description : A collection of functions used to operate an OKAYA 96x64
     33          *               LCD display with the ST7579 controller chip.
     34          *               (Okaya Graphic LCD P/N  SE9664WRF-004-I02Q uses ST7579 driver IC)
     35          * Communications Required: 3-Wire SPI with a 4th Wire independent
     36          *                          Transmit Only
     37          ******************************************************************************
     38          * History :
     39          * : 21.07.2010 1.00 First Release
     40          ******************************************************************************/
     41          
     42          /******************************************************************************
     43          Includes “ST7579 Includes”
     44          ******************************************************************************/
     45          #include "ST7579_LCD.h"
     46          #include "glyph_api.h"
     47          
     48          /******************************************************************************
     49          * ID : 30.0
     50          * Outline : ST7579_Open
     51          * Include : ST7579_LCD.h
     52          * Function Name: ST7579_Open
     53          * Description : Assign values to the handle variables and configure LCD.
     54          * Argument : aHandle - the Glyph handle to setup for the LCD.
     55          *          : aAddress - may be used for some communications.
     56          * Return Value : 0=success, not 0= error
     57          * Calling Functions : GlyphOpen
     58          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     59          T_glyphError ST7579_Open(T_glyphHandle aHandle, uint32_t aAddress)
   \                     ST7579_Open:
     60          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
     61              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
     62          
     63              p_gw->iLCDAPI->iAddress = aAddress;
   \   000003 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00000A 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000B BC34                  MOVW      [HL+0x34], AX      ;; 1 cycle
   \   00000D 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000E BC36                  MOVW      [HL+0x36], AX      ;; 1 cycle
     64          
     65              p_gw->iLCDAPI->iFont = USE_DEFAULT_FONT ;
   \   000010 32....                MOVW      BC, #Fontx5x7_table  ;; 1 cycle
   \   000013 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000014 16                    MOVW      HL, AX             ;; 1 cycle
   \   000015 13                    MOVW      AX, BC             ;; 1 cycle
   \   000016 BB                    MOVW      [HL], AX           ;; 1 cycle
     66          
     67              /* FP_STATUS */
     68              p_gw->iLCDAPI->iStatusRegister = 0x01 ;
   \   000017 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000018 16                    MOVW      HL, AX             ;; 1 cycle
   \   000019 E6                    ONEW      AX                 ;; 1 cycle
   \   00001A BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
     69          
     70              p_gw->iLCDAPI->iFP_API_MAJOR_VERSION = 0x01 ;
   \   00001C A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00001D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001E E6                    ONEW      AX                 ;; 1 cycle
   \   00001F BC16                  MOVW      [HL+0x16], AX      ;; 1 cycle
   \   000021 F6                    CLRW      AX                 ;; 1 cycle
   \   000022 BC18                  MOVW      [HL+0x18], AX      ;; 1 cycle
     71              p_gw->iLCDAPI->iFP_API_MINOR_VERSION = 0x00 ;
   \   000024 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000025 16                    MOVW      HL, AX             ;; 1 cycle
   \   000026 F6                    CLRW      AX                 ;; 1 cycle
   \   000027 BC1A                  MOVW      [HL+0x1A], AX      ;; 1 cycle
   \   000029 BC1C                  MOVW      [HL+0x1C], AX      ;; 1 cycle
     72              p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID = 0x01 ;
   \   00002B A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00002C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002D E6                    ONEW      AX                 ;; 1 cycle
   \   00002E BC1E                  MOVW      [HL+0x1E], AX      ;; 1 cycle
   \   000030 F6                    CLRW      AX                 ;; 1 cycle
   \   000031 BC20                  MOVW      [HL+0x20], AX      ;; 1 cycle
     73              p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION = VERSION_MAJOR ;
   \   000033 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000034 16                    MOVW      HL, AX             ;; 1 cycle
   \   000035 E6                    ONEW      AX                 ;; 1 cycle
   \   000036 BC22                  MOVW      [HL+0x22], AX      ;; 1 cycle
   \   000038 F6                    CLRW      AX                 ;; 1 cycle
   \   000039 BC24                  MOVW      [HL+0x24], AX      ;; 1 cycle
     74              p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION = VERSION_MINOR ;
   \   00003B A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00003C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003D F6                    CLRW      AX                 ;; 1 cycle
   \   00003E BC26                  MOVW      [HL+0x26], AX      ;; 1 cycle
   \   000040 BC28                  MOVW      [HL+0x28], AX      ;; 1 cycle
     75              p_gw->iLCDAPI->iMAX_HEIGHT = 64 ;
   \   000042 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000043 16                    MOVW      HL, AX             ;; 1 cycle
   \   000044 304000                MOVW      AX, #0x40          ;; 1 cycle
   \   000047 BC2A                  MOVW      [HL+0x2A], AX      ;; 1 cycle
   \   000049 F6                    CLRW      AX                 ;; 1 cycle
   \   00004A BC2C                  MOVW      [HL+0x2C], AX      ;; 1 cycle
     76              p_gw->iLCDAPI->iMAX_WIDTH = 96 ;
   \   00004C A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00004D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004E 306000                MOVW      AX, #0x60          ;; 1 cycle
   \   000051 BC2E                  MOVW      [HL+0x2E], AX      ;; 1 cycle
   \   000053 F6                    CLRW      AX                 ;; 1 cycle
   \   000054 BC30                  MOVW      [HL+0x30], AX      ;; 1 cycle
     77                      
     78              /* Set Default Contrast */
     79              p_gw->iLCDAPI->iContrast = 95 ;
   \   000056 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000057 16                    MOVW      HL, AX             ;; 1 cycle
   \   000058 305F00                MOVW      AX, #0x5F          ;; 1 cycle
   \   00005B BC38                  MOVW      [HL+0x38], AX      ;; 1 cycle
   \   00005D F6                    CLRW      AX                 ;; 1 cycle
   \   00005E BC3A                  MOVW      [HL+0x3A], AX      ;; 1 cycle
     80              p_gw->iLCDAPI->iContrastBoost = 5 ;
   \   000060 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000061 16                    MOVW      HL, AX             ;; 1 cycle
   \   000062 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000064 9C3C                  MOV       [HL+0x3C], A       ;; 1 cycle
     81              p_gw->iLCDAPI->iFrameRate = 137 ;
   \   000066 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000067 16                    MOVW      HL, AX             ;; 1 cycle
   \   000068 308900                MOVW      AX, #0x89          ;; 1 cycle
   \   00006B BC3E                  MOVW      [HL+0x3E], AX      ;; 1 cycle
   \   00006D F6                    CLRW      AX                 ;; 1 cycle
   \   00006E BC40                  MOVW      [HL+0x40], AX      ;; 1 cycle
     82              
     83              /* Turn on the LCD commands */
     84              ST7579_Config(aHandle) ;
   \   000070 15                    MOVW      AX, DE             ;; 1 cycle
   \   000071 FD....                CALL      ST7579_Config      ;; 3 cycles
     85          
     86              return GLYPH_ERROR_NONE ;
   \   000074 F1                    CLRB      A                  ;; 1 cycle
   \   000075 ED....                BR        N:??Subroutine21_0  ;; 3 cycles
   \   000078                       ; ------------------------------------- Block: 85 cycles
   \   000078                       ; ------------------------------------- Total: 85 cycles
   \   000078                       REQUIRE ?CLRL78_V1_0_L00
     87          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000 C4                    POP       DE                 ;; 1 cycle
   \   000001 C2                    POP       BC                 ;; 1 cycle
   \   000002                       ; ------------------------------------- Block: 2 cycles
   \   000002                       ; ------------------------------------- Total: 2 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
   \   000002                       REQUIRE ??Subroutine22_0
   \   000002                       ; // Fall through to label ??Subroutine22_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000003 0400                  DW        0x4                ;; 3 cycles
   \   000005                       ; ------------------------------------- Block: 3 cycles
   \   000005                       ; ------------------------------------- Total: 3 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
     88          
     89          /******************************************************************************
     90          * ID : 30.2
     91          * Outline : ST7579_Close
     92          * Include : ST7579_LCD.h
     93          * Function Name: ST7579_Close
     94          * Description : Clear all settings in the global ST7579_LCD.
     95          * Argument : aHandle - the Glyph handle to setup for the LCD and Communications.
     96          * Return Value : 0=success, not 0= error
     97          * Calling Functions : GlyphOpen
     98          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     99          T_glyphError ST7579_Close(T_glyphHandle aHandle)
   \                     ST7579_Close:
    100          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    101              return GLYPH_ERROR_NONE ;
   \   000000 F1                    CLRB      A                  ;; 1 cycle
   \   000001 D7                    RET                          ;; 6 cycles
   \   000002                       ; ------------------------------------- Block: 7 cycles
   \   000002                       ; ------------------------------------- Total: 7 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
    102          }
    103          
    104          /******************************************************************************
    105          * ID : 31.0
    106          * Outline : ST7579_Write
    107          * Include : ST7579_LCD.h
    108          * Function Name: ST7579_Write
    109          * Description : Write to the LCD using a Glyph Register value, to the Glyph
    110          * data storage or run an LCD Glyph Command.
    111          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    112          *          : aRegister - specifies what to do.
    113          *          : aValue - data if required
    114          * Return Value : 0=success, not 0= error
    115          * Calling Functions : GlyphWrite
    116          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    117          T_glyphError ST7579_Write(T_glyphHandle aHandle, uint32_t aRegister, uint32_t aValue)
   \                     ST7579_Write:
    118          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 8
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 16
   \   000003 200E                  SUBW      SP, #0xE           ;; 1 cycle
    119              uint32_t pCounter;
    120              uint32_t column;
    121              uint32_t line;
    122              const uint8_t *p_char;
    123              uint8_t width;
    124              uint8_t height;
    125              const uint8_t *p_charData;
    126              uint32_t page;
    127              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
   \   000005 FD....                CALL      N:?Subroutine16    ;; 3 cycles
   \   000008                       ; ------------------------------------- Block: 7 cycles
    128              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    129          
    130              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
    131          
    132              switch (aRegister) {
   \                     ??CrossCallReturnLabel_36:
   \   000008 A81A                  MOVW      AX, [SP+0x1A]      ;; 1 cycle
   \   00000A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00000B A818                  MOVW      AX, [SP+0x18]      ;; 1 cycle
   \   00000D 36....                MOVW      HL, #LWRD(??ST7579_Write_0)  ;; 1 cycle
   \   000010 41..                  MOV       ES, #BYTE3(??ST7579_Write_0)  ;; 1 cycle
   \   000012 CEFC..                MOV       CS, #BYTE3(ST7579_Write)  ;; 1 cycle
   \   000015 ED....                BR        N:?L_SSWITCH_L10   ;; 3 cycles
   \   000018                       ; ------------------------------------- Block: 9 cycles
    133                  case GLYPH_CHAR_X:
    134                      p_gw->iLCDAPI->iCharX_Position = aValue ;
   \                     ??ST7579_Write_2:
   \   000018 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   00001A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00001B A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00001D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001E A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000020 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_38:
   \   000023 BA02                  MOVW      [DE+0x02], AX      ;; 1 cycle
   \   000025 13                    MOVW      AX, BC             ;; 1 cycle
   \   000026 BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
   \   000028                       ; ------------------------------------- Block: 3 cycles
    135                      error = GLYPH_ERROR_NONE ;
    136                      break ;
    137                  case GLYPH_CHAR_Y:
    138                      p_gw->iLCDAPI->iCharY_Position = aValue ;
    139                      error = GLYPH_ERROR_NONE ;
    140                      break ;
    141                  case GLYPH_FONT:
    142                      p_gw->iLCDAPI->iCharFont = aValue;
    143                      switch (aValue) {
    144                      #ifdef USE_GLYPH_FONT_BITMAP
    145                          case GLYPH_FONT_BITMAP:
    146                              p_gw->iLCDAPI->iFont = Bitmaps_table ;
    147                              break ;
    148                      #endif
    149                      #ifdef USE_GLYPH_FONT_HELVR10
    150                          case GLYPH_FONT_HELVR10:
    151                              p_gw->iLCDAPI->iFont = FontHelvr10_table ;
    152                              break ;
    153                      #endif
    154                      #ifdef USE_GLYPH_FONT_8_BY_16
    155                          case GLYPH_FONT_8_BY_16:
    156                              p_gw->iLCDAPI->iFont = Font8x16_table ;
    157                              break ;
    158                      #endif
    159                      #ifdef USE_GLYPH_FONT_8_BY_8
    160                          case GLYPH_FONT_8_BY_8:
    161                              p_gw->iLCDAPI->iFont = Font8x8_table ;
    162                              break ;
    163                      #endif
    164                      #ifdef USE_GLYPH_FONT_WINFREE
    165                          case GLYPH_FONT_WINFREESYSTEM14_BY_16:
    166                              p_gw->iLCDAPI->iFont = FontWinFreeSystem14x16_table ;
    167                              break ;
    168                      #endif
    169                      #ifdef USE_GLYPH_FONT_5_BY_7
    170                          case GLYPH_FONT_5_BY_7:
    171                              p_gw->iLCDAPI->iFont = Fontx5x7_table ;
    172                              break ;
    173                      #endif
    174                      #ifdef USE_GLYPH_FONT_6_BY_13
    175                          case GLYPH_FONT_6_BY_13:
    176                              p_gw->iLCDAPI->iFont = Fontx6x13_table ;
    177                              break ;
    178                      #endif
    179          			#ifdef USE_GLYPH_FONT_LOGOS
    180                          case GLYPH_FONT_LOGOS:
    181                              p_gw->iLCDAPI->iFont = Logos_table ;
    182                              break ;
    183                      #endif
    184                      }
    185                      error = GLYPH_ERROR_NONE ;
    186                      break ;
    187                  case GLYPH_DRAW_CMD:
    188                      switch (aValue)  {
    189                          case 1:
    190                              ST7579_SetLine(p_gw, 0);
    191                              for (pCounter=0;pCounter<8;pCounter++)  {
    192                                  ST7579_SetPage(aHandle, pCounter);
    193                                  ST7579_SetChar(aHandle, 0);
    194                                  for (column=0; column<128; column++)    {
    195                                      p_gw->iCommAPI->iDataSend(0x00);
    196                                  }
    197                              }
    198                              ST7579_SetPage(aHandle, 0);
    199                              ST7579_SetChar(aHandle, 0);
    200                              break;
    201                          case 2:
    202                              /* use reverse video to detect pixel changes */
    203                              ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_REVERSE);
    204                              break;
    205                          case 3:
    206                              /* use normal video to detect pixel changes */
    207                              ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_NORMAL);
    208                              break;
    209                          case 6:
    210                              for (pCounter=0;pCounter<8;pCounter++)  {
    211                                  ST7579_SetLine(aHandle, 0);
    212                                  ST7579_SetChar(aHandle, 0);              
    213                                  ST7579_SetPage(aHandle, pCounter);
    214                                  for (column=0;column<16;column++)   {
    215                                      p_gw->iCommAPI->iDataSend(0xFF);
    216                                      p_gw->iCommAPI->iDataSend(0x01);
    217                                      p_gw->iCommAPI->iDataSend(0x01);
    218                                      p_gw->iCommAPI->iDataSend(0x01);
    219                                      p_gw->iCommAPI->iDataSend(0x01);
    220                                      p_gw->iCommAPI->iDataSend(0x01);
    221                                      p_gw->iCommAPI->iDataSend(0x01);
    222                                      p_gw->iCommAPI->iDataSend(0x01);
    223                                  }
    224                              }                                       
    225                              break;
    226                          case 7:
    227                              for (line=p_gw->iLCDAPI->iCharY_Position; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
    228                                  ST7579_SetPage(aHandle, line/8);
    229                                  ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    230                                  for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
    231                                      p_gw->iCommAPI->iDataSend(0xFF);
    232                                  }
    233                              }
    234                              break;
    235                          case 8:
    236                              for (line=p_gw->iLCDAPI->iCharY_Position; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
    237                                  ST7579_SetPage(aHandle, line/8);
    238                                  ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    239                                  for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
    240                                      p_gw->iCommAPI->iDataSend(0x00);
    241                                  }
    242                              }
    243                              break;
    244                      }
    245                      error = GLYPH_ERROR_NONE ;
   \                     ??ST7579_Write_3:
   \   000028 5500                  MOV       D, #0x0            ;; 1 cycle
    246                      break ;
   \   00002A                       ; ------------------------------------- Block: 1 cycles
    247                  case GLYPH_DRAW_CHAR:
    248                      p_char = p_gw->iLCDAPI->iFont[aValue];
    249                      width = p_char[0];
    250                      height = p_char[1];
    251                      p_charData = &p_char[2];
    252                      for (page=0; page<height; page+=8)  {
    253                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    254                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    255                          for (column=0; column<width; column++, p_charData++)    {
    256                              p_gw->iCommAPI->iDataSend(*p_charData);
    257                          }
    258                      }
    259          			p_gw->iLCDAPI->iCharX_Position += width;
    260                      error = GLYPH_ERROR_NONE ;
    261                      break ;
    262                  case GLYPH_CHAR_ERASE:
    263                      p_char = p_gw->iLCDAPI->iFont[aValue];
    264                      width = p_char[0];
    265                      height = p_char[1];
    266                      for (page=0; page<height; page+=8)  {
    267                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    268                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    269                          for (column=0; column<width; column++, p_charData++)    {
    270                              p_gw->iCommAPI->iDataSend(0x00);
    271                          }
    272                      }
    273          			p_gw->iLCDAPI->iCharX_Position += width;
    274                      error = GLYPH_ERROR_NONE ;
    275                      break ;
    276                  case GLYPH_INVERT_CHAR:
    277                      p_char = (uint8_t *)p_gw->iLCDAPI->iFont[aValue];
    278                      width = p_char[0];
    279                      height = p_char[1];
    280                      p_charData = &p_char[2];
    281                      for (page=0; page<height; page+=8)  {
    282                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    283                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    284                          for (column=0; column<width; column++, p_charData++)    {
    285          					// Output the inverted values to invert character
    286                              p_gw->iCommAPI->iDataSend(*p_charData ^ 0xFF);
    287                          }
    288                      }
    289          			p_gw->iLCDAPI->iCharX_Position += width;
    290                      error = GLYPH_ERROR_NONE;
    291                      break;
    292                  case GLYPH_CHAR_X2:
    293                      p_gw->iLCDAPI->iCharX2_Position = aValue ;
    294                      error = GLYPH_ERROR_NONE ;
    295                      break ;
    296                  case GLYPH_CHAR_Y2:
    297                      p_gw->iLCDAPI->iCharY2_Position = aValue ;
    298                      error = GLYPH_ERROR_NONE ;
    299                      break ;
    300                  case GLYPH_FRAME_RATE:
    301                      p_gw->iLCDAPI->iFrameRate = (int32_t)aValue ;
    302                      ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
    303                      error = GLYPH_ERROR_NONE ;
    304                      break ;
    305                  case GLYPH_CONTRAST:
    306                      p_gw->iLCDAPI->iContrast = (int32_t)aValue ;
    307                      ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
    308                      error = GLYPH_ERROR_NONE ;
    309                      break ;
    310                  case GLYPH_CONTRAST_BOOST:
    311                      p_gw->iLCDAPI->iContrastBoost = (int8_t)aValue ;
    312                      ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
    313                      error = GLYPH_ERROR_NONE ;
    314                      break ;
    315              }
    316          
    317              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
   \                     ??ST7579_Write_4:
   \   00002A A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00002C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00002E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002F F6                    CLRW      AX                 ;; 1 cycle
   \   000030 BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
    318              return error ;
   \   000032 65                    MOV       A, D               ;; 1 cycle
   \   000033 1010                  ADDW      SP, #0x10          ;; 1 cycle
   \   000035 C4                    POP       DE                 ;; 1 cycle
   \   000036 C2                    POP       BC                 ;; 1 cycle
   \   000037 FD....                CALL      N:?FUNC_LEAVE_L06
   \   00003A 0800                  DW        0x8                ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_5:
   \   00003C A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   00003E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00003F A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000041 16                    MOVW      HL, AX             ;; 1 cycle
   \   000042 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000044 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000047                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_39:
   \   000047 BA06                  MOVW      [DE+0x06], AX      ;; 1 cycle
   \   000049 13                    MOVW      AX, BC             ;; 1 cycle
   \   00004A BA08                  MOVW      [DE+0x08], AX      ;; 1 cycle
   \   00004C EFDA                  BR        S:??ST7579_Write_3  ;; 3 cycles
   \   00004E                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_Write_6:
   \   00004E A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   000050 12                    MOVW      BC, AX             ;; 1 cycle
   \   000051 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000053 16                    MOVW      HL, AX             ;; 1 cycle
   \   000054 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000056 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000059                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_40:
   \   000059 BA12                  MOVW      [DE+0x12], AX      ;; 1 cycle
   \   00005B 13                    MOVW      AX, BC             ;; 1 cycle
   \   00005C BA14                  MOVW      [DE+0x14], AX      ;; 1 cycle
   \   00005E A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000060 FD....                CALL      N:??Subroutine27_0  ;; 3 cycles
   \   000063                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_89:
   \   000063 DFC3                  BNZ       ??ST7579_Write_3   ;; 4 cycles
   \   000065                       ; ------------------------------------- Block: 4 cycles
   \   000065 F7                    CLRW      BC                 ;; 1 cycle
   \   000066 43                    CMPW      AX, BC             ;; 1 cycle
   \   000067 DD0C                  BZ        ??ST7579_SetLine_0  ;; 4 cycles
   \   000069                       ; ------------------------------------- Block: 6 cycles
   \   000069 440200                CMPW      AX, #0x2           ;; 1 cycle
   \   00006C DD10                  BZ        ??ST7579_SetLine_1  ;; 4 cycles
   \   00006E                       ; ------------------------------------- Block: 5 cycles
   \   00006E 440700                CMPW      AX, #0x7           ;; 1 cycle
   \   000071 DD10                  BZ        ??ST7579_SetLine_2  ;; 4 cycles
   \   000073                       ; ------------------------------------- Block: 5 cycles
   \   000073 EFB3                  BR        S:??ST7579_Write_3  ;; 3 cycles
   \   000075                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_0:
   \   000075 34....                MOVW      DE, #Font8x8_table  ;; 1 cycle
   \   000078                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_Write_7:
   \   000078 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000079 16                    MOVW      HL, AX             ;; 1 cycle
   \   00007A 15                    MOVW      AX, DE             ;; 1 cycle
   \   00007B BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00007C EFAA                  BR        S:??ST7579_Write_3  ;; 3 cycles
   \   00007E                       ; ------------------------------------- Block: 7 cycles
   \                     ??ST7579_SetLine_1:
   \   00007E 34....                MOVW      DE, #Fontx5x7_table  ;; 1 cycle
   \   000081 EFF5                  BR        S:??ST7579_Write_7  ;; 3 cycles
   \   000083                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_SetLine_2:
   \   000083 34....                MOVW      DE, #Logos_table   ;; 1 cycle
   \   000086 EFF0                  BR        S:??ST7579_Write_7  ;; 3 cycles
   \   000088                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_8:
   \   000088 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   00008A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00008B A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00008D 36....                MOVW      HL, #LWRD(??ST7579_Write_1)  ;; 1 cycle
   \   000090 41..                  MOV       ES, #BYTE3(??ST7579_Write_1)  ;; 1 cycle
   \   000092 ED....                BR        N:?L_SSWITCH_L10   ;; 3 cycles
   \   000095                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_Write_9:
   \   000095 F3                    CLRB      B                  ;; 1 cycle
   \   000096 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000098 FD....                CALL      ST7579_SetLine     ;; 3 cycles
   \   00009B F6                    CLRW      AX                 ;; 1 cycle
   \   00009C B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00009E B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0000A0 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000A2 A1                    INCW      AX                 ;; 1 cycle
   \   0000A3 A1                    INCW      AX                 ;; 1 cycle
   \   0000A4 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0000A6                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_Write_10:
   \   0000A6 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   0000A8 73                    MOV       B, A               ;; 1 cycle
   \   0000A9 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000AB FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0000AE F3                    CLRB      B                  ;; 1 cycle
   \   0000AF A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000B1 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0000B4 5380                  MOV       B, #0x80           ;; 1 cycle
   \   0000B6                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_Write_11:
   \   0000B6 F1                    CLRB      A                  ;; 1 cycle
   \   0000B7 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000B8 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000BA FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   0000BD                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_41:
   \   0000BD C5                    PUSH      DE                 ;; 1 cycle
   \   0000BE C6                    POP       HL                 ;; 1 cycle
   \   0000BF FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   0000C2                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_56:
   \   0000C2 61EA                  CALL      DE                 ;; 3 cycles
   \   0000C4 93                    DEC       B                  ;; 1 cycle
   \   0000C5 DFEF                  BNZ       ??ST7579_Write_11  ;; 4 cycles
   \   0000C7                       ; ------------------------------------- Block: 8 cycles
   \   0000C7 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000C9 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000CA A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000CC 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   0000CF 61D8                  SKNC
   \   0000D1 A3                    INCW      BC                 ;; 5 cycles
   \   0000D2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000D3 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000D5 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000D6 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0000D8 FD....                CALL      N:?Subroutine19    ;; 3 cycles
   \   0000DB                       ; ------------------------------------- Block: 16 cycles
   \                     ??CrossCallReturnLabel_91:
   \   0000DB 61F8                  SKNZ                         ;; 4 cycles
   \   0000DD                       ; ------------------------------------- Block: 4 cycles
   \   0000DD 440800                CMPW      AX, #0x8           ;; 1 cycle
   \   0000E0                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_Write_12:
   \   0000E0 DCC4                  BC        ??ST7579_Write_10  ;; 4 cycles
   \   0000E2                       ; ------------------------------------- Block: 4 cycles
   \   0000E2 F3                    CLRB      B                  ;; 1 cycle
   \   0000E3 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000E5 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0000E8 F3                    CLRB      B                  ;; 1 cycle
   \   0000E9 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000EB FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0000EE ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   0000F1                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_13:
   \   0000F1 F6                    CLRW      AX                 ;; 1 cycle
   \   0000F2 C1                    PUSH      AX                 ;; 1 cycle
   \   0000F3 300D28                MOVW      AX, #0x280D        ;; 1 cycle
   \   0000F6                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_Write_14:
   \   0000F6 C1                    PUSH      AX                 ;; 1 cycle
   \   0000F7 A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   0000F9 FD....                CALL      ST7579_Send16bitsCommand  ;; 3 cycles
   \   0000FC ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   0000FF                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_Write_15:
   \   0000FF F6                    CLRW      AX                 ;; 1 cycle
   \   000100 C1                    PUSH      AX                 ;; 1 cycle
   \   000101 300C28                MOVW      AX, #0x280C        ;; 1 cycle
   \   000104 EFF0                  BR        S:??ST7579_Write_14  ;; 3 cycles
   \   000106                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_Write_16:
   \   000106 F6                    CLRW      AX                 ;; 1 cycle
   \   000107 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000109 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   00010B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00010D A1                    INCW      AX                 ;; 1 cycle
   \   00010E A1                    INCW      AX                 ;; 1 cycle
   \   00010F B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000111                       ; ------------------------------------- Block: 7 cycles
   \                     ??ST7579_Write_17:
   \   000111 F3                    CLRB      B                  ;; 1 cycle
   \   000112 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000114 FD....                CALL      ST7579_SetLine     ;; 3 cycles
   \   000117 F3                    CLRB      B                  ;; 1 cycle
   \   000118 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00011A FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   00011D 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   00011F 73                    MOV       B, A               ;; 1 cycle
   \   000120 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000122 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000125 5310                  MOV       B, #0x10           ;; 1 cycle
   \   000127                       ; ------------------------------------- Block: 17 cycles
   \                     ??ST7579_Write_18:
   \   000127 51FF                  MOV       A, #0xFF           ;; 1 cycle
   \   000129 16                    MOVW      HL, AX             ;; 1 cycle
   \   00012A A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00012C FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   00012F                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_42:
   \   00012F C5                    PUSH      DE                 ;; 1 cycle
   \   000130 C6                    POP       HL                 ;; 1 cycle
   \   000131 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000134                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_57:
   \   000134 61EA                  CALL      DE                 ;; 3 cycles
   \   000136 E1                    ONEB      A                  ;; 1 cycle
   \   000137 16                    MOVW      HL, AX             ;; 1 cycle
   \   000138 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00013A FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   00013D                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_43:
   \   00013D C5                    PUSH      DE                 ;; 1 cycle
   \   00013E C6                    POP       HL                 ;; 1 cycle
   \   00013F FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000142                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_58:
   \   000142 61EA                  CALL      DE                 ;; 3 cycles
   \   000144 E1                    ONEB      A                  ;; 1 cycle
   \   000145 16                    MOVW      HL, AX             ;; 1 cycle
   \   000146 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000148 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   00014B                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_44:
   \   00014B C5                    PUSH      DE                 ;; 1 cycle
   \   00014C C6                    POP       HL                 ;; 1 cycle
   \   00014D FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000150                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_59:
   \   000150 61EA                  CALL      DE                 ;; 3 cycles
   \   000152 E1                    ONEB      A                  ;; 1 cycle
   \   000153 16                    MOVW      HL, AX             ;; 1 cycle
   \   000154 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000156 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000159                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_45:
   \   000159 C5                    PUSH      DE                 ;; 1 cycle
   \   00015A C6                    POP       HL                 ;; 1 cycle
   \   00015B FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00015E                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_60:
   \   00015E 61EA                  CALL      DE                 ;; 3 cycles
   \   000160 E1                    ONEB      A                  ;; 1 cycle
   \   000161 16                    MOVW      HL, AX             ;; 1 cycle
   \   000162 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000164 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000167                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_46:
   \   000167 C5                    PUSH      DE                 ;; 1 cycle
   \   000168 C6                    POP       HL                 ;; 1 cycle
   \   000169 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00016C                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_61:
   \   00016C 61EA                  CALL      DE                 ;; 3 cycles
   \   00016E E1                    ONEB      A                  ;; 1 cycle
   \   00016F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000170 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000172 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000175                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_47:
   \   000175 C5                    PUSH      DE                 ;; 1 cycle
   \   000176 C6                    POP       HL                 ;; 1 cycle
   \   000177 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00017A                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_62:
   \   00017A 61EA                  CALL      DE                 ;; 3 cycles
   \   00017C E1                    ONEB      A                  ;; 1 cycle
   \   00017D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00017E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000180 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000183                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_48:
   \   000183 C5                    PUSH      DE                 ;; 1 cycle
   \   000184 C6                    POP       HL                 ;; 1 cycle
   \   000185 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000188                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_63:
   \   000188 61EA                  CALL      DE                 ;; 3 cycles
   \   00018A E1                    ONEB      A                  ;; 1 cycle
   \   00018B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00018C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00018E FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000191                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_49:
   \   000191 C5                    PUSH      DE                 ;; 1 cycle
   \   000192 C6                    POP       HL                 ;; 1 cycle
   \   000193 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000196                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_64:
   \   000196 61EA                  CALL      DE                 ;; 3 cycles
   \   000198 93                    DEC       B                  ;; 1 cycle
   \   000199 DF8C                  BNZ       ??ST7579_Write_18  ;; 4 cycles
   \   00019B                       ; ------------------------------------- Block: 8 cycles
   \   00019B A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00019D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00019E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001A0 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   0001A3 61D8                  SKNC
   \   0001A5 A3                    INCW      BC                 ;; 5 cycles
   \   0001A6 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001A7 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0001A9 13                    MOVW      AX, BC             ;; 1 cycle
   \   0001AA B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0001AC FD....                CALL      N:?Subroutine19    ;; 3 cycles
   \   0001AF                       ; ------------------------------------- Block: 16 cycles
   \                     ??CrossCallReturnLabel_92:
   \   0001AF 61F8                  SKNZ                         ;; 4 cycles
   \   0001B1                       ; ------------------------------------- Block: 4 cycles
   \   0001B1 440800                CMPW      AX, #0x8           ;; 1 cycle
   \   0001B4                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_Write_19:
   \   0001B4 61C8                  SKC                          ;; 4 cycles
   \   0001B6 ED....                BR        N:??ST7579_Write_3  ;; 4 cycles
   \   0001B9                       ; ------------------------------------- Block: 4 cycles
   \   0001B9 ED....                BR        N:??ST7579_Write_17  ;; 3 cycles
   \   0001BC                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_Write_20:
   \   0001BC A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0001BE FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   0001C1                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_19:
   \   0001C1 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   0001C3 13                    MOVW      AX, BC             ;; 1 cycle
   \   0001C4 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   0001C6 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0001C8 A1                    INCW      AX                 ;; 1 cycle
   \   0001C9 A1                    INCW      AX                 ;; 1 cycle
   \   0001CA B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0001CC EF3A                  BR        S:??ST7579_SetLine_3  ;; 3 cycles
   \   0001CE                       ; ------------------------------------- Block: 10 cycles
   \                     ??ST7579_Write_21:
   \   0001CE A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001D0 FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   0001D3                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_31:
   \   0001D3 FD....                CALL      N:??Subroutine29_0  ;; 3 cycles
   \   0001D6                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_93:
   \   0001D6 51FF                  MOV       A, #0xFF           ;; 1 cycle
   \   0001D8 61EA                  CALL      DE                 ;; 3 cycles
   \   0001DA A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0001DC 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001DD A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0001DF 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   0001E2 61D8                  SKNC
   \   0001E4 A3                    INCW      BC                 ;; 5 cycles
   \   0001E5                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_22:
   \   0001E5 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0001E7 13                    MOVW      AX, BC             ;; 1 cycle
   \   0001E8 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   0001EA C3                    PUSH      BC                 ;; 1 cycle
   \   0001EB A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0001ED C1                    PUSH      AX                 ;; 1 cycle
   \   0001EE A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   0001F0 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   0001F3                       ; ------------------------------------- Block: 10 cycles
   \                     ??CrossCallReturnLabel_25:
   \   0001F3 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   0001F6 DED6                  BNC       ??ST7579_Write_21  ;; 4 cycles
   \   0001F8                       ; ------------------------------------- Block: 7 cycles
   \   0001F8 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001FA 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001FB A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   0001FD 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000200 61D8                  SKNC
   \   000202 A3                    INCW      BC                 ;; 5 cycles
   \   000203 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   000205 13                    MOVW      AX, BC             ;; 1 cycle
   \   000206 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000208                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_SetLine_3:
   \   000208 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00020A C1                    PUSH      AX                 ;; 1 cycle
   \   00020B A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00020D C1                    PUSH      AX                 ;; 1 cycle
   \   00020E A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   000210 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000213                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_28:
   \   000213 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000216 61D8                  SKNC                         ;; 4 cycles
   \   000218 ED....                BR        N:??ST7579_Write_3  ;; 4 cycles
   \   00021B                       ; ------------------------------------- Block: 7 cycles
   \   00021B A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00021D 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   00021F 60                    MOV       A, X               ;; 1 cycle
   \   000220 73                    MOV       B, A               ;; 1 cycle
   \   000221 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000223 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000226 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000228 FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   00022B                       ; ------------------------------------- Block: 12 cycles
   \                     ??CrossCallReturnLabel_11:
   \   00022B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00022D FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   000230 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000232 FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   000235                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_22:
   \   000235 EFAE                  BR        S:??ST7579_Write_22  ;; 3 cycles
   \   000237                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_Write_23:
   \   000237 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000239 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   00023C                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_20:
   \   00023C B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   00023E 13                    MOVW      AX, BC             ;; 1 cycle
   \   00023F B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000241 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000243 A1                    INCW      AX                 ;; 1 cycle
   \   000244 A1                    INCW      AX                 ;; 1 cycle
   \   000245 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000247 EF39                  BR        S:??ST7579_SetLine_4  ;; 3 cycles
   \   000249                       ; ------------------------------------- Block: 10 cycles
   \                     ??ST7579_Write_24:
   \   000249 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00024B FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   00024E                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_32:
   \   00024E FD....                CALL      N:??Subroutine29_0  ;; 3 cycles
   \   000251                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_94:
   \   000251 F1                    CLRB      A                  ;; 1 cycle
   \   000252 61EA                  CALL      DE                 ;; 3 cycles
   \   000254 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   000256 12                    MOVW      BC, AX             ;; 1 cycle
   \   000257 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000259 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   00025C 61D8                  SKNC
   \   00025E A3                    INCW      BC                 ;; 5 cycles
   \   00025F                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_25:
   \   00025F B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000261 13                    MOVW      AX, BC             ;; 1 cycle
   \   000262 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   000264 C3                    PUSH      BC                 ;; 1 cycle
   \   000265 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   000267 C1                    PUSH      AX                 ;; 1 cycle
   \   000268 A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   00026A FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   00026D                       ; ------------------------------------- Block: 10 cycles
   \                     ??CrossCallReturnLabel_26:
   \   00026D FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000270 DED7                  BNC       ??ST7579_Write_24  ;; 4 cycles
   \   000272                       ; ------------------------------------- Block: 7 cycles
   \   000272 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000274 12                    MOVW      BC, AX             ;; 1 cycle
   \   000275 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000277 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   00027A 61D8                  SKNC
   \   00027C A3                    INCW      BC                 ;; 5 cycles
   \   00027D B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   00027F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000280 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000282                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_SetLine_4:
   \   000282 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000284 C1                    PUSH      AX                 ;; 1 cycle
   \   000285 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000287 C1                    PUSH      AX                 ;; 1 cycle
   \   000288 A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   00028A FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00028D                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_29:
   \   00028D FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000290 61D8                  SKNC                         ;; 4 cycles
   \   000292 ED....                BR        N:??ST7579_Write_3  ;; 4 cycles
   \   000295                       ; ------------------------------------- Block: 7 cycles
   \   000295 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000297 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   000299 60                    MOV       A, X               ;; 1 cycle
   \   00029A 73                    MOV       B, A               ;; 1 cycle
   \   00029B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00029D FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0002A0 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0002A2 FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   0002A5                       ; ------------------------------------- Block: 12 cycles
   \                     ??CrossCallReturnLabel_12:
   \   0002A5 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0002A7 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0002AA A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0002AC FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   0002AF                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_23:
   \   0002AF EFAE                  BR        S:??ST7579_Write_25  ;; 3 cycles
   \   0002B1                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_Write_26:
   \   0002B1 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   0002B3 01                    ADDW      AX, AX             ;; 1 cycle
   \   0002B4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002B5 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0002B7 FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   0002BA                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_0:
   \   0002BA 9802                  MOV       [SP+0x02], A       ;; 1 cycle
   \   0002BC 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   0002BE 9803                  MOV       [SP+0x03], A       ;; 1 cycle
   \   0002C0 15                    MOVW      AX, DE             ;; 1 cycle
   \   0002C1 A1                    INCW      AX                 ;; 1 cycle
   \   0002C2 A1                    INCW      AX                 ;; 1 cycle
   \   0002C3 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   0002C5 F6                    CLRW      AX                 ;; 1 cycle
   \   0002C6 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   0002C8 B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   0002CA A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0002CC A1                    INCW      AX                 ;; 1 cycle
   \   0002CD A1                    INCW      AX                 ;; 1 cycle
   \   0002CE B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0002D0 EF45                  BR        S:??ST7579_SetLine_5  ;; 3 cycles
   \   0002D2                       ; ------------------------------------- Block: 17 cycles
   \                     ??ST7579_Write_27:
   \   0002D2 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   0002D4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002D5 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0002D6 73                    MOV       B, A               ;; 1 cycle
   \   0002D7 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0002D9 FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   0002DC                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_33:
   \   0002DC FD....                CALL      N:??Subroutine26_0  ;; 3 cycles
   \   0002DF                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_79:
   \   0002DF 61EA                  CALL      DE                 ;; 3 cycles
   \   0002E1 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0002E3 12                    MOVW      BC, AX             ;; 1 cycle
   \   0002E4 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002E6 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   0002E9 61D8                  SKNC
   \   0002EB A3                    INCW      BC                 ;; 5 cycles
   \   0002EC B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0002EE 13                    MOVW      AX, BC             ;; 1 cycle
   \   0002EF B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   0002F1 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   0002F3 A1                    INCW      AX                 ;; 1 cycle
   \   0002F4 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   0002F6                       ; ------------------------------------- Block: 18 cycles
   \                     ??ST7579_Write_28:
   \   0002F6 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   0002F8 70                    MOV       X, A               ;; 1 cycle
   \   0002F9 F1                    CLRB      A                  ;; 1 cycle
   \   0002FA F7                    CLRW      BC                 ;; 1 cycle
   \   0002FB C3                    PUSH      BC                 ;; 1 cycle
   \   0002FC C1                    PUSH      AX                 ;; 1 cycle
   \   0002FD A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002FF 12                    MOVW      BC, AX             ;; 1 cycle
   \   000300 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000302 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000305 DCCB                  BC        ??ST7579_Write_27  ;; 4 cycles
   \   000307                       ; ------------------------------------- Block: 16 cycles
   \   000307 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000309 12                    MOVW      BC, AX             ;; 1 cycle
   \   00030A A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00030C 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   00030F 61D8                  SKNC
   \   000311 A3                    INCW      BC                 ;; 5 cycles
   \   000312 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000314 13                    MOVW      AX, BC             ;; 1 cycle
   \   000315 B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   000317                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_SetLine_5:
   \   000317 8803                  MOV       A, [SP+0x03]       ;; 1 cycle
   \   000319 70                    MOV       X, A               ;; 1 cycle
   \   00031A F1                    CLRB      A                  ;; 1 cycle
   \   00031B F7                    CLRW      BC                 ;; 1 cycle
   \   00031C C3                    PUSH      BC                 ;; 1 cycle
   \   00031D C1                    PUSH      AX                 ;; 1 cycle
   \   00031E A810                  MOVW      AX, [SP+0x10]      ;; 1 cycle
   \   000320 12                    MOVW      BC, AX             ;; 1 cycle
   \   000321 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000323 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000326 61C8                  SKC                          ;; 4 cycles
   \   000328 ED....                BR        N:??ST7579_SetLine_6  ;; 4 cycles
   \   00032B                       ; ------------------------------------- Block: 16 cycles
   \   00032B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00032C A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00032E FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000331                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_16:
   \   000331 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000333 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000336 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000338 FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   00033B                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_13:
   \   00033B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00033D FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   000340 F6                    CLRW      AX                 ;; 1 cycle
   \   000341 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000343 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   000345 EFAF                  BR        S:??ST7579_Write_28  ;; 3 cycles
   \   000347                       ; ------------------------------------- Block: 10 cycles
   \                     ??ST7579_Write_29:
   \   000347 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000349 01                    ADDW      AX, AX             ;; 1 cycle
   \   00034A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00034B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00034D FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   000350                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_1:
   \   000350 9802                  MOV       [SP+0x02], A       ;; 1 cycle
   \   000352 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   000354 9803                  MOV       [SP+0x03], A       ;; 1 cycle
   \   000356 F6                    CLRW      AX                 ;; 1 cycle
   \   000357 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000359 B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   00035B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00035D A1                    INCW      AX                 ;; 1 cycle
   \   00035E A1                    INCW      AX                 ;; 1 cycle
   \   00035F B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000361 EF39                  BR        S:??ST7579_SetLine_7  ;; 3 cycles
   \   000363                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_30:
   \   000363 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000365 FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   000368                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_34:
   \   000368 FD....                CALL      N:??Subroutine29_0  ;; 3 cycles
   \   00036B                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_95:
   \   00036B F1                    CLRB      A                  ;; 1 cycle
   \   00036C 61EA                  CALL      DE                 ;; 3 cycles
   \   00036E A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000370 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000373 61D8                  SKNC
   \   000375 A3                    INCW      BC                 ;; 5 cycles
   \   000376 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000378 13                    MOVW      AX, BC             ;; 1 cycle
   \   000379                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_31:
   \   000379 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00037B 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   00037D 70                    MOV       X, A               ;; 1 cycle
   \   00037E F1                    CLRB      A                  ;; 1 cycle
   \   00037F F7                    CLRW      BC                 ;; 1 cycle
   \   000380 C3                    PUSH      BC                 ;; 1 cycle
   \   000381 C1                    PUSH      AX                 ;; 1 cycle
   \   000382 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000384 12                    MOVW      BC, AX             ;; 1 cycle
   \   000385 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000387 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   00038A DCD7                  BC        ??ST7579_Write_30  ;; 4 cycles
   \   00038C                       ; ------------------------------------- Block: 17 cycles
   \   00038C A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   00038E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00038F A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000391 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000394 61D8                  SKNC
   \   000396 A3                    INCW      BC                 ;; 5 cycles
   \   000397 B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   000399 13                    MOVW      AX, BC             ;; 1 cycle
   \   00039A B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   00039C                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_SetLine_7:
   \   00039C 8803                  MOV       A, [SP+0x03]       ;; 1 cycle
   \   00039E 70                    MOV       X, A               ;; 1 cycle
   \   00039F F1                    CLRB      A                  ;; 1 cycle
   \   0003A0 F7                    CLRW      BC                 ;; 1 cycle
   \   0003A1 C3                    PUSH      BC                 ;; 1 cycle
   \   0003A2 C1                    PUSH      AX                 ;; 1 cycle
   \   0003A3 A810                  MOVW      AX, [SP+0x10]      ;; 1 cycle
   \   0003A5 12                    MOVW      BC, AX             ;; 1 cycle
   \   0003A6 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003A8 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   0003AB 61C8                  SKC                          ;; 4 cycles
   \   0003AD ED....                BR        N:??ST7579_SetLine_6  ;; 4 cycles
   \   0003B0                       ; ------------------------------------- Block: 16 cycles
   \   0003B0 14                    MOVW      DE, AX             ;; 1 cycle
   \   0003B1 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003B3 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   0003B6                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_17:
   \   0003B6 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003B8 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0003BB A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003BD FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   0003C0                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_14:
   \   0003C0 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003C2 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0003C5 F6                    CLRW      AX                 ;; 1 cycle
   \   0003C6 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0003C8 EFAF                  BR        S:??ST7579_Write_31  ;; 3 cycles
   \   0003CA                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_32:
   \   0003CA A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   0003CC 01                    ADDW      AX, AX             ;; 1 cycle
   \   0003CD 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003CE A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003D0 FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   0003D3                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_2:
   \   0003D3 9802                  MOV       [SP+0x02], A       ;; 1 cycle
   \   0003D5 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   0003D7 9803                  MOV       [SP+0x03], A       ;; 1 cycle
   \   0003D9 15                    MOVW      AX, DE             ;; 1 cycle
   \   0003DA A1                    INCW      AX                 ;; 1 cycle
   \   0003DB A1                    INCW      AX                 ;; 1 cycle
   \   0003DC B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   0003DE F6                    CLRW      AX                 ;; 1 cycle
   \   0003DF B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   0003E1 B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   0003E3 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0003E5 A1                    INCW      AX                 ;; 1 cycle
   \   0003E6 A1                    INCW      AX                 ;; 1 cycle
   \   0003E7 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0003E9 EF47                  BR        S:??ST7579_SetLine_8  ;; 3 cycles
   \   0003EB                       ; ------------------------------------- Block: 17 cycles
   \                     ??ST7579_Write_33:
   \   0003EB A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   0003ED 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003EE 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0003EF 7CFF                  XOR       A, #0xFF           ;; 1 cycle
   \   0003F1 73                    MOV       B, A               ;; 1 cycle
   \   0003F2 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0003F4 FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   0003F7                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_35:
   \   0003F7 FD....                CALL      N:??Subroutine26_0  ;; 3 cycles
   \   0003FA                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_80:
   \   0003FA 61EA                  CALL      DE                 ;; 3 cycles
   \   0003FC A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0003FE 12                    MOVW      BC, AX             ;; 1 cycle
   \   0003FF A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000401 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000404 61D8                  SKNC
   \   000406 A3                    INCW      BC                 ;; 5 cycles
   \   000407 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000409 13                    MOVW      AX, BC             ;; 1 cycle
   \   00040A B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00040C A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00040E A1                    INCW      AX                 ;; 1 cycle
   \   00040F B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   000411                       ; ------------------------------------- Block: 18 cycles
   \                     ??ST7579_Write_34:
   \   000411 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   000413 70                    MOV       X, A               ;; 1 cycle
   \   000414 F1                    CLRB      A                  ;; 1 cycle
   \   000415 F7                    CLRW      BC                 ;; 1 cycle
   \   000416 C3                    PUSH      BC                 ;; 1 cycle
   \   000417 C1                    PUSH      AX                 ;; 1 cycle
   \   000418 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00041A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00041B A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00041D FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000420 DCC9                  BC        ??ST7579_Write_33  ;; 4 cycles
   \   000422                       ; ------------------------------------- Block: 16 cycles
   \   000422 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000424 12                    MOVW      BC, AX             ;; 1 cycle
   \   000425 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000427 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   00042A 61D8                  SKNC
   \   00042C A3                    INCW      BC                 ;; 5 cycles
   \   00042D B80A                  MOVW      [SP+0x0A], AX      ;; 1 cycle
   \   00042F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000430 B80C                  MOVW      [SP+0x0C], AX      ;; 1 cycle
   \   000432                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_SetLine_8:
   \   000432 8803                  MOV       A, [SP+0x03]       ;; 1 cycle
   \   000434 70                    MOV       X, A               ;; 1 cycle
   \   000435 F1                    CLRB      A                  ;; 1 cycle
   \   000436 F7                    CLRW      BC                 ;; 1 cycle
   \   000437 C3                    PUSH      BC                 ;; 1 cycle
   \   000438 C1                    PUSH      AX                 ;; 1 cycle
   \   000439 A810                  MOVW      AX, [SP+0x10]      ;; 1 cycle
   \   00043B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00043C A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00043E FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000441 DE1C                  BNC       ??ST7579_SetLine_6  ;; 4 cycles
   \   000443                       ; ------------------------------------- Block: 16 cycles
   \   000443 14                    MOVW      DE, AX             ;; 1 cycle
   \   000444 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000446 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000449                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_18:
   \   000449 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00044B FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   00044E A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000450 FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   000453                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_15:
   \   000453 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000455 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   000458 F6                    CLRW      AX                 ;; 1 cycle
   \   000459 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   00045B B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00045D EFB2                  BR        S:??ST7579_Write_34  ;; 3 cycles
   \   00045F                       ; ------------------------------------- Block: 10 cycles
   \                     ??ST7579_SetLine_6:
   \   00045F A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000461 16                    MOVW      HL, AX             ;; 1 cycle
   \   000462 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000463 A1                    INCW      AX                 ;; 1 cycle
   \   000464 A1                    INCW      AX                 ;; 1 cycle
   \   000465 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000467 8802                  MOV       A, [SP+0x02]       ;; 1 cycle
   \   000469 70                    MOV       X, A               ;; 1 cycle
   \   00046A F1                    CLRB      A                  ;; 1 cycle
   \   00046B F7                    CLRW      BC                 ;; 1 cycle
   \   00046C C3                    PUSH      BC                 ;; 1 cycle
   \   00046D C1                    PUSH      AX                 ;; 1 cycle
   \   00046E A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000470 16                    MOVW      HL, AX             ;; 1 cycle
   \   000471 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000473 12                    MOVW      BC, AX             ;; 1 cycle
   \   000474 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000475 C4                    POP       DE                 ;; 1 cycle
   \   000476 C6                    POP       HL                 ;; 1 cycle
   \   000477 05                    ADDW      AX, DE             ;; 1 cycle
   \   000478 61D8                  SKNC
   \   00047A A3                    INCW      BC                 ;; 5 cycles
   \   00047B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00047C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00047E 37                    XCHW      AX, HL             ;; 1 cycle
   \   00047F BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000480 13                    MOVW      AX, BC             ;; 1 cycle
   \   000481 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000483 ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   000486                       ; ------------------------------------- Block: 34 cycles
   \                     ??ST7579_Write_35:
   \   000486 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   000488 12                    MOVW      BC, AX             ;; 1 cycle
   \   000489 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00048B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00048C A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00048E FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   000491                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_50:
   \   000491 BA0A                  MOVW      [DE+0x0A], AX      ;; 1 cycle
   \   000493 13                    MOVW      AX, BC             ;; 1 cycle
   \   000494 BA0C                  MOVW      [DE+0x0C], AX      ;; 1 cycle
   \   000496 ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   000499                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_Write_36:
   \   000499 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   00049B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00049C A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00049E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00049F A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004A1 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   0004A4                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_51:
   \   0004A4 BA0E                  MOVW      [DE+0x0E], AX      ;; 1 cycle
   \   0004A6 13                    MOVW      AX, BC             ;; 1 cycle
   \   0004A7 BA10                  MOVW      [DE+0x10], AX      ;; 1 cycle
   \   0004A9 ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   0004AC                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_Write_37:
   \   0004AC A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   0004AE 12                    MOVW      BC, AX             ;; 1 cycle
   \   0004AF A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   0004B1 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004B2 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004B4 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   0004B7                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_52:
   \   0004B7 BA3E                  MOVW      [DE+0x3E], AX      ;; 1 cycle
   \   0004B9 13                    MOVW      AX, BC             ;; 1 cycle
   \   0004BA BA40                  MOVW      [DE+0x40], AX      ;; 1 cycle
   \   0004BC FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   0004BF                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_77:
   \   0004BF C3                    PUSH      BC                 ;; 1 cycle
   \   0004C0 C1                    PUSH      AX                 ;; 1 cycle
   \   0004C1 A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   0004C3 FD....                CALL      ST7579_SetFrameRate  ;; 3 cycles
   \   0004C6 ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   0004C9                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_38:
   \   0004C9 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   0004CB 12                    MOVW      BC, AX             ;; 1 cycle
   \   0004CC A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   0004CE 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004CF A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004D1 FD....                CALL      N:?Subroutine17    ;; 3 cycles
   \   0004D4                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_53:
   \   0004D4 BA38                  MOVW      [DE+0x38], AX      ;; 1 cycle
   \   0004D6 13                    MOVW      AX, BC             ;; 1 cycle
   \   0004D7 BA3A                  MOVW      [DE+0x3A], AX      ;; 1 cycle
   \   0004D9 FD....                CALL      N:?Subroutine15    ;; 3 cycles
   \   0004DC                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_74:
   \   0004DC C3                    PUSH      BC                 ;; 1 cycle
   \   0004DD C1                    PUSH      AX                 ;; 1 cycle
   \   0004DE A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   0004E0 FD....                CALL      ST7579_SetVO_Range  ;; 3 cycles
   \   0004E3 ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   0004E6                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_39:
   \   0004E6 881C                  MOV       A, [SP+0x1C]       ;; 1 cycle
   \   0004E8 73                    MOV       B, A               ;; 1 cycle
   \   0004E9 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004EB 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004EC AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0004ED 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004EE 63                    MOV       A, B               ;; 1 cycle
   \   0004EF 9C3C                  MOV       [HL+0x3C], A       ;; 1 cycle
   \   0004F1 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004F3 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004F4 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0004F5 16                    MOVW      HL, AX             ;; 1 cycle
   \   0004F6 8C3C                  MOV       A, [HL+0x3C]       ;; 1 cycle
   \   0004F8 73                    MOV       B, A               ;; 1 cycle
   \   0004F9 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0004FB FD....                CALL      ST7579_SetSystemBiasBooster  ;; 3 cycles
   \   0004FE ED....                BR        N:??ST7579_Write_3  ;; 3 cycles
   \   000501                       ; ------------------------------------- Block: 21 cycles
   \   000501                       ; ------------------------------------- Total: 1063 cycles
   \   000501                       REQUIRE ?CLRL78_V1_0_L00
    319          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000003 35                    XCHW      AX, DE             ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 10 cycles
   \   000005                       ; ------------------------------------- Total: 10 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000001                       ; ------------------------------------- Block: 1 cycles
   \   000001                       ; ------------------------------------- Total: 1 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
   \   000001                       REQUIRE ??Subroutine23_0
   \   000001                       ; // Fall through to label ??Subroutine23_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC3A                  MOVW      AX, [HL+0x3A]      ;; 1 cycle
   \   000003 12                    MOVW      BC, AX             ;; 1 cycle
   \   000004 AC38                  MOVW      AX, [HL+0x38]      ;; 1 cycle
   \   000006 D7                    RET                          ;; 6 cycles
   \   000007                       ; ------------------------------------- Block: 10 cycles
   \   000007                       ; ------------------------------------- Total: 10 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000001                       ; ------------------------------------- Block: 1 cycles
   \   000001                       ; ------------------------------------- Total: 1 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
   \   000001                       REQUIRE ??Subroutine24_0
   \   000001                       ; // Fall through to label ??Subroutine24_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC40                  MOVW      AX, [HL+0x40]      ;; 1 cycle
   \   000003 12                    MOVW      BC, AX             ;; 1 cycle
   \   000004 AC3E                  MOVW      AX, [HL+0x3E]      ;; 1 cycle
   \   000006 D7                    RET                          ;; 6 cycles
   \   000007                       ; ------------------------------------- Block: 10 cycles
   \   000007                       ; ------------------------------------- Total: 10 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 10 cycles
   \   000006                       ; ------------------------------------- Total: 10 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC06                  MOVW      AX, [HL+0x06]      ;; 1 cycle
   \   000005 05                    ADDW      AX, DE             ;; 1 cycle
   \   000006 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   000008 60                    MOV       A, X               ;; 1 cycle
   \   000009 73                    MOV       B, A               ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 14 cycles
   \   00000B                       ; ------------------------------------- Total: 14 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000005 60                    MOV       A, X               ;; 1 cycle
   \   000006 73                    MOV       B, A               ;; 1 cycle
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 12 cycles
   \   000008                       ; ------------------------------------- Total: 12 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
   \   000003 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000004 07                    ADDW      AX, HL             ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 89                    MOV       A, [DE]            ;; 1 cycle
   \   000009 D7                    RET                          ;; 6 cycles
   \   00000A                       ; ------------------------------------- Block: 15 cycles
   \   00000A                       ; ------------------------------------- Total: 15 cycles
   \   00000A                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000003                       ; ------------------------------------- Block: 2 cycles
   \   000003                       ; ------------------------------------- Total: 2 cycles
   \   000003                       REQUIRE ?CLRL78_V1_0_L00
   \   000003                       REQUIRE ?Subroutine20
   \   000003                       ; // Fall through to label ?Subroutine20

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 35                    XCHW      AX, DE             ;; 1 cycle
   \   000001 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 8 cycles
   \   000005                       ; ------------------------------------- Total: 8 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 5501                  MOV       D, #0x1            ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000008 BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 12 cycles
   \   00000B                       ; ------------------------------------- Total: 12 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC10                  MOVW      AX, [HL+0x10]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 AC0E                  MOVW      AX, [HL+0x0E]      ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 12 cycles
   \   000009                       ; ------------------------------------- Total: 12 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC0C                  MOVW      AX, [HL+0x0C]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 AC0A                  MOVW      AX, [HL+0x0A]      ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 12 cycles
   \   000009                       ; ------------------------------------- Total: 12 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 12 cycles
   \   000009                       ; ------------------------------------- Total: 12 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC08                  MOVW      AX, [HL+0x08]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 AC06                  MOVW      AX, [HL+0x06]      ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 12 cycles
   \   000009                       ; ------------------------------------- Total: 12 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000004 63                    MOV       A, B               ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 9 cycles
   \   000006                       ; ------------------------------------- Total: 9 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 17                    MOVW      AX, HL             ;; 1 cycle
   \   000001                       ; ------------------------------------- Block: 1 cycles
   \   000001                       ; ------------------------------------- Total: 1 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
   \   000001                       REQUIRE ??Subroutine27_0
   \   000001                       ; // Fall through to label ??Subroutine27_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000 33                    XCHW      AX, BC             ;; 1 cycle
   \   000001 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000004 13                    MOVW      AX, BC             ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 9 cycles
   \   000006                       ; ------------------------------------- Total: 9 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 8 cycles
   \   000005                       ; ------------------------------------- Total: 8 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
    320          
    321          /******************************************************************************
    322          * ID : 32.0
    323          * Outline : ST7579_Read
    324          * Include : ST7579_LCD.h
    325          * Function Name: ST7579_Read
    326          * Description : Read data from the glyph data storage using a Glyph Register
    327          *               value.
    328          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    329          *          : aRegister - specifies what to receive.
    330          *          : aValue - data received.
    331          * Return Value : 0=success, not 0= error
    332          * Calling Functions : GlyphRead
    333          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    334          T_glyphError ST7579_Read(T_glyphHandle aHandle, uint32_t aRegister, uint32_t *aValue)
   \                     ST7579_Read:
    335          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
    336              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
   \   000003 FD....                CALL      N:?Subroutine16    ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 6 cycles
    337              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    338          
    339              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
    340          
    341              switch (aRegister) {
   \                     ??CrossCallReturnLabel_37:
   \   000006 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000008 12                    MOVW      BC, AX             ;; 1 cycle
   \   000009 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00000B 36....                MOVW      HL, #LWRD(??ST7579_Read_0)  ;; 1 cycle
   \   00000E 41..                  MOV       ES, #BYTE3(??ST7579_Read_0)  ;; 1 cycle
   \   000010 CEFC..                MOV       CS, #BYTE3(ST7579_Read)  ;; 1 cycle
   \   000013 ED....                BR        N:?L_SSWITCH_L10   ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 9 cycles
    342                  case GLYPH_STATUS:
    343                      *aValue = GLYPH_STATUS_BUSY ;
   \                     ??ST7579_Read_1:
   \   000016 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000018 16                    MOVW      HL, AX             ;; 1 cycle
   \   000019 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   00001C BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00001D F6                    CLRW      AX                 ;; 1 cycle
   \   00001E BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    344                      if (p_gw->iLCDAPI->iStatusRegister == 0)
   \   000020 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000022 16                    MOVW      HL, AX             ;; 1 cycle
   \   000023 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000024 16                    MOVW      HL, AX             ;; 1 cycle
   \   000025 AC32                  MOVW      AX, [HL+0x32]      ;; 1 cycle
   \   000027 F7                    CLRW      BC                 ;; 1 cycle
   \   000028 43                    CMPW      AX, BC             ;; 1 cycle
   \   000029 61E8                  SKZ                          ;; 4 cycles
   \   00002B ED....                BR        N:??ST7579_SetLine_9  ;; 4 cycles
   \   00002E                       ; ------------------------------------- Block: 17 cycles
    345                      {
    346                          *aValue = GLYPH_STATUS_READY ;
   \   00002E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000030 16                    MOVW      HL, AX             ;; 1 cycle
   \   000031 F6                    CLRW      AX                 ;; 1 cycle
   \   000032 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000033 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    347                      }
    348                      error = GLYPH_ERROR_NONE ;
   \   000035 ED....                BR        N:??ST7579_SetLine_9  ;; 3 cycles
   \   000038                       ; ------------------------------------- Block: 8 cycles
    349                      break ;
    350                  case GLYPH_CHAR_X:
    351                      *aValue = p_gw->iLCDAPI->iCharX_Position ;
   \                     ??ST7579_Read_2:
   \   000038 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003A FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   00003D                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_24:
   \   00003D EF7B                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 3 cycles
    352                      error = GLYPH_ERROR_NONE ;
    353                      break ;
    354                  case GLYPH_CHAR_Y:
    355                      *aValue = p_gw->iLCDAPI->iCharY_Position ;
   \                     ??ST7579_Read_3:
   \   00003F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000041 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000044                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_21:
   \   000044 EF74                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000046                       ; ------------------------------------- Block: 3 cycles
    356                      error = GLYPH_ERROR_NONE ;
    357                      break ;
    358                  case GLYPH_FONT:
    359                      *aValue = p_gw->iLCDAPI->iCharFont ;
   \                     ??ST7579_Read_4:
   \   000046 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000048 16                    MOVW      HL, AX             ;; 1 cycle
   \   000049 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B AC14                  MOVW      AX, [HL+0x14]      ;; 1 cycle
   \   00004D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00004E AC12                  MOVW      AX, [HL+0x12]      ;; 1 cycle
   \   000050 EF68                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000052                       ; ------------------------------------- Block: 10 cycles
    360                      error = GLYPH_ERROR_NONE ;
    361                      break ;
    362                  case GLYPH_API_MAJOR_VERSION:
    363                      *aValue = p_gw->iLCDAPI->iFP_API_MAJOR_VERSION ;
   \                     ??ST7579_Read_5:
   \   000052 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000054 16                    MOVW      HL, AX             ;; 1 cycle
   \   000055 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000056 16                    MOVW      HL, AX             ;; 1 cycle
   \   000057 AC18                  MOVW      AX, [HL+0x18]      ;; 1 cycle
   \   000059 12                    MOVW      BC, AX             ;; 1 cycle
   \   00005A AC16                  MOVW      AX, [HL+0x16]      ;; 1 cycle
   \   00005C EF5C                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   00005E                       ; ------------------------------------- Block: 10 cycles
    364                      error = GLYPH_ERROR_NONE ;
    365                      break ;
    366                  case GLYPH_API_MINOR_VERSION:
    367                      *aValue = p_gw->iLCDAPI->iFP_API_MINOR_VERSION ;
   \                     ??ST7579_Read_6:
   \   00005E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000060 16                    MOVW      HL, AX             ;; 1 cycle
   \   000061 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000062 16                    MOVW      HL, AX             ;; 1 cycle
   \   000063 AC1C                  MOVW      AX, [HL+0x1C]      ;; 1 cycle
   \   000065 12                    MOVW      BC, AX             ;; 1 cycle
   \   000066 AC1A                  MOVW      AX, [HL+0x1A]      ;; 1 cycle
   \   000068 EF50                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 10 cycles
    368                      error = GLYPH_ERROR_NONE ;
    369                      break ;
    370                  case GLYPH_IMPLEMENTATION_ID:
    371                      *aValue = p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID ;
   \                     ??ST7579_Read_7:
   \   00006A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00006E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006F AC20                  MOVW      AX, [HL+0x20]      ;; 1 cycle
   \   000071 12                    MOVW      BC, AX             ;; 1 cycle
   \   000072 AC1E                  MOVW      AX, [HL+0x1E]      ;; 1 cycle
   \   000074 EF44                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000076                       ; ------------------------------------- Block: 10 cycles
    372                      error = GLYPH_ERROR_NONE ;
    373                      break ;
    374                  case GLYPH_IMPL_MAJOR_VERSION:
    375                      *aValue = p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION ;
   \                     ??ST7579_Read_8:
   \   000076 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000078 16                    MOVW      HL, AX             ;; 1 cycle
   \   000079 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00007A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00007B AC24                  MOVW      AX, [HL+0x24]      ;; 1 cycle
   \   00007D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00007E AC22                  MOVW      AX, [HL+0x22]      ;; 1 cycle
   \   000080 EF38                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000082                       ; ------------------------------------- Block: 10 cycles
    376                      error = GLYPH_ERROR_NONE ;
    377                      break ;
    378                  case GLYPH_IMPL_MINOR_VERSION:
    379                      *aValue = p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION ;
   \                     ??ST7579_Read_9:
   \   000082 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000084 16                    MOVW      HL, AX             ;; 1 cycle
   \   000085 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000086 16                    MOVW      HL, AX             ;; 1 cycle
   \   000087 AC28                  MOVW      AX, [HL+0x28]      ;; 1 cycle
   \   000089 12                    MOVW      BC, AX             ;; 1 cycle
   \   00008A AC26                  MOVW      AX, [HL+0x26]      ;; 1 cycle
   \   00008C EF2C                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   00008E                       ; ------------------------------------- Block: 10 cycles
    380                      error = GLYPH_ERROR_NONE ;
    381                      break ;
    382                  case GLYPH_CHAR_X2:
    383                      *aValue = p_gw->iLCDAPI->iCharX2_Position ;
   \                     ??ST7579_Read_10:
   \   00008E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000090 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000093                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_27:
   \   000093 EF25                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000095                       ; ------------------------------------- Block: 3 cycles
    384                      error = GLYPH_ERROR_NONE ;
    385                      break ;
    386                  case GLYPH_CHAR_Y2:
    387                      *aValue = p_gw->iLCDAPI->iCharY2_Position ;
   \                     ??ST7579_Read_11:
   \   000095 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000097 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00009A                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_30:
   \   00009A EF1E                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   00009C                       ; ------------------------------------- Block: 3 cycles
    388                      error = GLYPH_ERROR_NONE ;
    389                      break ;
    390                  case GLYPH_FRAME_RATE:
    391                      *aValue = (uint32_t)p_gw->iLCDAPI->iFrameRate ;
   \                     ??ST7579_Read_12:
   \   00009C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00009F FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   0000A2                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_78:
   \   0000A2 EF16                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   0000A4                       ; ------------------------------------- Block: 3 cycles
    392                      error = GLYPH_ERROR_NONE ;
    393                      break ;
    394                  case GLYPH_CONTRAST:
    395                      *aValue = (uint32_t)p_gw->iLCDAPI->iContrast ;
   \                     ??ST7579_Read_13:
   \   0000A4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000A6 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000A7 FD....                CALL      N:?Subroutine15    ;; 3 cycles
   \   0000AA                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_75:
   \   0000AA EF0E                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   0000AC                       ; ------------------------------------- Block: 3 cycles
    396                      error = GLYPH_ERROR_NONE ;
    397                      break ;
    398                  case GLYPH_CONTRAST_BOOST:
    399                      *aValue = (uint32_t)p_gw->iLCDAPI->iContrastBoost ;
   \                     ??ST7579_Read_14:
   \   0000AC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000AE 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000AF AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0000B0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000B1 8C3C                  MOV       A, [HL+0x3C]       ;; 1 cycle
   \   0000B3 70                    MOV       X, A               ;; 1 cycle
   \   0000B4 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000B6 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B7 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   0000B9 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000BA                       ; ------------------------------------- Block: 10 cycles
   \                     ??ST7579_SetLine_10:
   \   0000BA 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000BB A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000BD 37                    XCHW      AX, HL             ;; 1 cycle
   \   0000BE BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0000BF 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000C0 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    400                      error = GLYPH_ERROR_NONE ;
   \   0000C2                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_SetLine_9:
   \   0000C2 5500                  MOV       D, #0x0            ;; 1 cycle
    401                      break ;
   \   0000C4                       ; ------------------------------------- Block: 1 cycles
    402              }
    403          
    404              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
   \                     ??ST7579_Read_15:
   \   0000C4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000C6 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000C7 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0000C8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000C9 F6                    CLRW      AX                 ;; 1 cycle
   \   0000CA BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
    405              return error ;
   \   0000CC 65                    MOV       A, D               ;; 1 cycle
   \   0000CD 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000CF C4                    POP       DE                 ;; 1 cycle
   \   0000D0 ED....                BR        N:??Subroutine22_0  ;; 3 cycles
   \   0000D3                       ; ------------------------------------- Block: 12 cycles
   \   0000D3                       ; ------------------------------------- Total: 173 cycles
   \   0000D3                       REQUIRE ?CLRL78_V1_0_L00
    406          }
    407          
    408          /******************************************************************************
    409          * ID : 39.0
    410          * Outline : ST7579_SetSystemBiasBooster
    411          * Include : ST7579_LCD.h
    412          * Function Name: ST7579_SetSystemBiasBooster
    413          * Description : Set the LCD system bias.  Below is a sample Bias chart.
    414          *
    415          * VDD2=2.4V                             Bias
    416          *             1/4     1/5     1/6     1/7       1/8     1/9     1/10    1/11
    417          * Booster X3  3~4.5   3~5.2   3.3~6.3 3.5~6     X       X       X       X
    418          * Booster X4  3~4.5   3~5.7   3.3~7.4 3.5~8.55  3.5~8.1 4~8.1   X       X
    419          * Booster X5  3~4.5   3~5.7   3.3~7.4 3.5~8.8   3.5~9.1 4~9.1 4.2~9.6 4.6~9.6
    420          *
    421          * X: Do not select this setting.
    422          * 
    423          * The bias setting will have to be set manually and permanently in this
    424          * function
    425          *
    426          * This function also sets booster efficiency.  The setting of booster
    427          * efficiency is hard programmed here and must be manually changed.
    428          * Efficiency is set at level 2.  The efficiency levels are:
    429          * for booster efficiency level 1: 0x9D, 0x9E, 0x9F
    430          * for booster efficiency level 2: 0x99, 0x9A, 0x9B
    431          * for booster efficiency level 3: 0x95, 0x96, 0x97
    432          * for booster efficiency level 4: 0x91, 0x92, 0x93
    433          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    434          *          : cValue0To17 - booster set value from 0 to 17 is valid.
    435          * Return Value : none
    436          * Calling Functions : ST7579_Write
    437          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    438          void ST7579_SetSystemBiasBooster(T_glyphHandle aHandle, int8_t cValue0To17)
   \                     ST7579_SetSystemBiasBooster:
    439          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 2
    440              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    441              if (cValue0To17 <= 17) {
   \   000003 63                    MOV       A, B               ;; 1 cycle
   \   000004 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000006 2C92                  SUB       A, #0x92           ;; 1 cycle
   \   000008 61C8                  SKC                          ;; 4 cycles
   \   00000A ED....                BR        N:??ST7579_SetLine_11  ;; 4 cycles
   \   00000D                       ; ------------------------------------- Block: 10 cycles
    442                  /* Select bias and boost settings from value */
    443                  char cBias = 0 ;
    444                  char cBoost = 0 ;
    445                  switch (cValue0To17) {
   \   00000D 63                    MOV       A, B               ;; 1 cycle
   \   00000E 36....                MOVW      HL, #LWRD(??ST7579_SetSystemBiasBooster_0)  ;; 1 cycle
   \   000011 41..                  MOV       ES, #BYTE3(??ST7579_SetSystemBiasBooster_0)  ;; 1 cycle
   \   000013 CEFC..                MOV       CS, #BYTE3(ST7579_SetSystemBiasBooster)  ;; 1 cycle
   \   000016 ED....                BR        N:?C_SSWITCH_L10   ;; 3 cycles
   \   000019                       ; ------------------------------------- Block: 7 cycles
    446                      case 0:
    447                          /* Bias level 1/4 Boost Times 3. */
    448                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_1:
   \   000019 5217                  MOV       C, #0x17           ;; 1 cycle
    449                          cBoost = 0x99 ;
   \   00001B EF46                  BR        S:??ST7579_SetLine_12  ;; 3 cycles
   \   00001D                       ; ------------------------------------- Block: 4 cycles
    450                          break ;
    451                      case 3:
    452                          /* Bias level 1/5 Boost Times 3. */
    453                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_2:
   \   00001D 5216                  MOV       C, #0x16           ;; 1 cycle
    454                          cBoost = 0x99 ;
   \   00001F EF42                  BR        S:??ST7579_SetLine_12  ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 4 cycles
    455                          break ;
    456                      case 6:
    457                          /* Bias level 1/6 Boost Times 3. */
    458                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_3:
   \   000021 5215                  MOV       C, #0x15           ;; 1 cycle
    459                          cBoost = 0x99 ;
   \   000023 EF3E                  BR        S:??ST7579_SetLine_12  ;; 3 cycles
   \   000025                       ; ------------------------------------- Block: 4 cycles
    460                          break ;
    461                      case 9:
    462                          /* Bias level 1/7 Boost Times 3. */
    463                          cBias = 0x14 ;
    464                          cBoost = 0x99 ;
    465                          break ;
    466                      case 1:
    467                          /* Bias level 1/4 Boost Times 4. */
    468                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_4:
   \   000025 5217                  MOV       C, #0x17           ;; 1 cycle
    469                          cBoost = 0x9A ;
   \   000027 EF12                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   000029                       ; ------------------------------------- Block: 4 cycles
    470                          break ;
    471                      case 4:
    472                          /* Bias level 1/5 Boost Times 4. */
    473                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_5:
   \   000029 5216                  MOV       C, #0x16           ;; 1 cycle
    474                          cBoost = 0x9A ;
   \   00002B EF0E                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   00002D                       ; ------------------------------------- Block: 4 cycles
    475                          break ;
    476                      case 7:
    477                          /* Bias level 1/6 Boost Times 4. */
    478                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_6:
   \   00002D 5215                  MOV       C, #0x15           ;; 1 cycle
    479                          cBoost = 0x9A ;
   \   00002F EF0A                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   000031                       ; ------------------------------------- Block: 4 cycles
    480                          break ;
    481                      case 10:
    482                          /* Bias level 1/7 Boost Times 4. */
    483                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_7:
   \   000031 5214                  MOV       C, #0x14           ;; 1 cycle
    484                          cBoost = 0x9A ;
   \   000033 EF06                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   000035                       ; ------------------------------------- Block: 4 cycles
    485                          break ;
    486                      case 12:
    487                          /* Bias level 1/8 Boost Times 4. */
    488                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_8:
   \   000035 5213                  MOV       C, #0x13           ;; 1 cycle
    489                          cBoost = 0x9A ;
   \   000037 EF02                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   000039                       ; ------------------------------------- Block: 4 cycles
    490                          break ;
    491                      case 14:
    492                          /* Bias level 1/9 Boost Times 4. */
    493                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_9:
   \   000039 5212                  MOV       C, #0x12           ;; 1 cycle
    494                          cBoost = 0x9A ;
   \   00003B                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_13:
   \   00003B 539A                  MOV       B, #0x9A           ;; 1 cycle
    495                          break ;
   \   00003D EF26                  BR        S:??ST7579_SetLine_14  ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 4 cycles
    496                      case 2:
    497                          /* Bias level 1/4 Boost Times 5. */
    498                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_10:
   \   00003F 5217                  MOV       C, #0x17           ;; 1 cycle
    499                          cBoost = 0x9B ;
   \   000041 EF1A                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   000043                       ; ------------------------------------- Block: 4 cycles
    500                          break ;
    501                      case 5:
    502                          /* Bias level 1/5 Boost Times 5. */
    503                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_11:
   \   000043 5216                  MOV       C, #0x16           ;; 1 cycle
    504                          cBoost = 0x9B ;
   \   000045 EF16                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   000047                       ; ------------------------------------- Block: 4 cycles
    505                          break ;
    506                      case 8:
    507                          /* Bias level 1/6 Boost Times 5. */
    508                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_12:
   \   000047 5215                  MOV       C, #0x15           ;; 1 cycle
    509                          cBoost = 0x9B ;
   \   000049 EF12                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   00004B                       ; ------------------------------------- Block: 4 cycles
    510                          break ;
    511                      case 11:
    512                          /* Bias level 1/7 Boost Times 5. */
    513                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_13:
   \   00004B 5214                  MOV       C, #0x14           ;; 1 cycle
    514                          cBoost = 0x9B ;
   \   00004D EF0E                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   00004F                       ; ------------------------------------- Block: 4 cycles
    515                          break ;
    516                      case 13:
    517                          /* Bias level 1/8 Boost Times 5. */
    518                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_14:
   \   00004F 5213                  MOV       C, #0x13           ;; 1 cycle
    519                          cBoost = 0x9B ;
   \   000051 EF0A                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   000053                       ; ------------------------------------- Block: 4 cycles
    520                          break ;
    521                      case 15:
    522                          /* Bias level 1/9 Boost Times 5. */
    523                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_15:
   \   000053 5212                  MOV       C, #0x12           ;; 1 cycle
    524                          cBoost = 0x9B ;
   \   000055 EF06                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   000057                       ; ------------------------------------- Block: 4 cycles
    525                          break ;
    526                      case 16:
    527                          /* Bias level 1/10 Boost Times 5. */
    528                          cBias = 0x11 ;
   \                     ??ST7579_SetSystemBiasBooster_16:
   \   000057 5211                  MOV       C, #0x11           ;; 1 cycle
    529                          cBoost = 0x9B ;
   \   000059 EF02                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   00005B                       ; ------------------------------------- Block: 4 cycles
    530                          break ;
    531                      case 17:
    532                          /* Bias level 1/11 Boost Times 5. */
    533                          cBias = 0x10 ;
   \                     ??ST7579_SetSystemBiasBooster_17:
   \   00005B 5210                  MOV       C, #0x10           ;; 1 cycle
    534                          cBoost = 0x9B ;
   \   00005D                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_15:
   \   00005D 539B                  MOV       B, #0x9B           ;; 1 cycle
    535                          break ;
   \   00005F EF04                  BR        S:??ST7579_SetLine_14  ;; 3 cycles
   \   000061                       ; ------------------------------------- Block: 4 cycles
    536                      default:
    537                          /* Bias level 7 Boost Times 3. */
    538                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_18:
   \   000061 5214                  MOV       C, #0x14           ;; 1 cycle
    539                          cBoost = 0x99 ;
   \   000063                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_12:
   \   000063 5399                  MOV       B, #0x99           ;; 1 cycle
    540                          break ;
   \   000065                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_14:
   \   000065 5129                  MOV       A, #0x29           ;; 1 cycle
   \   000067 C1                    PUSH      AX                 ;; 1 cycle
   \   000068 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006B AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
    541                  }
   \   00006D FD....                CALL      N:??Subroutine28_0  ;; 3 cycles
   \   000070                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_96:
   \   000070 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000072 1002                  ADDW      SP, #0x2           ;; 1 cycle
    542          
    543                  /* Set Bias */
    544                  /* Use Function Set 1 H[1:0]=(0,1) */
    545                  /* Original Development hardcoded this as CommandSend(0x021) */
    546                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \   000074 61EA                  CALL      DE                 ;; 3 cycles
    547                  p_gw->iCommAPI->iCommandSend(cBias) ;
   \   000076 62                    MOV       A, C               ;; 1 cycle
   \   000077 16                    MOVW      HL, AX             ;; 1 cycle
   \   000078 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00007A FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   00007D                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_3:
   \   00007D C5                    PUSH      DE                 ;; 1 cycle
   \   00007E C6                    POP       HL                 ;; 1 cycle
   \   00007F FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000082                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_65:
   \   000082 61EA                  CALL      DE                 ;; 3 cycles
    548          
    549                  /* Set Booster */
    550                  /* Use Function Set 3 H[1:0]=(1,1) */
    551                  /* Original Development hardcoded this as CommandSend(0x023) */
    552                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
   \   000084 512B                  MOV       A, #0x2B           ;; 1 cycle
   \   000086 16                    MOVW      HL, AX             ;; 1 cycle
   \   000087 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000089 FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   00008C                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_4:
   \   00008C C5                    PUSH      DE                 ;; 1 cycle
   \   00008D C6                    POP       HL                 ;; 1 cycle
   \   00008E FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000091                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_66:
   \   000091 61EA                  CALL      DE                 ;; 3 cycles
    553                  /* Set default efficiency and multiplyer on voltage */
    554                  p_gw->iCommAPI->iCommandSend(cBoost) ;
   \   000093 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000095 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000098                       ; ------------------------------------- Block: 7 cycles
    555              }
   \                     ??CrossCallReturnLabel_83:
   \   000098 61EA                  CALL      DE                 ;; 3 cycles
   \   00009A                       ; ------------------------------------- Block: 3 cycles
    556          }
   \                     ??ST7579_SetLine_11:
   \   00009A 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   00009C C4                    POP       DE                 ;; 1 cycle
   \   00009D C2                    POP       BC                 ;; 1 cycle
   \   00009E D7                    RET                          ;; 6 cycles
   \   00009F                       ; ------------------------------------- Block: 9 cycles
   \   00009F                       ; ------------------------------------- Total: 146 cycles
   \   00009F                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003                       ; ------------------------------------- Block: 2 cycles
   \   000003                       ; ------------------------------------- Total: 2 cycles
   \   000003                       REQUIRE ?CLRL78_V1_0_L00
   \   000003                       REQUIRE ??Subroutine25_0
   \   000003                       ; // Fall through to label ??Subroutine25_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003                       ; ------------------------------------- Block: 2 cycles
   \   000003                       ; ------------------------------------- Total: 2 cycles
   \   000003                       REQUIRE ?CLRL78_V1_0_L00
   \   000003                       REQUIRE ??Subroutine26_0
   \   000003                       ; // Fall through to label ??Subroutine26_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 35                    XCHW      AX, DE             ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 10 cycles
   \   000006                       ; ------------------------------------- Total: 10 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003 ED....                BR        N:?Subroutine20    ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 5 cycles
   \   000006                       ; ------------------------------------- Total: 5 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003                       ; ------------------------------------- Block: 2 cycles
   \   000003                       ; ------------------------------------- Total: 2 cycles
   \   000003                       REQUIRE ?CLRL78_V1_0_L00
   \   000003                       REQUIRE ??Subroutine29_0
   \   000003                       ; // Fall through to label ??Subroutine29_0
    557          
    558          /******************************************************************************
    559          * ID : 40.0
    560          * Outline : ST7579_SetVO_Range
    561          * Include : ST7579_LCD.h
    562          * Function Name: ST7579_SetVO_Range
    563          * Description : Set the LCD VO Range.  VO is used as a Contrast Control for the LCD
    564          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    565          *          : nValue0to254 - contrast set value from 0 to 254 is valid.
    566          * Return Value : none
    567          * Calling Functions : ST7579_Write
    568          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    569          void ST7579_SetVO_Range(T_glyphHandle aHandle, int32_t nValue0to254)
   \                     ST7579_SetVO_Range:
    570          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 4
   \   000003 C1                    PUSH      AX                 ;; 1 cycle
   \   000004 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000006 12                    MOVW      BC, AX             ;; 1 cycle
   \   000007 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
    571              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    572              if (nValue0to254 <= 254) {
   \   000009 360000                MOVW      HL, #0x0           ;; 1 cycle
   \   00000C C7                    PUSH      HL                 ;; 1 cycle
   \   00000D 56FF                  MOV       L, #0xFF           ;; 1 cycle
   \   00000F C7                    PUSH      HL                 ;; 1 cycle
   \   000010 FD....                CALL      N:?SL_CMP_L03      ;; 3 cycles
   \   000013 DE6F                  BNC       ??ST7579_SetLine_16  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 18 cycles
    573                  char cByteToSend = 0 ;
    574                  char cLowHigh = 0 ;
   \   000015 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000017 618D                  XCH       A, D               ;; 1 cycle
   \   000019 9800                  MOV       [SP], A            ;; 1 cycle
   \   00001B 65                    MOV       A, D               ;; 1 cycle
    575          
    576                  if (nValue0to254 > 127) {
   \   00001C 5600                  MOV       L, #0x0            ;; 1 cycle
   \   00001E C7                    PUSH      HL                 ;; 1 cycle
   \   00001F 5680                  MOV       L, #0x80           ;; 1 cycle
   \   000021 C7                    PUSH      HL                 ;; 1 cycle
   \   000022 FD....                CALL      N:?SL_CMP_L03      ;; 3 cycles
   \   000025 60                    MOV       A, X               ;; 1 cycle
   \   000026 DC0A                  BC        ??ST7579_SetLine_17  ;; 4 cycles
   \   000028                       ; ------------------------------------- Block: 16 cycles
    577                      cByteToSend = ((nValue0to254 - 127) | 0x80) & 0x00FF ;
   \   000028 0C81                  ADD       A, #0x81           ;; 1 cycle
   \   00002A 6C80                  OR        A, #0x80           ;; 1 cycle
   \   00002C 73                    MOV       B, A               ;; 1 cycle
    578                      cLowHigh = 1 ;
   \   00002D E1                    ONEB      A                  ;; 1 cycle
   \   00002E 9800                  MOV       [SP], A            ;; 1 cycle
   \   000030 EF03                  BR        S:??ST7579_SetLine_18  ;; 3 cycles
   \   000032                       ; ------------------------------------- Block: 8 cycles
    579                  }
    580                  else {
    581                      cByteToSend = (nValue0to254 | 0x80) & 0x00FF ;
   \                     ??ST7579_SetLine_17:
   \   000032 6C80                  OR        A, #0x80           ;; 1 cycle
   \   000034 73                    MOV       B, A               ;; 1 cycle
   \   000035                       ; ------------------------------------- Block: 2 cycles
   \                     ??ST7579_SetLine_18:
   \   000035 5128                  MOV       A, #0x28           ;; 1 cycle
   \   000037 16                    MOVW      HL, AX             ;; 1 cycle
   \   000038 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
    582                  }
   \   00003A FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   00003D                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_5:
   \   00003D C5                    PUSH      DE                 ;; 1 cycle
   \   00003E C6                    POP       HL                 ;; 1 cycle
   \   00003F FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000042                       ; ------------------------------------- Block: 5 cycles
    583          
    584                  /* Use Function Set 0 H[1:0]=(0,0) */
    585                  /* Original Development hardcoded this as CommandSend(0x020) */
    586                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \                     ??CrossCallReturnLabel_67:
   \   000042 61EA                  CALL      DE                 ;; 3 cycles
    587                  /* Set VO range to Low if 0x04 or High if 0x05 */
    588                  /* here low would be PRS=0 and high would be PRS=1 */
    589                  if (cLowHigh == 0) p_gw->iCommAPI->iCommandSend(0x04) ;
   \   000044 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000046 16                    MOVW      HL, AX             ;; 1 cycle
   \   000047 31830F                BT        [HL].0, ??ST7579_SetLine_19  ;; 5 cycles
   \   00004A                       ; ------------------------------------- Block: 10 cycles
   \   00004A 5104                  MOV       A, #0x4            ;; 1 cycle
   \   00004C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004F FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   000052                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_6:
   \   000052 C5                    PUSH      DE                 ;; 1 cycle
   \   000053 C6                    POP       HL                 ;; 1 cycle
   \   000054 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000057                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_68:
   \   000057 61EA                  CALL      DE                 ;; 3 cycles
   \   000059                       ; ------------------------------------- Block: 3 cycles
    590                  if (cLowHigh == 1) p_gw->iCommAPI->iCommandSend(0x05) ;
   \                     ??ST7579_SetLine_19:
   \   000059 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   00005B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005C 31850F                BF        [HL].0, ??ST7579_SetLine_20  ;; 5 cycles
   \   00005F                       ; ------------------------------------- Block: 7 cycles
   \   00005F 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000061 16                    MOVW      HL, AX             ;; 1 cycle
   \   000062 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000064 FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   000067                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_7:
   \   000067 C5                    PUSH      DE                 ;; 1 cycle
   \   000068 C6                    POP       HL                 ;; 1 cycle
   \   000069 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   00006C                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_69:
   \   00006C 61EA                  CALL      DE                 ;; 3 cycles
   \   00006E                       ; ------------------------------------- Block: 3 cycles
    591              
    592                  /* Use Function Set 1 H[1:0]=(0,1) */
    593                  /* Original Development hardcoded this as CommandSend(0x021) */
    594                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \                     ??ST7579_SetLine_20:
   \   00006E 5129                  MOV       A, #0x29           ;; 1 cycle
   \   000070 16                    MOVW      HL, AX             ;; 1 cycle
   \   000071 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000073 FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   000076                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_8:
   \   000076 C5                    PUSH      DE                 ;; 1 cycle
   \   000077 C6                    POP       HL                 ;; 1 cycle
   \   000078 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   00007B                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_70:
   \   00007B 61EA                  CALL      DE                 ;; 3 cycles
    595                  /* Set PRS=0 to 2.94 V or PRS=1 2.95V to 6.75V */
    596                  /* the value here can be 0 to 127 or 0x00 to 0x7F */
    597                  p_gw->iCommAPI->iCommandSend(cByteToSend) ;
   \   00007D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00007F FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000082                       ; ------------------------------------- Block: 7 cycles
    598              }
   \                     ??CrossCallReturnLabel_84:
   \   000082 61EA                  CALL      DE                 ;; 3 cycles
   \   000084                       ; ------------------------------------- Block: 3 cycles
    599          }
   \                     ??ST7579_SetLine_16:
   \   000084 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000086 ED....                BR        N:??Subroutine21_0  ;; 3 cycles
   \   000089                       ; ------------------------------------- Block: 4 cycles
   \   000089                       ; ------------------------------------- Total: 125 cycles
   \   000089                       REQUIRE ?CLRL78_V1_0_L00
    600          
    601          /******************************************************************************
    602          * ID : 41.0
    603          * Outline : ST7579_Config
    604          * Include : ST7579_LCD.h
    605          * Function Name: ST7579_Config
    606          * Description : Used to configure the LCD with preset settings.
    607          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    608          * Return Value : none
    609          * Calling Functions : ST7579_Open
    610          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    611          void ST7579_Config(T_glyphHandle aHandle)
   \                     ST7579_Config:
    612          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    613              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    614              int i = 0 ;
    615          
    616              /* Inialize Display */
    617              ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
   \   000003 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 8C3C                  MOV       A, [HL+0x3C]       ;; 1 cycle
   \   000007 73                    MOV       B, A               ;; 1 cycle
   \   000008 15                    MOVW      AX, DE             ;; 1 cycle
   \   000009 FD....                CALL      ST7579_SetSystemBiasBooster  ;; 3 cycles
    618              ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
   \   00000C A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00000D FD....                CALL      N:??Subroutine23_0  ;; 3 cycles
   \   000010                       ; ------------------------------------- Block: 15 cycles
   \                     ??CrossCallReturnLabel_73:
   \   000010 C3                    PUSH      BC                 ;; 1 cycle
   \   000011 C1                    PUSH      AX                 ;; 1 cycle
   \   000012 15                    MOVW      AX, DE             ;; 1 cycle
   \   000013 FD....                CALL      ST7579_SetVO_Range  ;; 3 cycles
    619              for (i=0;i<1000;i++){}
    620              ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
   \   000016 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000017 FD....                CALL      N:??Subroutine24_0  ;; 3 cycles
   \   00001A                       ; ------------------------------------- Block: 10 cycles
   \                     ??CrossCallReturnLabel_76:
   \   00001A C3                    PUSH      BC                 ;; 1 cycle
   \   00001B C1                    PUSH      AX                 ;; 1 cycle
   \   00001C 15                    MOVW      AX, DE             ;; 1 cycle
   \   00001D FD....                CALL      ST7579_SetFrameRate  ;; 3 cycles
    621              
    622              ST7579_SetPage(aHandle, 0) ;
   \   000020 F3                    CLRB      B                  ;; 1 cycle
   \   000021 15                    MOVW      AX, DE             ;; 1 cycle
   \   000022 FD....                CALL      ST7579_SetPage     ;; 3 cycles
    623              ST7579_SetChar(aHandle, 0) ;
   \   000025 F3                    CLRB      B                  ;; 1 cycle
   \   000026 15                    MOVW      AX, DE             ;; 1 cycle
   \   000027 FD....                CALL      ST7579_SetChar     ;; 3 cycles
    624          }
   \   00002A C4                    POP       DE                 ;; 1 cycle
   \   00002B C2                    POP       BC                 ;; 1 cycle
   \   00002C D7                    RET                          ;; 6 cycles
   \   00002D                       ; ------------------------------------- Block: 24 cycles
   \   00002D                       ; ------------------------------------- Total: 49 cycles
   \   00002D                       REQUIRE ?CLRL78_V1_0_L00
    625          
    626          /******************************************************************************
    627          * ID : 42.0
    628          * Outline : ST7579_Send16bitsCommand
    629          * Include : ST7579_LCD.h
    630          * Function Name: ST7579_Send16bitsCommand
    631          * Description : Send 2 commands from the same integer.  For example:
    632          *                       if you wanted to send 0x28 and then 0xD0 just send
    633          *                       0x28D0 using this command.
    634          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    635          *          : nCommand - 2 commands to send.
    636          * Return Value : none
    637          * Calling Functions : none
    638          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 61EA                  CALL      DE                 ;; 3 cycles
   \   000002                       ; ------------------------------------- Block: 3 cycles
   \   000002                       ; ------------------------------------- Total: 3 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
   \   000002                       REQUIRE ??Subroutine21_0
   \   000002                       ; // Fall through to label ??Subroutine21_0

   \                                 In  segment CODE, align 1, keep-with-next
    639          void ST7579_Send16bitsCommand(T_glyphHandle aHandle, int32_t nCommand)
   \                     ST7579_Send16bitsCommand:
    640          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    641              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    642              int8_t cCommandOne = (int8_t)((nCommand >> 8) & 0x00FF) ;
    643              int8_t cCommandTwo = (int8_t)(nCommand & 0x00FF) ;
    644          
    645              p_gw->iCommAPI->iCommandSend(cCommandOne) ;
   \   000003 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000005 318F                  SARW      AX, 0x8            ;; 1 cycle
   \   000007 60                    MOV       A, X               ;; 1 cycle
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   00000B FD....                CALL      N:?Subroutine18    ;; 3 cycles
   \   00000E                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_54:
   \   00000E 61DA                  CALL      BC                 ;; 3 cycles
    646              p_gw->iCommAPI->iCommandSend(cCommandTwo) ;
   \   000010 8808                  MOV       A, [SP+0x08]       ;; 1 cycle
   \   000012 73                    MOV       B, A               ;; 1 cycle
   \   000013 AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   000015 FD....                CALL      N:??Subroutine25_0  ;; 3 cycles
   \   000018                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_82:
   \   000018 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   00001B                       ; ------------------------------------- Block: 3 cycles
   \   00001B                       ; ------------------------------------- Total: 23 cycles
   \   00001B                       REQUIRE ?CLRL78_V1_0_L00
    647          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 12                    MOVW      BC, AX             ;; 1 cycle
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 33                    XCHW      AX, BC             ;; 1 cycle
   \   000005 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 11 cycles
   \   000009                       ; ------------------------------------- Total: 11 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    648          
    649          /******************************************************************************
    650          * ID : 43.0
    651          * Outline : ST7579_Send8bitsData
    652          * Include : ST7579_LCD.h
    653          * Function Name: ST7579_Send8bitsData
    654          * Description : Send 8 bits of data to the LCD RAM at the current location.
    655          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    656          *          : cData - 8 bits of data to send.
    657          * Return Value : none
    658          * Calling Functions : none
    659          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    660          void ST7579_Send8bitsData(T_glyphHandle aHandle, int8_t cData)
   \                     ST7579_Send8bitsData:
    661          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    662              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    663              p_gw->iCommAPI->iDataSend(cData) ;
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000007 FD....                CALL      N:??Subroutine26_0  ;; 3 cycles
   \   00000A                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_81:
   \   00000A 61EA                  CALL      DE                 ;; 3 cycles
    664          }
   \   00000C C4                    POP       DE                 ;; 1 cycle
   \   00000D D7                    RET                          ;; 6 cycles
   \   00000E                       ; ------------------------------------- Block: 10 cycles
   \   00000E                       ; ------------------------------------- Total: 18 cycles
   \   00000E                       REQUIRE ?CLRL78_V1_0_L00
    665          
    666          /******************************************************************************
    667          * ID : 44.0
    668          * Outline : ST7579_SetFrameRate
    669          * Include : ST7579_LCD.h
    670          * Function Name: ST7579_SetFrameRate
    671          * Description : Set the Frame Rate to one of:
    672          * 55Hz
    673          * 65Hz
    674          * 68Hz
    675          * 70Hz
    676          * 73Hz
    677          * 76Hz
    678          * 80Hz
    679          * 137Hz
    680          * Currently set at 73 hertz.  Must be manually set and recompliled
    681          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    682          *          : nRate55To137 - Frame rate to set from 55 to 137 see above
    683          * Return Value : none
    684          * Calling Functions : ST7579_Config
    685          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    686          void ST7579_SetFrameRate(T_glyphHandle aHandle, int32_t nRate55To137)
   \                     ST7579_SetFrameRate:
    687          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    688              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    689              /* Use Function Set 3 H[1:0]=(1,1) */
    690              /* Original Development hardcoded this as CommandSend(0x023) */
    691              p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
   \   000003 A5                    INCW      DE                 ;; 1 cycle
   \   000004 A5                    INCW      DE                 ;; 1 cycle
   \   000005 512B                  MOV       A, #0x2B           ;; 1 cycle
   \   000007 16                    MOVW      HL, AX             ;; 1 cycle
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 FD....                CALL      N:?Subroutine18    ;; 3 cycles
   \   00000C                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_55:
   \   00000C 61DA                  CALL      BC                 ;; 3 cycles
    692          
    693              switch(nRate55To137) {
   \   00000E A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000010 12                    MOVW      BC, AX             ;; 1 cycle
   \   000011 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000013 FD....                CALL      N:??Subroutine27_0  ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_90:
   \   000016 DF56                  BNZ       ??ST7579_SetLine_21  ;; 4 cycles
   \   000018                       ; ------------------------------------- Block: 4 cycles
   \   000018 443700                CMPW      AX, #0x37          ;; 1 cycle
   \   00001B DD20                  BZ        ??ST7579_SetLine_22  ;; 4 cycles
   \   00001D                       ; ------------------------------------- Block: 5 cycles
   \   00001D 444100                CMPW      AX, #0x41          ;; 1 cycle
   \   000020 DD22                  BZ        ??ST7579_SetLine_23  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 5 cycles
   \   000022 444400                CMPW      AX, #0x44          ;; 1 cycle
   \   000025 DD24                  BZ        ??ST7579_SetLine_24  ;; 4 cycles
   \   000027                       ; ------------------------------------- Block: 5 cycles
   \   000027 444600                CMPW      AX, #0x46          ;; 1 cycle
   \   00002A DD26                  BZ        ??ST7579_SetLine_25  ;; 4 cycles
   \   00002C                       ; ------------------------------------- Block: 5 cycles
   \   00002C 444C00                CMPW      AX, #0x4C          ;; 1 cycle
   \   00002F DD28                  BZ        ??ST7579_SetLine_26  ;; 4 cycles
   \   000031                       ; ------------------------------------- Block: 5 cycles
   \   000031 445000                CMPW      AX, #0x50          ;; 1 cycle
   \   000034 DD2A                  BZ        ??ST7579_SetLine_27  ;; 4 cycles
   \   000036                       ; ------------------------------------- Block: 5 cycles
   \   000036 448900                CMPW      AX, #0x89          ;; 1 cycle
   \   000039 DD2C                  BZ        ??ST7579_SetLine_28  ;; 4 cycles
   \   00003B                       ; ------------------------------------- Block: 5 cycles
   \   00003B EF31                  BR        S:??ST7579_SetLine_21  ;; 3 cycles
   \   00003D                       ; ------------------------------------- Block: 3 cycles
    694                  case 55:
    695                      /* Set frame rate of 55 */
    696                      p_gw->iCommAPI->iCommandSend(0x08) ;
   \                     ??ST7579_SetLine_22:
   \   00003D FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000040                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_98:
   \   000040 5108                  MOV       A, #0x8            ;; 1 cycle
   \   000042 EF2F                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   000044                       ; ------------------------------------- Block: 4 cycles
    697                      break ;
    698                  case 65:
    699                      /* Set frame rate of 65 */
    700                      p_gw->iCommAPI->iCommandSend(0x09) ;
   \                     ??ST7579_SetLine_23:
   \   000044 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000047                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_99:
   \   000047 5109                  MOV       A, #0x9            ;; 1 cycle
   \   000049 EF28                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   00004B                       ; ------------------------------------- Block: 4 cycles
    701                      break ;
    702                  case 68:
    703                      /* Set frame rate of 68 */
    704                      p_gw->iCommAPI->iCommandSend(0x0A) ;
   \                     ??ST7579_SetLine_24:
   \   00004B FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   00004E                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_100:
   \   00004E 510A                  MOV       A, #0xA            ;; 1 cycle
   \   000050 EF21                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   000052                       ; ------------------------------------- Block: 4 cycles
    705                      break ;
    706                  case 70:
    707                      /* Set frame rate of 70 */
    708                      p_gw->iCommAPI->iCommandSend(0x0B) ;
   \                     ??ST7579_SetLine_25:
   \   000052 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000055                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_101:
   \   000055 510B                  MOV       A, #0xB            ;; 1 cycle
   \   000057 EF1A                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   000059                       ; ------------------------------------- Block: 4 cycles
    709                      break ;
    710                  case 73:
    711                      /* Set frame rate of 73(Default) */
    712                      p_gw->iCommAPI->iCommandSend(0x0C) ;
    713                      break ;
    714                  case 76:
    715                      /* Set frame rate of 76 */
    716                      p_gw->iCommAPI->iCommandSend(0x0D) ;
   \                     ??ST7579_SetLine_26:
   \   000059 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   00005C                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_102:
   \   00005C 510D                  MOV       A, #0xD            ;; 1 cycle
   \   00005E EF13                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   000060                       ; ------------------------------------- Block: 4 cycles
    717                      break ;
    718                  case 80:
    719                      /* Set frame rate of 80 */
    720                      p_gw->iCommAPI->iCommandSend(0x0E) ;
   \                     ??ST7579_SetLine_27:
   \   000060 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000063                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_103:
   \   000063 510E                  MOV       A, #0xE            ;; 1 cycle
   \   000065 EF0C                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   000067                       ; ------------------------------------- Block: 4 cycles
    721                      break ;
    722                  case 137:
    723                      /* Set frame rate of 137 */
    724                      p_gw->iCommAPI->iCommandSend(0x0F) ;
   \                     ??ST7579_SetLine_28:
   \   000067 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_104:
   \   00006A 510F                  MOV       A, #0xF            ;; 1 cycle
   \   00006C EF05                  BR        S:??ST7579_SetLine_29  ;; 3 cycles
   \   00006E                       ; ------------------------------------- Block: 4 cycles
    725                      break ;
    726                  default:
    727                      /* Set frame rate of 73(Default) */
    728                      p_gw->iCommAPI->iCommandSend(0x0C) ;
   \                     ??ST7579_SetLine_21:
   \   00006E FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000071                       ; ------------------------------------- Block: 3 cycles
    729              }
   \                     ??CrossCallReturnLabel_105:
   \   000071 510C                  MOV       A, #0xC            ;; 1 cycle
   \   000073                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_29:
   \   000073 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   000076                       ; ------------------------------------- Block: 3 cycles
   \   000076                       ; ------------------------------------- Total: 118 cycles
   \   000076                       REQUIRE ?CLRL78_V1_0_L00
    730          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000001                       ; ------------------------------------- Block: 1 cycles
   \   000001                       ; ------------------------------------- Total: 1 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
   \   000001                       REQUIRE ??Subroutine28_0
   \   000001                       ; // Fall through to label ??Subroutine28_0
    731          
    732          /******************************************************************************
    733          * ID : 45.0
    734          * Outline : ST7579_SetPage
    735          * Include : ST7579_LCD.h
    736          * Function Name: ST7579_SetPage
    737          * Description : Set the current page to the current set of 8 rows where:
    738          *                   page 0 is row 0 to 7
    739          *                   page 1 is row 8 to 15
    740          *                   page 2 is row 16 to 23
    741          *                   page 3 is row 24 to 31
    742          *                   page 4 is row 32 to 39
    743          *                   page 5 is row 40 to 47
    744          *                   page 6 is row 48 to 55
    745          *                   page 7 is row 56 to 63
    746          *                   page 8 is row 64, 65, 66
    747          *                   page 9 is row 67
    748          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    749          *          : cValue0To9 - page number to set valid from 0 to 9.
    750          * Return Value : none
    751          * Calling Functions : ST7579_Write
    752          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    753          void ST7579_SetPage(T_glyphHandle aHandle, int8_t cValue0To9)
   \                     ST7579_SetPage:
    754          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 2
    755              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    756              char cValueToSend = cValue0To9 | 0x40 ;
    757          
    758              if (cValue0To9 <= 9) {
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000005 2C8A                  SUB       A, #0x8A           ;; 1 cycle
   \   000007 DE1C                  BNC       ??ST7579_SetLine_30  ;; 4 cycles
   \   000009                       ; ------------------------------------- Block: 9 cycles
    759                  cValueToSend &= 0x4F ;
    760              
    761                  /* Use Function Set 0 H[1:0]=(0,0) */
    762                  /* Original Development hardcoded this as CommandSend(0x020) */
    763                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \   000009 5128                  MOV       A, #0x28           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000E FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   000011                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_9:
   \   000011 C5                    PUSH      DE                 ;; 1 cycle
   \   000012 C6                    POP       HL                 ;; 1 cycle
   \   000013 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_71:
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    764                  /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
    765                  p_gw->iCommAPI->iCommandSend(cValueToSend) ;
   \   000018 63                    MOV       A, B               ;; 1 cycle
   \   000019 5C4F                  AND       A, #0x4F           ;; 1 cycle
   \   00001B 6C40                  OR        A, #0x40           ;; 1 cycle
   \   00001D 73                    MOV       B, A               ;; 1 cycle
   \   00001E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000020 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 11 cycles
    766              }
   \                     ??CrossCallReturnLabel_85:
   \   000023 61EA                  CALL      DE                 ;; 3 cycles
   \   000025                       ; ------------------------------------- Block: 3 cycles
    767          }
   \                     ??ST7579_SetLine_30:
   \   000025 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 D7                    RET                          ;; 6 cycles
   \   000029                       ; ------------------------------------- Block: 8 cycles
   \   000029                       ; ------------------------------------- Total: 42 cycles
   \   000029                       REQUIRE ?CLRL78_V1_0_L00
    768          
    769          /******************************************************************************
    770          * ID : 46.0
    771          * Outline : ST7579_SetChar
    772          * Include : ST7579_LCD.h
    773          * Function Name: ST7579_SetChar
    774          * Description : Set the current column of the current page that the next batch of
    775          * data will write to.
    776          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    777          *          : cValue0To101 - column number to set valid from 0 to 101.
    778          * Return Value : none
    779          * Calling Functions : ST7579_Write
    780          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    781          void ST7579_SetChar(T_glyphHandle aHandle, int8_t cValue0To101)
   \                     ST7579_SetChar:
    782          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 2
    783              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    784              char cValueToSend = cValue0To101 | 0x80 ;
    785              
    786              if (cValue0To101 <= 101) {
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000005 2CE6                  SUB       A, #0xE6           ;; 1 cycle
   \   000007 DE1A                  BNC       ??ST7579_SetLine_31  ;; 4 cycles
   \   000009                       ; ------------------------------------- Block: 9 cycles
    787                  cValueToSend &= 0xFF ;
    788              
    789                  /* Use Function Set 0 H[1:0]=(0,0) */
    790                  /* Original Development hardcoded this as CommandSend(0x020) */
    791                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \   000009 5128                  MOV       A, #0x28           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000E FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   000011                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_10:
   \   000011 C5                    PUSH      DE                 ;; 1 cycle
   \   000012 C6                    POP       HL                 ;; 1 cycle
   \   000013 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_72:
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    792                  /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
    793                  p_gw->iCommAPI->iCommandSend(cValueToSend) ;
   \   000018 63                    MOV       A, B               ;; 1 cycle
   \   000019 6C80                  OR        A, #0x80           ;; 1 cycle
   \   00001B 73                    MOV       B, A               ;; 1 cycle
   \   00001C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001E FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 10 cycles
    794              }
   \                     ??CrossCallReturnLabel_86:
   \   000021 61EA                  CALL      DE                 ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 3 cycles
    795          }
   \                     ??ST7579_SetLine_31:
   \   000023 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000025 C4                    POP       DE                 ;; 1 cycle
   \   000026 D7                    RET                          ;; 6 cycles
   \   000027                       ; ------------------------------------- Block: 8 cycles
   \   000027                       ; ------------------------------------- Total: 41 cycles
   \   000027                       REQUIRE ?CLRL78_V1_0_L00
    796          
    797          /******************************************************************************
    798          * ID : 47.0
    799          * Outline : ST7579_SetLine
    800          * Include : ST7579_LCD.h
    801          * Function Name: ST7579_SetLine
    802          * Description : Set the current line to become the top line of the LCD Display.
    803          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    804          *          : cValue0To66 - line number to set valid from 0 to 66.
    805          * Return Value : none
    806          * Calling Functions : ST7579_Write
    807          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    808          void ST7579_SetLine(T_glyphHandle aHandle, int8_t cValue0To66)
   \                     ST7579_SetLine:
    809          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 C3                    PUSH      BC                 ;; 1 cycle
   \   000004                       ; Auto size: 4
    810              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    811              if (cValue0To66 <= 66) {
   \   000004 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000006 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000008 2CC3                  SUB       A, #0xC3           ;; 1 cycle
   \   00000A DE5E                  BNC       ??ST7579_SetLine_32  ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 11 cycles
    812                  int8_t cData[10] = "" ;
    813                  int8_t cValueToSendLow = 0 ;
    814                  int8_t cValueToSendHigh = 0 ;
    815              
    816                  cData[0] = 0 ;
    817                  cData[1] = 0 ;
    818                  cData[2] = 0 ;
    819                  cData[3] = 0 ;
    820                  cData[4] = 0 ;
    821                  cData[5] = 0 ;
    822                  cData[6] = 0 ;
    823              
    824                  /*  binary 1111 1111 becomes 0000 0001 */
    825                  cData[0] = 0x01 & cValue0To66 ;
    826                  /*  binary 1111 1111 becomes 0000 0010 */
    827                  cData[1] = 0x02 & cValue0To66 ;
    828                  /*  binary 1111 1111 becomes 0000 0100 */
    829                  cData[2] = 0x04 & cValue0To66 ;
    830                  /*  binary 1111 1111 becomes 0000 1000 */
    831                  cData[3] = 0x08 & cValue0To66 ;
    832                  /* binary 1111 1111 becomes 0001 0000 */
    833                  cData[4] = 0x010 & cValue0To66 ;
    834                  /* binary 1111 1111 becomes 0010 0000 */
    835                  cData[5] = 0x020 & cValue0To66 ;
    836                  /* binary 1111 1111 becomes 0100 0000 */
    837                  cData[6] = 0x040 & cValue0To66 ;
    838              
    839                  /* binary 10 becomes binary 1 */
    840                  cData[1] = cData[1] >> 1 ;
    841                  /* binary 100 becomes binary 1 */
    842                  cData[2] = cData[2] >> 2 ;
    843                  /* binary 1000 becomes binary 1 */
    844                  cData[3] = cData[3] >> 3 ;
    845                  /* binary 1 0000 becomes binary 1 */
    846                  cData[4] = cData[4] >> 4 ;
    847                  /* binary 10 0000 becomes binary 1 */
    848                  cData[5] = cData[5] >> 5 ;
    849                  /* binary 100 0000 becomes binary 1 */
    850                  cData[6] = cData[6] >> 6 ;
    851              
    852                  cValueToSendLow = cData[6] | 0x04 ;
    853                  cValueToSendHigh = cData[0] | cData[1] | cData[2] | cData[3] | cData[4] | cData[5] | 0x040 ;
    854          
    855                  /* Use Function Set 1 H[1:0]=(0,1) */
    856                  /* Original Development hardcoded this as CommandSend(0x021) */
    857                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \   00000C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000F AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000011 FD....                CALL      N:??Subroutine28_0  ;; 3 cycles
   \   000014                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_97:
   \   000014 5129                  MOV       A, #0x29           ;; 1 cycle
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    858          
    859                  /* Set Ram Start Line of 0 to 66 using a high and low value and two command sends */
    860                  p_gw->iCommAPI->iCommandSend(cValueToSendHigh) ;
   \   000018 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C F1                    CLRB      A                  ;; 1 cycle
   \   00001D 71D4                  MOV1      CY, [HL].5         ;; 1 cycle
   \   00001F 6131                  SUBC      A, A               ;; 1 cycle
   \   000021 73                    MOV       B, A               ;; 1 cycle
   \   000022 F1                    CLRB      A                  ;; 1 cycle
   \   000023 71C4                  MOV1      CY, [HL].4         ;; 1 cycle
   \   000025 6131                  SUBC      A, A               ;; 1 cycle
   \   000027 72                    MOV       C, A               ;; 1 cycle
   \   000028 F1                    CLRB      A                  ;; 1 cycle
   \   000029 71B4                  MOV1      CY, [HL].3         ;; 1 cycle
   \   00002B 6131                  SUBC      A, A               ;; 1 cycle
   \   00002D 75                    MOV       D, A               ;; 1 cycle
   \   00002E F1                    CLRB      A                  ;; 1 cycle
   \   00002F 71A4                  MOV1      CY, [HL].2         ;; 1 cycle
   \   000031 6131                  SUBC      A, A               ;; 1 cycle
   \   000033 70                    MOV       X, A               ;; 1 cycle
   \   000034 16                    MOVW      HL, AX             ;; 1 cycle
   \   000035 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000037 A1                    INCW      AX                 ;; 1 cycle
   \   000038 37                    XCHW      AX, HL             ;; 1 cycle
   \   000039 F1                    CLRB      A                  ;; 1 cycle
   \   00003A 7194                  MOV1      CY, [HL].1         ;; 1 cycle
   \   00003C 6131                  SUBC      A, A               ;; 1 cycle
   \   00003E 74                    MOV       E, A               ;; 1 cycle
   \   00003F 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000041 616C                  OR        A, E               ;; 1 cycle
   \   000043 6168                  OR        A, X               ;; 1 cycle
   \   000045 616D                  OR        A, D               ;; 1 cycle
   \   000047 616A                  OR        A, C               ;; 1 cycle
   \   000049 616B                  OR        A, B               ;; 1 cycle
   \   00004B 5C01                  AND       A, #0x1            ;; 1 cycle
   \   00004D 6C40                  OR        A, #0x40           ;; 1 cycle
   \   00004F 73                    MOV       B, A               ;; 1 cycle
   \   000050 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000052 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000055                       ; ------------------------------------- Block: 43 cycles
   \                     ??CrossCallReturnLabel_87:
   \   000055 61EA                  CALL      DE                 ;; 3 cycles
    861                  p_gw->iCommAPI->iCommandSend(cValueToSendLow) ;
   \   000057 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00005A A7                    INCW      HL                 ;; 1 cycle
   \   00005B F1                    CLRB      A                  ;; 1 cycle
   \   00005C 71E4                  MOV1      CY, [HL].6         ;; 1 cycle
   \   00005E 61DC                  ROLC      A, 0x1             ;; 1 cycle
   \   000060 6C04                  OR        A, #0x4            ;; 1 cycle
   \   000062 73                    MOV       B, A               ;; 1 cycle
   \   000063 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000065 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000068                       ; ------------------------------------- Block: 14 cycles
    862              }
   \                     ??CrossCallReturnLabel_88:
   \   000068 61EA                  CALL      DE                 ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 3 cycles
    863          }
   \                     ??ST7579_SetLine_32:
   \   00006A 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00006C C4                    POP       DE                 ;; 1 cycle
   \   00006D C2                    POP       BC                 ;; 1 cycle
   \   00006E D7                    RET                          ;; 6 cycles
   \   00006F                       ; ------------------------------------- Block: 9 cycles
   \   00006F                       ; ------------------------------------- Total: 86 cycles
   \   00006F                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_Write_0:
   \   000000 01000000              DD        1
   \   000004 1500                  DW        21
   \   000006 ....                  DW        ??ST7579_Write_4
   \   000008 ....                  DW        ??ST7579_Write_2
   \   00000A ....                  DW        ??ST7579_Write_5
   \   00000C ....                  DW        ??ST7579_Write_6
   \   00000E ....                  DW        ??ST7579_Write_26
   \   000010 ....                  DW        ??ST7579_Write_8
   \   000012 ....                  DW        ??ST7579_Write_29
   \   000014 ....                  DW        ??ST7579_Write_32
   \   000016 ....                  DW        ??ST7579_Write_4
   \   000018 ....                  DW        ??ST7579_Write_4
   \   00001A ....                  DW        ??ST7579_Write_4
   \   00001C ....                  DW        ??ST7579_Write_4
   \   00001E ....                  DW        ??ST7579_Write_4
   \   000020 ....                  DW        ??ST7579_Write_35
   \   000022 ....                  DW        ??ST7579_Write_36
   \   000024 ....                  DW        ??ST7579_Write_4
   \   000026 ....                  DW        ??ST7579_Write_4
   \   000028 ....                  DW        ??ST7579_Write_4
   \   00002A ....                  DW        ??ST7579_Write_4
   \   00002C ....                  DW        ??ST7579_Write_37
   \   00002E ....                  DW        ??ST7579_Write_38
   \   000030 ....                  DW        ??ST7579_Write_39

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_Write_1:
   \   000000 01000000              DD        1
   \   000004 0800                  DW        8
   \   000006 ....                  DW        ??ST7579_Write_3
   \   000008 ....                  DW        ??ST7579_Write_9
   \   00000A ....                  DW        ??ST7579_Write_13
   \   00000C ....                  DW        ??ST7579_Write_15
   \   00000E ....                  DW        ??ST7579_Write_3
   \   000010 ....                  DW        ??ST7579_Write_3
   \   000012 ....                  DW        ??ST7579_Write_16
   \   000014 ....                  DW        ??ST7579_Write_20
   \   000016 ....                  DW        ??ST7579_Write_23

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_Read_0:
   \   000000 00000000              DD        0
   \   000004 1600                  DW        22
   \   000006 ....                  DW        ??ST7579_Read_15
   \   000008 ....                  DW        ??ST7579_Read_1
   \   00000A ....                  DW        ??ST7579_Read_2
   \   00000C ....                  DW        ??ST7579_Read_3
   \   00000E ....                  DW        ??ST7579_Read_4
   \   000010 ....                  DW        ??ST7579_Read_15
   \   000012 ....                  DW        ??ST7579_Read_15
   \   000014 ....                  DW        ??ST7579_Read_15
   \   000016 ....                  DW        ??ST7579_Read_15
   \   000018 ....                  DW        ??ST7579_Read_5
   \   00001A ....                  DW        ??ST7579_Read_6
   \   00001C ....                  DW        ??ST7579_Read_7
   \   00001E ....                  DW        ??ST7579_Read_8
   \   000020 ....                  DW        ??ST7579_Read_9
   \   000022 ....                  DW        ??ST7579_Read_10
   \   000024 ....                  DW        ??ST7579_Read_11
   \   000026 ....                  DW        ??ST7579_Read_15
   \   000028 ....                  DW        ??ST7579_Read_15
   \   00002A ....                  DW        ??ST7579_Read_15
   \   00002C ....                  DW        ??ST7579_Read_15
   \   00002E ....                  DW        ??ST7579_Read_12
   \   000030 ....                  DW        ??ST7579_Read_13
   \   000032 ....                  DW        ??ST7579_Read_14

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_SetSystemBiasBooster_0:
   \   000000 0000                  DW        0
   \   000002 1200                  DW        18
   \   000004 ....                  DW        ??ST7579_SetSystemBiasBooster_18
   \   000006 ....                  DW        ??ST7579_SetSystemBiasBooster_1
   \   000008 ....                  DW        ??ST7579_SetSystemBiasBooster_4
   \   00000A ....                  DW        ??ST7579_SetSystemBiasBooster_10
   \   00000C ....                  DW        ??ST7579_SetSystemBiasBooster_2
   \   00000E ....                  DW        ??ST7579_SetSystemBiasBooster_5
   \   000010 ....                  DW        ??ST7579_SetSystemBiasBooster_11
   \   000012 ....                  DW        ??ST7579_SetSystemBiasBooster_3
   \   000014 ....                  DW        ??ST7579_SetSystemBiasBooster_6
   \   000016 ....                  DW        ??ST7579_SetSystemBiasBooster_12
   \   000018 ....                  DW        ??ST7579_SetSystemBiasBooster_18
   \   00001A ....                  DW        ??ST7579_SetSystemBiasBooster_7
   \   00001C ....                  DW        ??ST7579_SetSystemBiasBooster_13
   \   00001E ....                  DW        ??ST7579_SetSystemBiasBooster_8
   \   000020 ....                  DW        ??ST7579_SetSystemBiasBooster_14
   \   000022 ....                  DW        ??ST7579_SetSystemBiasBooster_9
   \   000024 ....                  DW        ??ST7579_SetSystemBiasBooster_15
   \   000026 ....                  DW        ??ST7579_SetSystemBiasBooster_16
   \   000028 ....                  DW        ??ST7579_SetSystemBiasBooster_17
    864          
    865          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   ST7579_Close
      8   ST7579_Config
        4   -> ST7579_SetChar
        8   -> ST7579_SetFrameRate
        4   -> ST7579_SetPage
        4   -> ST7579_SetSystemBiasBooster
        8   -> ST7579_SetVO_Range
      8   ST7579_Open
        4   -> ST7579_Config
     10   ST7579_Read
      8   ST7579_Send16bitsCommand
        4   -- Indirect call
      2   ST7579_Send8bitsData
        2   -- Indirect call
      4   ST7579_SetChar
        4   -- Indirect call
      8   ST7579_SetFrameRate
        4   -- Indirect call
      8   ST7579_SetLine
        8   -- Indirect call
      4   ST7579_SetPage
        4   -- Indirect call
      8   ST7579_SetSystemBiasBooster
        6   -- Indirect call
     16   ST7579_SetVO_Range
        8   -- Indirect call
     32   ST7579_Write
       20   -- Indirect call
       24   -> ST7579_Send16bitsCommand
       20   -> ST7579_SetChar
       24   -> ST7579_SetFrameRate
       20   -> ST7579_SetLine
       20   -> ST7579_SetPage
       20   -> ST7579_SetSystemBiasBooster
       24   -> ST7579_SetVO_Range


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      52  ??ST7579_Read_0
      42  ??ST7579_SetSystemBiasBooster_0
      50  ??ST7579_Write_0
      24  ??ST7579_Write_1
       2  ??Subroutine21_0
       5  ??Subroutine22_0
       7  ??Subroutine23_0
       7  ??Subroutine24_0
       3  ??Subroutine25_0
       6  ??Subroutine26_0
       6  ??Subroutine27_0
       3  ??Subroutine28_0
       5  ??Subroutine29_0
       2  ?Subroutine0
       3  ?Subroutine1
       9  ?Subroutine10
       9  ?Subroutine11
       9  ?Subroutine12
       6  ?Subroutine13
       1  ?Subroutine14
       1  ?Subroutine15
      11  ?Subroutine16
       5  ?Subroutine17
       9  ?Subroutine18
       1  ?Subroutine19
       6  ?Subroutine2
       5  ?Subroutine20
       3  ?Subroutine3
       1  ?Subroutine4
      10  ?Subroutine5
       6  ?Subroutine6
       8  ?Subroutine7
      11  ?Subroutine8
       9  ?Subroutine9
       2  ST7579_Close
      45  ST7579_Config
     120  ST7579_Open
     211  ST7579_Read
      27  ST7579_Send16bitsCommand
      14  ST7579_Send8bitsData
      39  ST7579_SetChar
     118  ST7579_SetFrameRate
     111  ST7579_SetLine
      41  ST7579_SetPage
     159  ST7579_SetSystemBiasBooster
     137  ST7579_SetVO_Range
    1281  ST7579_Write

 
 2 474 bytes in segment CODE
   168 bytes in segment SWITCH
 
 2 474 bytes of CODE  memory
   168 bytes of CONST memory

Errors: none
Warnings: none
