###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             23/Mar/2014  17:08:45 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\uCOS-III\Source\os_tick.c  #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\uCOS-III\Source\os_tick.c  #
#                    --core rl78_2 --code_model near --data_model near        #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\ --dlib_config            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --no_clustering --debug -lC                              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\ -I                      #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\ -I C:\Users\Suddenlink\Dropbox\git #
#                    _files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\E #
#                    valBoards\Renesas\YRDKRL78G14\IAR\Application\Source\    #
#                    -I C:\Users\Suddenlink\Dropbox\git_files\embedded_design #
#                    \Proj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDK #
#                    RL78G14\IAR\Application\..\uCOS-III\ -I                  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\ -I                          #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\applilet3_src\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\Drivers\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\glyph\ -I              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\RL78\IAR\ -I  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-LIB\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uCOS-III\Ports\Renes #
#                    as\RL78\IAR\ -I C:\Users\Suddenlink\Dropbox\git_files\em #
#                    bedded_design\Proj2_uCOS-III-LCD-G14\Software\EvalBoards #
#                    \Renesas\YRDKRL78G14\IAR\Application\..\..\..\..\..\uCOS #
#                    -III\Source\ --relaxed_fp                                #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\os_tick.lst              #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\os_tick.r87               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\uCOS-III\Source\os_tick.c
      1          /*
      2          ***********************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2011; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                   TICK MANAGEMENT
     10          *
     11          * File    : OS_TICK.C
     12          * By      : JJL
     13          * Version : V3.02.00
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #include <os.h>
     34          
     35          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     36          const  CPU_CHAR  *os_tick__c = "$Id: $";
     37          #endif
     38          
     39          /*
     40          ************************************************************************************************************************
     41          *                                                  LOCAL PROTOTYPES
     42          ************************************************************************************************************************
     43          */
     44          
     45          
     46          /*
     47          ************************************************************************************************************************
     48          *                                                      TICK TASK
     49          *
     50          * Description: This task is internal to uC/OS-III and is triggered by the tick interrupt.
     51          *
     52          * Arguments  : p_arg     is an argument passed to the task when the task is created (unused).
     53          *
     54          * Returns    : none
     55          *
     56          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
     57          ************************************************************************************************************************
     58          */
     59          

   \                                 In  segment CODE, align 1, keep-with-next
     60          void  OS_TickTask (void *p_arg)
   \                     OS_TickTask:
     61          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 6
   \   000002 2006                  SUBW      SP, #0x6           ;; 1 cycle
     62              OS_ERR  err;
     63              CPU_TS  ts;
     64          
     65          
     66              p_arg = p_arg;                                          /* Prevent compiler warning                               */
   \   000004                       ; ------------------------------------- Block: 3 cycles
     67          
     68              while (DEF_ON) {
     69                  (void)OSTaskSemPend((OS_TICK  )0,
     70                                      (OS_OPT   )OS_OPT_PEND_BLOCKING,
     71                                      (CPU_TS  *)&ts,
     72                                      (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
   \                     ??OS_TickTask_0:
   \   000004 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000006 C1                    PUSH      AX                 ;; 1 cycle
   \   000007 A1                    INCW      AX                 ;; 1 cycle
   \   000008 A1                    INCW      AX                 ;; 1 cycle
   \   000009 C1                    PUSH      AX                 ;; 1 cycle
   \   00000A F6                    CLRW      AX                 ;; 1 cycle
   \   00000B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000C F7                    CLRW      BC                 ;; 1 cycle
   \   00000D FD....                CALL      OSTaskSemPend      ;; 3 cycles
     73                  if (err == OS_ERR_NONE) {
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 F7                    CLRW      BC                 ;; 1 cycle
   \   000013 43                    CMPW      AX, BC             ;; 1 cycle
   \   000014 DFEE                  BNZ       ??OS_TickTask_0    ;; 4 cycles
   \   000016                       ; ------------------------------------- Block: 18 cycles
     74                      if (OSRunning == OS_STATE_OS_RUNNING) {
   \   000016 40......              CMP       N:OSRunning, #0x1  ;; 1 cycle
   \   00001A DFE8                  BNZ       ??OS_TickTask_0    ;; 4 cycles
   \   00001C                       ; ------------------------------------- Block: 5 cycles
     75                          OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
   \   00001C FD....                CALL      OS_TickListUpdate  ;; 3 cycles
   \   00001F EFE3                  BR        S:??OS_TickTask_0  ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 6 cycles
   \   000021                       ; ------------------------------------- Total: 32 cycles
   \   000021                       REQUIRE ?CLRL78_V1_0_L00
     76                      }
     77                  }
     78              }
     79          }
     80          
     81          /*$PAGE*/
     82          /*
     83          ************************************************************************************************************************
     84          *                                                 INITIALIZE TICK TASK
     85          *
     86          * Description: This function is called by OSInit() to create the tick task.
     87          *
     88          * Arguments  : p_err   is a pointer to a variable that will hold the value of an error code:
     89          *
     90          *                          OS_ERR_TICK_STK_INVALID   if the pointer to the tick task stack is a NULL pointer
     91          *                          OS_ERR_TICK_STK_SIZE      indicates that the specified stack size
     92          *                          OS_ERR_PRIO_INVALID       if the priority you specified in the configuration is invalid
     93          *                                                      (There could be only one task at the Idle Task priority)
     94          *                                                      (Maybe the priority you specified is higher than OS_CFG_PRIO_MAX-1
     95          *                          OS_ERR_??                 other error code returned by OSTaskCreate()
     96          *
     97          * Returns    : none
     98          *
     99          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    100          ************************************************************************************************************************
    101          */
    102          

   \                                 In  segment CODE, align 1, keep-with-next
    103          void  OS_TickTaskInit (OS_ERR  *p_err)
   \                     OS_TickTaskInit:
    104          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    105          #ifdef OS_SAFETY_CRITICAL
    106              if (p_err == (OS_ERR *)0) {
    107                  OS_SAFETY_CRITICAL_EXCEPTION();
    108                  return;
    109              }
    110          #endif
    111          
    112              OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
   \   000003 36....                MOVW      HL, #OSTickCtr     ;; 1 cycle
   \   000006 F6                    CLRW      AX                 ;; 1 cycle
   \   000007 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000008 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    113          
    114              OSTickTaskTimeMax = (CPU_TS)0u;
   \   00000A 36....                MOVW      HL, #OSTickTaskTimeMax  ;; 1 cycle
   \   00000D BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00000E BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    115          
    116          
    117              OS_TickListInit();                                      /* Initialize the tick list data structures               */
   \   000010 FD....                CALL      OS_TickListInit    ;; 3 cycles
    118          
    119                                                                      /* ---------------- CREATE THE TICK TASK ---------------- */
    120              if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
   \   000013 8F....                MOV       A, N:OSCfg_TickTaskPrio  ;; 1 cycle
   \   000016 4C07                  CMP       A, #0x7            ;; 1 cycle
   \   000018 DC06                  BC        ??OS_TickListUpdate_0  ;; 4 cycles
   \   00001A                       ; ------------------------------------- Block: 19 cycles
    121                  *p_err = OS_ERR_PRIO_INVALID;
   \   00001A 307362                MOVW      AX, #0x6273        ;; 1 cycle
   \   00001D B9                    MOVW      [DE], AX           ;; 1 cycle
    122                  return;
   \   00001E EF29                  BR        S:??OS_TickListUpdate_1  ;; 3 cycles
   \   000020                       ; ------------------------------------- Block: 5 cycles
    123              }
    124          
    125              OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
    126                           (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
    127                           (OS_TASK_PTR )OS_TickTask,
    128                           (void       *)0,
    129                           (OS_PRIO     )OSCfg_TickTaskPrio,
    130                           (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
    131                           (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
    132                           (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
    133                           (OS_MSG_QTY  )0u,
    134                           (OS_TICK     )0u,
    135                           (void       *)0,
    136                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    137                           (OS_ERR     *)p_err);
   \                     ??OS_TickListUpdate_0:
   \   000020 C5                    PUSH      DE                 ;; 1 cycle
   \   000021 300300                MOVW      AX, #0x3           ;; 1 cycle
   \   000024 C1                    PUSH      AX                 ;; 1 cycle
   \   000025 F6                    CLRW      AX                 ;; 1 cycle
   \   000026 C1                    PUSH      AX                 ;; 1 cycle
   \   000027 C1                    PUSH      AX                 ;; 1 cycle
   \   000028 C1                    PUSH      AX                 ;; 1 cycle
   \   000029 C1                    PUSH      AX                 ;; 1 cycle
   \   00002A AF....                MOVW      AX, N:OSCfg_TickTaskStkSize  ;; 1 cycle
   \   00002D C1                    PUSH      AX                 ;; 1 cycle
   \   00002E AF....                MOVW      AX, N:OSCfg_TickTaskStkLimit  ;; 1 cycle
   \   000031 C1                    PUSH      AX                 ;; 1 cycle
   \   000032 AF....                MOVW      AX, N:OSCfg_TickTaskStkBasePtr  ;; 1 cycle
   \   000035 C1                    PUSH      AX                 ;; 1 cycle
   \   000036 8F....                MOV       A, N:OSCfg_TickTaskPrio  ;; 1 cycle
   \   000039 08                    XCH       A, X               ;; 1 cycle
   \   00003A C1                    PUSH      AX                 ;; 1 cycle
   \   00003B F6                    CLRW      AX                 ;; 1 cycle
   \   00003C C1                    PUSH      AX                 ;; 1 cycle
   \   00003D 34....                MOVW      DE, #OS_TickTask   ;; 1 cycle
   \   000040 32....                MOVW      BC, #`?<Constant "uC/OS-III Tick Task">`  ;; 1 cycle
   \   000043 30....                MOVW      AX, #OSTickTaskTCB  ;; 1 cycle
   \   000046 FD....                CALL      OSTaskCreate       ;; 3 cycles
    138          }
   \   000049                       ; ------------------------------------- Block: 25 cycles
   \                     ??OS_TickListUpdate_1:
   \   000049 C4                    POP       DE                 ;; 1 cycle
   \   00004A C2                    POP       BC                 ;; 1 cycle
   \   00004B D7                    RET                          ;; 6 cycles
   \   00004C                       ; ------------------------------------- Block: 8 cycles
   \   00004C                       ; ------------------------------------- Total: 57 cycles
   \   00004C                       REQUIRE ?CLRL78_V1_0_L00
    139          
    140          /*$PAGE*/
    141          /*
    142          ************************************************************************************************************************
    143          *                                               INITIALIZE THE TICK LIST
    144          *
    145          * Description: This function initializes the tick handling data structures of uC/OS-III.
    146          *
    147          * Arguments  : none
    148          *
    149          * Returns    : None
    150          *
    151          * Note(s)    : This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    152          ************************************************************************************************************************
    153          */
    154          

   \                                 In  segment CODE, align 1, keep-with-next
    155          void  OS_TickListInit (void)
   \                     OS_TickListInit:
    156          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
    157              OS_TICK_SPOKE_IX   i;
    158              OS_TICK_SPOKE     *p_spoke;
    159          
    160          
    161          
    162              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 16                    MOVW      HL, AX             ;; 1 cycle
   \   000004 EF12                  BR        S:??OS_TickListUpdate_2  ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 7 cycles
    163                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
   \                     ??OS_TickListInit_0:
   \   000006 17                    MOVW      AX, HL             ;; 1 cycle
   \   000007 320600                MOVW      BC, #0x6           ;; 1 cycle
   \   00000A CEFB01                MULHU                        ;; 2 cycles
   \   00000D 04....                ADDW      AX, #OSCfg_TickWheel  ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
    164                  p_spoke->FirstPtr      = (OS_TCB        *)0;
   \   000011 F6                    CLRW      AX                 ;; 1 cycle
   \   000012 B9                    MOVW      [DE], AX           ;; 1 cycle
    165                  p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
   \   000013 BA02                  MOVW      [DE+0x02], AX      ;; 1 cycle
    166                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \   000015 BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
    167              }
   \   000017 A7                    INCW      HL                 ;; 1 cycle
   \   000018                       ; ------------------------------------- Block: 11 cycles
   \                     ??OS_TickListUpdate_2:
   \   000018 AF....                MOVW      AX, N:OSCfg_TickWheelSize  ;; 1 cycle
   \   00001B 47                    CMPW      AX, HL             ;; 1 cycle
   \   00001C 61C3E7                BH        ??OS_TickListInit_0  ;; 4 cycles
   \   00001F                       ; ------------------------------------- Block: 6 cycles
    168          }
   \   00001F C4                    POP       DE                 ;; 1 cycle
   \   000020 C2                    POP       BC                 ;; 1 cycle
   \   000021 D7                    RET                          ;; 6 cycles
   \   000022                       ; ------------------------------------- Block: 8 cycles
   \   000022                       ; ------------------------------------- Total: 32 cycles
   \   000022                       REQUIRE ?CLRL78_V1_0_L00
    169          
    170          /*$PAGE*/
    171          /*
    172          ************************************************************************************************************************
    173          *                                                ADD TASK TO TICK LIST
    174          *
    175          * Description: This function is called to place a task in a list of task waiting for either time to expire or waiting to
    176          *              timeout on a pend call.
    177          *
    178          * Arguments  : p_tcb          is a pointer to the OS_TCB of the task to add to the tick list
    179          *              -----
    180          *
    181          *              time           represents either the 'match' value of OSTickCtr or a relative time from the current
    182          *                             value of OSTickCtr as specified by the 'opt' argument..
    183          *
    184          *                             relative when 'opt' is set to OS_OPT_TIME_DLY
    185          *                             relative when 'opt' is set to OS_OPT_TIME_TIMEOUT
    186          *                             match    when 'opt' is set to OS_OPT_TIME_MATCH
    187          *                             periodic when 'opt' is set to OS_OPT_TIME_PERIODIC
    188          *
    189          *              opt            is an option specifying how to calculate time.  The valid values are:
    190          *              ---
    191          *                                 OS_OPT_TIME_DLY
    192          *                                 OS_OPT_TIME_TIMEOUT
    193          *                                 OS_OPT_TIME_PERIODIC
    194          *                                 OS_OPT_TIME_MATCH
    195          *
    196          *              p_err          is a pointer to a variable that will contain an error code returned by this function.
    197          *              -----
    198          *                                 OS_ERR_NONE           the call was successful and the time delay was scheduled.
    199          *                                 OS_ERR_TIME_ZERO_DLY  if delay is zero or already occurred.
    200          *
    201          * Returns    : None
    202          *
    203          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    204          *
    205          *              2) This function is assumed to be called with interrupts disabled.
    206          ************************************************************************************************************************
    207          */
    208          

   \                                 In  segment CODE, align 1, keep-with-next
    209          void  OS_TickListInsert (OS_TCB   *p_tcb,
   \                     OS_TickListInsert:
    210                                   OS_TICK   time,
    211                                   OS_OPT    opt,
    212                                   OS_ERR   *p_err)
    213          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 C5                    PUSH      DE                 ;; 1 cycle
   \   000003                       ; Auto size: 16
   \   000003 200A                  SUBW      SP, #0xA           ;; 1 cycle
    214              OS_TICK            tick_delta;
    215              OS_TICK            tick_next;
    216              OS_TICK_SPOKE     *p_spoke;
    217              OS_TCB            *p_tcb0;
    218              OS_TCB            *p_tcb1;
    219              OS_TICK_SPOKE_IX   spoke;
    220          
    221          
    222          
    223              if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
   \   000005 13                    MOVW      AX, BC             ;; 1 cycle
   \   000006 440400                CMPW      AX, #0x4           ;; 1 cycle
   \   000009 A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   00000B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00000C A814                  MOVW      AX, [SP+0x14]      ;; 1 cycle
   \   00000E 61E8                  SKZ                          ;; 4 cycles
   \   000010 ED....                BR        N:??OS_TickListUpdate_3  ;; 4 cycles
   \   000013                       ; ------------------------------------- Block: 13 cycles
    224                  tick_delta = time - OSTickCtr - 1u;
   \   000013 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   000016 61D8                  SKNC
   \   000018 B3                    DECW      BC                 ;; 5 cycles
   \   000019 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   00001C                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_7:
   \   00001C 61D8                  SKNC
   \   00001E B3                    DECW      BC                 ;; 5 cycles
   \   00001F B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000021 13                    MOVW      AX, BC             ;; 1 cycle
   \   000022 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
    225                  if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
   \   000024 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000026 33                    XCHW      AX, BC             ;; 1 cycle
   \   000027 44FFFF                CMPW      AX, #0xFFFF        ;; 1 cycle
   \   00002A 13                    MOVW      AX, BC             ;; 1 cycle
   \   00002B DF02                  BNZ       ??OS_TickListUpdate_4  ;; 4 cycles
   \   00002D                       ; ------------------------------------- Block: 16 cycles
   \   00002D E7                    ONEW      BC                 ;; 1 cycle
   \   00002E 43                    CMPW      AX, BC             ;; 1 cycle
   \   00002F                       ; ------------------------------------- Block: 2 cycles
   \                     ??OS_TickListUpdate_4:
   \   00002F 61C8                  SKC                          ;; 4 cycles
   \   000031 ED....                BR        N:??OS_TickListUpdate_5  ;; 4 cycles
   \   000034                       ; ------------------------------------- Block: 4 cycles
    226                      p_tcb->TickCtrMatch = (OS_TICK        )0u;
    227                      p_tcb->TickRemain   = (OS_TICK        )0u;
    228                      p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    229                     *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
    230                      return;
    231                  }
    232                  p_tcb->TickCtrMatch = time;
   \   000034 A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   000036 12                    MOVW      BC, AX             ;; 1 cycle
   \   000037 A814                  MOVW      AX, [SP+0x14]      ;; 1 cycle
   \   000039 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003A A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00003C 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003D BC30                  MOVW      [HL+0x30], AX      ;; 1 cycle
   \   00003F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000040 BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
    233                  p_tcb->TickRemain   = tick_delta + 1u;
   \   000042 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000044 12                    MOVW      BC, AX             ;; 1 cycle
   \   000045 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000047 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   00004A 61D8                  SKNC
   \   00004C A3                    INCW      BC                 ;; 5 cycles
   \   00004D                       ; ------------------------------------- Block: 18 cycles
   \                     ??OS_TickListInsert_0:
   \   00004D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004E A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000050 37                    XCHW      AX, HL             ;; 1 cycle
   \   000051 BC34                  MOVW      [HL+0x34], AX      ;; 1 cycle
   \   000053 13                    MOVW      AX, BC             ;; 1 cycle
   \   000054 BC36                  MOVW      [HL+0x36], AX      ;; 1 cycle
   \   000056                       ; ------------------------------------- Block: 6 cycles
    234          
    235              } else if (time > (OS_TICK)0u) {
    236                  if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
    237                      tick_next  = p_tcb->TickCtrPrev + time;
    238                      tick_delta = tick_next - OSTickCtr - 1u;
    239                      if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
    240                          p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
    241                      } else {
    242                          p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
    243                      }
    244                      p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
    245                      p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
    246          
    247                  } else {                                                 /* Task time is relative to current.                 */
    248                      p_tcb->TickCtrMatch = OSTickCtr + time;
    249                      p_tcb->TickRemain   = time;
    250                  }
    251          
    252              } else {                                                     /* Zero time delay; ...                              */
    253                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
    254                  p_tcb->TickRemain   = (OS_TICK        )0u;
    255                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    256                 *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
    257                  return;
    258              }
    259          
    260          
    261              spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
    262              p_spoke = &OSCfg_TickWheel[spoke];
   \                     ??OS_TickListInsert_1:
   \   000056 EB....                MOVW      DE, N:OSCfg_TickWheelSize  ;; 1 cycle
   \   000059 F6                    CLRW      AX                 ;; 1 cycle
   \   00005A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005B C7                    PUSH      HL                 ;; 1 cycle
   \   00005C C5                    PUSH      DE                 ;; 1 cycle
   \   00005D A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   00005F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000060 AC32                  MOVW      AX, [HL+0x32]      ;; 1 cycle
   \   000062 12                    MOVW      BC, AX             ;; 1 cycle
   \   000063 AC30                  MOVW      AX, [HL+0x30]      ;; 1 cycle
   \   000065 C4                    POP       DE                 ;; 1 cycle
   \   000066 C6                    POP       HL                 ;; 1 cycle
   \   000067 CEFB0B                DIVWU                        ;; 17 cycles
   \   00006A 15                    MOVW      AX, DE             ;; 1 cycle
   \   00006B 320600                MOVW      BC, #0x6           ;; 1 cycle
   \   00006E CEFB01                MULHU                        ;; 2 cycles
   \   000071 04....                ADDW      AX, #OSCfg_TickWheel  ;; 1 cycle
   \   000074 B800                  MOVW      [SP], AX           ;; 1 cycle
    263          
    264              if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
   \   000076 A1                    INCW      AX                 ;; 1 cycle
   \   000077 A1                    INCW      AX                 ;; 1 cycle
   \   000078 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00007A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00007B AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00007C F7                    CLRW      BC                 ;; 1 cycle
   \   00007D 43                    CMPW      AX, BC             ;; 1 cycle
   \   00007E 61E8                  SKZ                          ;; 4 cycles
   \   000080 ED....                BR        N:??OS_TickListUpdate_6  ;; 4 cycles
   \   000083                       ; ------------------------------------- Block: 46 cycles
    265                  p_tcb->TickNextPtr   = (OS_TCB   *)0;
   \   000083 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000085 16                    MOVW      HL, AX             ;; 1 cycle
   \   000086 F6                    CLRW      AX                 ;; 1 cycle
   \   000087 BC0A                  MOVW      [HL+0x0A], AX      ;; 1 cycle
    266                  p_tcb->TickPrevPtr   = (OS_TCB   *)0;
   \   000089 BC0C                  MOVW      [HL+0x0C], AX      ;; 1 cycle
    267                  p_spoke->FirstPtr    =  p_tcb;
   \   00008B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00008D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00008E 17                    MOVW      AX, HL             ;; 1 cycle
   \   00008F B9                    MOVW      [DE], AX           ;; 1 cycle
    268                  p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
   \   000090 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000092 16                    MOVW      HL, AX             ;; 1 cycle
   \   000093 E6                    ONEW      AX                 ;; 1 cycle
   \   000094 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000095 ED....                BR        N:??OS_TickListUpdate_7  ;; 3 cycles
   \   000098                       ; ------------------------------------- Block: 16 cycles
    269              } else {
   \                     ??OS_TickListUpdate_3:
   \   000098 33                    XCHW      AX, BC             ;; 1 cycle
   \   000099 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00009C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00009D DF02                  BNZ       ??OS_TickListUpdate_8  ;; 4 cycles
   \   00009F                       ; ------------------------------------- Block: 7 cycles
   \   00009F F7                    CLRW      BC                 ;; 1 cycle
   \   0000A0 43                    CMPW      AX, BC             ;; 1 cycle
   \   0000A1                       ; ------------------------------------- Block: 2 cycles
   \                     ??OS_TickListUpdate_8:
   \   0000A1 61F8                  SKNZ                         ;; 4 cycles
   \   0000A3 ED....                BR        N:??OS_TickListUpdate_5  ;; 4 cycles
   \   0000A6                       ; ------------------------------------- Block: 4 cycles
   \   0000A6 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0000A8 043000                ADDW      AX, #0x30          ;; 1 cycle
   \   0000AB B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0000AD A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   0000AF 440800                CMPW      AX, #0x8           ;; 1 cycle
   \   0000B2 A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   0000B4 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B5 A814                  MOVW      AX, [SP+0x14]      ;; 1 cycle
   \   0000B7 DF75                  BNZ       ??OS_TickListUpdate_9  ;; 4 cycles
   \   0000B9                       ; ------------------------------------- Block: 12 cycles
   \   0000B9 C3                    PUSH      BC                 ;; 1 cycle
   \   0000BA C1                    PUSH      AX                 ;; 1 cycle
   \   0000BB A812                  MOVW      AX, [SP+0x12]      ;; 1 cycle
   \   0000BD 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000BE AC2E                  MOVW      AX, [HL+0x2E]      ;; 1 cycle
   \   0000C0 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000C1 AC2C                  MOVW      AX, [HL+0x2C]      ;; 1 cycle
   \   0000C3 C4                    POP       DE                 ;; 1 cycle
   \   0000C4 C6                    POP       HL                 ;; 1 cycle
   \   0000C5 05                    ADDW      AX, DE             ;; 1 cycle
   \   0000C6 61D8                  SKNC
   \   0000C8 A3                    INCW      BC                 ;; 5 cycles
   \   0000C9 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000CA 07                    ADDW      AX, HL             ;; 1 cycle
   \   0000CB 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000CC 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000CD B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000CF 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000D0 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0000D2 A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   0000D4 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D5 C5                    PUSH      DE                 ;; 1 cycle
   \   0000D6 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000D7 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   0000DA 61D8                  SKNC
   \   0000DC B3                    DECW      BC                 ;; 5 cycles
   \   0000DD FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   0000E0                       ; ------------------------------------- Block: 35 cycles
   \                     ??CrossCallReturnLabel_8:
   \   0000E0 61D8                  SKNC
   \   0000E2 B3                    DECW      BC                 ;; 5 cycles
   \   0000E3 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   0000E6 DE05                  BNC       ??OS_TickListUpdate_10  ;; 4 cycles
   \   0000E8                       ; ------------------------------------- Block: 12 cycles
   \   0000E8 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000EA 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000EB EF12                  BR        S:??OS_TickListUpdate_11  ;; 3 cycles
   \   0000ED                       ; ------------------------------------- Block: 5 cycles
   \                     ??OS_TickListUpdate_10:
   \   0000ED A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   0000EF 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000F0 15                    MOVW      AX, DE             ;; 1 cycle
   \   0000F1 FB....                MOVW      HL, N:OSTickCtr+2  ;; 1 cycle
   \   0000F4 EB....                MOVW      DE, N:OSTickCtr    ;; 1 cycle
   \   0000F7 05                    ADDW      AX, DE             ;; 1 cycle
   \   0000F8 61D8                  SKNC
   \   0000FA A3                    INCW      BC                 ;; 5 cycles
   \   0000FB 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000FC 07                    ADDW      AX, HL             ;; 1 cycle
   \   0000FD 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000FE 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000FF                       ; ------------------------------------- Block: 15 cycles
   \                     ??OS_TickListUpdate_11:
   \   0000FF A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000101 37                    XCHW      AX, HL             ;; 1 cycle
   \   000102 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000103 13                    MOVW      AX, BC             ;; 1 cycle
   \   000104 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000106 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000107 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   00010A 61D8                  SKNC
   \   00010C B3                    DECW      BC                 ;; 5 cycles
   \   00010D 33                    XCHW      AX, BC             ;; 1 cycle
   \   00010E 22....                SUBW      AX, N:OSTickCtr+2  ;; 1 cycle
   \   000111 33                    XCHW      AX, BC             ;; 1 cycle
   \   000112 16                    MOVW      HL, AX             ;; 1 cycle
   \   000113 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000115 37                    XCHW      AX, HL             ;; 1 cycle
   \   000116 BC34                  MOVW      [HL+0x34], AX      ;; 1 cycle
   \   000118 13                    MOVW      AX, BC             ;; 1 cycle
   \   000119 BC36                  MOVW      [HL+0x36], AX      ;; 1 cycle
   \   00011B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00011D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00011E AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000120 12                    MOVW      BC, AX             ;; 1 cycle
   \   000121 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000122 16                    MOVW      HL, AX             ;; 1 cycle
   \   000123 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000125 37                    XCHW      AX, HL             ;; 1 cycle
   \   000126 BC2C                  MOVW      [HL+0x2C], AX      ;; 1 cycle
   \   000128 13                    MOVW      AX, BC             ;; 1 cycle
   \   000129 BC2E                  MOVW      [HL+0x2E], AX      ;; 1 cycle
   \   00012B ED....                BR        N:??OS_TickListInsert_1  ;; 3 cycles
   \   00012E                       ; ------------------------------------- Block: 35 cycles
   \                     ??OS_TickListUpdate_9:
   \   00012E FB....                MOVW      HL, N:OSTickCtr+2  ;; 1 cycle
   \   000131 EB....                MOVW      DE, N:OSTickCtr    ;; 1 cycle
   \   000134 05                    ADDW      AX, DE             ;; 1 cycle
   \   000135 61D8                  SKNC
   \   000137 A3                    INCW      BC                 ;; 5 cycles
   \   000138 33                    XCHW      AX, BC             ;; 1 cycle
   \   000139 07                    ADDW      AX, HL             ;; 1 cycle
   \   00013A 33                    XCHW      AX, BC             ;; 1 cycle
   \   00013B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00013C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00013E 37                    XCHW      AX, HL             ;; 1 cycle
   \   00013F BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000140 13                    MOVW      AX, BC             ;; 1 cycle
   \   000141 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000143 A816                  MOVW      AX, [SP+0x16]      ;; 1 cycle
   \   000145 12                    MOVW      BC, AX             ;; 1 cycle
   \   000146 A814                  MOVW      AX, [SP+0x14]      ;; 1 cycle
   \   000148 ED....                BR        N:??OS_TickListInsert_0  ;; 3 cycles
   \   00014B                       ; ------------------------------------- Block: 23 cycles
   \                     ??OS_TickListUpdate_5:
   \   00014B A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00014D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00014E F6                    CLRW      AX                 ;; 1 cycle
   \   00014F BC30                  MOVW      [HL+0x30], AX      ;; 1 cycle
   \   000151 BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
   \   000153 BC34                  MOVW      [HL+0x34], AX      ;; 1 cycle
   \   000155 BC36                  MOVW      [HL+0x36], AX      ;; 1 cycle
   \   000157 BC0E                  MOVW      [HL+0x0E], AX      ;; 1 cycle
   \   000159 C5                    PUSH      DE                 ;; 1 cycle
   \   00015A C6                    POP       HL                 ;; 1 cycle
   \   00015B 307E72                MOVW      AX, #0x727E        ;; 1 cycle
   \   00015E ED....                BR        N:??OS_TickListUpdate_12  ;; 3 cycles
   \   000161                       ; ------------------------------------- Block: 14 cycles
    270                  p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
   \                     ??OS_TickListUpdate_6:
   \   000161 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000163 16                    MOVW      HL, AX             ;; 1 cycle
   \   000164 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000165 14                    MOVW      DE, AX             ;; 1 cycle
   \   000166 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000168 040C00                ADDW      AX, #0xC           ;; 1 cycle
   \   00016B B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00016D A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00016F 040A00                ADDW      AX, #0xA           ;; 1 cycle
   \   000172 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000174 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000176 043400                ADDW      AX, #0x34          ;; 1 cycle
   \   000179 16                    MOVW      HL, AX             ;; 1 cycle
    271                  while (p_tcb1 != (OS_TCB *)0) {
   \   00017A 15                    MOVW      AX, DE             ;; 1 cycle
   \   00017B 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00017E DD64                  BZ        ??OS_TickListUpdate_13  ;; 4 cycles
   \   000180                       ; ------------------------------------- Block: 19 cycles
   \   000180 EF01                  BR        S:??OS_TickListUpdate_14  ;; 3 cycles
   \   000182                       ; ------------------------------------- Block: 3 cycles
    272                      p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
    273                                         - OSTickCtr;
    274                      if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
    275                          if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
    276                              p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
   \                     ??OS_TickListInsert_2:
   \   000182 14                    MOVW      DE, AX             ;; 1 cycle
   \   000183                       ; ------------------------------------- Block: 1 cycles
    277                          } else {
   \                     ??OS_TickListUpdate_14:
   \   000183 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000186                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_9:
   \   000186 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   000189 61D8                  SKNC
   \   00018B B3                    DECW      BC                 ;; 5 cycles
   \   00018C FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00018F                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_2:
   \   00018F AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000191 C1                    PUSH      AX                 ;; 1 cycle
   \   000192 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000193 C1                    PUSH      AX                 ;; 1 cycle
   \   000194 AA34                  MOVW      AX, [DE+0x34]      ;; 1 cycle
   \   000196 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   000199 DE16                  BNC       ??OS_TickListUpdate_15  ;; 4 cycles
   \   00019B                       ; ------------------------------------- Block: 12 cycles
   \   00019B AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   00019D 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   0001A0 DFE0                  BNZ       ??OS_TickListInsert_2  ;; 4 cycles
   \   0001A2                       ; ------------------------------------- Block: 6 cycles
    278                              p_tcb->TickNextPtr   = (OS_TCB *)0;
   \   0001A2 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0001A4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001A5 F6                    CLRW      AX                 ;; 1 cycle
   \   0001A6 BB                    MOVW      [HL], AX           ;; 1 cycle
    279                              p_tcb->TickPrevPtr   =  p_tcb1;
   \   0001A7 A7                    INCW      HL                 ;; 1 cycle
   \   0001A8 A7                    INCW      HL                 ;; 1 cycle
   \   0001A9 15                    MOVW      AX, DE             ;; 1 cycle
   \   0001AA BB                    MOVW      [HL], AX           ;; 1 cycle
    280                              p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
   \   0001AB A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0001AD BA0A                  MOVW      [DE+0x0A], AX      ;; 1 cycle
    281                              p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
   \   0001AF EF33                  BR        S:??OS_TickListUpdate_13  ;; 3 cycles
   \   0001B1                       ; ------------------------------------- Block: 13 cycles
    282                          }
    283                      } else {                                             /* Insert before the current TCB                     */
   \                     ??OS_TickListUpdate_15:
   \   0001B1 AA0C                  MOVW      AX, [DE+0x0C]      ;; 1 cycle
   \   0001B3 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   0001B6 DF15                  BNZ       ??OS_TickListUpdate_16  ;; 4 cycles
   \   0001B8                       ; ------------------------------------- Block: 6 cycles
    284                          if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
    285                              p_tcb->TickPrevPtr   = (OS_TCB *)0;
   \   0001B8 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0001BA 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001BB F6                    CLRW      AX                 ;; 1 cycle
   \   0001BC BB                    MOVW      [HL], AX           ;; 1 cycle
    286                              p_tcb->TickNextPtr   =  p_tcb1;
   \   0001BD B7                    DECW      HL                 ;; 1 cycle
   \   0001BE B7                    DECW      HL                 ;; 1 cycle
   \   0001BF 15                    MOVW      AX, DE             ;; 1 cycle
   \   0001C0 BB                    MOVW      [HL], AX           ;; 1 cycle
    287                              p_tcb1->TickPrevPtr  =  p_tcb;
   \   0001C1 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0001C3 BA0C                  MOVW      [DE+0x0C], AX      ;; 1 cycle
    288                              p_spoke->FirstPtr    =  p_tcb;
   \   0001C5 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001C6 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001C8 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001C9 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001CA B9                    MOVW      [DE], AX           ;; 1 cycle
   \   0001CB EF17                  BR        S:??OS_TickListUpdate_13  ;; 3 cycles
   \   0001CD                       ; ------------------------------------- Block: 18 cycles
    289                          } else {                                         /* Insert in between 2 TCBs already in the list      */
    290                              p_tcb0               =  p_tcb1->TickPrevPtr;
   \                     ??OS_TickListUpdate_16:
   \   0001CD B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
    291                              p_tcb->TickPrevPtr   =  p_tcb0;
   \   0001CF 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001D0 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0001D2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001D3 13                    MOVW      AX, BC             ;; 1 cycle
   \   0001D4 BB                    MOVW      [HL], AX           ;; 1 cycle
    292                              p_tcb->TickNextPtr   =  p_tcb1;
   \   0001D5 B7                    DECW      HL                 ;; 1 cycle
   \   0001D6 B7                    DECW      HL                 ;; 1 cycle
   \   0001D7 15                    MOVW      AX, DE             ;; 1 cycle
   \   0001D8 BB                    MOVW      [HL], AX           ;; 1 cycle
    293                              p_tcb0->TickNextPtr  =  p_tcb;
   \   0001D9 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   0001DB 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001DC A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   0001DE 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001DF 13                    MOVW      AX, BC             ;; 1 cycle
   \   0001E0 BC0A                  MOVW      [HL+0x0A], AX      ;; 1 cycle
    294                              p_tcb1->TickPrevPtr  =  p_tcb;
   \   0001E2 BA0C                  MOVW      [DE+0x0C], AX      ;; 1 cycle
   \   0001E4                       ; ------------------------------------- Block: 17 cycles
    295                          }
    296                          p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
    297                      }
    298                  }
    299                  p_spoke->NbrEntries++;
   \                     ??OS_TickListUpdate_13:
   \   0001E4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001E6 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001E7 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   0001E8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001E9 A7                    INCW      HL                 ;; 1 cycle
   \   0001EA 15                    MOVW      AX, DE             ;; 1 cycle
   \   0001EB 37                    XCHW      AX, HL             ;; 1 cycle
   \   0001EC B9                    MOVW      [DE], AX           ;; 1 cycle
   \   0001ED                       ; ------------------------------------- Block: 8 cycles
    300              }
    301              if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
   \                     ??OS_TickListUpdate_7:
   \   0001ED C7                    PUSH      HL                 ;; 1 cycle
   \   0001EE C4                    POP       DE                 ;; 1 cycle
   \   0001EF A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   0001F0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001F1 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001F3 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001F4 AA04                  MOVW      AX, [DE+0x04]      ;; 1 cycle
   \   0001F6 47                    CMPW      AX, HL             ;; 1 cycle
   \   0001F7 DE03                  BNC       ??OS_TickListUpdate_17  ;; 4 cycles
   \   0001F9                       ; ------------------------------------- Block: 12 cycles
    302                  p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
   \   0001F9 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001FA BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
   \   0001FC                       ; ------------------------------------- Block: 2 cycles
    303              }
    304              p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
   \                     ??OS_TickListUpdate_17:
   \   0001FC C5                    PUSH      DE                 ;; 1 cycle
   \   0001FD C6                    POP       HL                 ;; 1 cycle
   \   0001FE A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000200 14                    MOVW      DE, AX             ;; 1 cycle
   \   000201 17                    MOVW      AX, HL             ;; 1 cycle
   \   000202 BA0E                  MOVW      [DE+0x0E], AX      ;; 1 cycle
    305             *p_err               = OS_ERR_NONE;
   \   000204 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000206 16                    MOVW      HL, AX             ;; 1 cycle
   \   000207 F6                    CLRW      AX                 ;; 1 cycle
   \   000208                       ; ------------------------------------- Block: 9 cycles
   \                     ??OS_TickListUpdate_12:
   \   000208 BB                    MOVW      [HL], AX           ;; 1 cycle
    306          }
   \   000209 1010                  ADDW      SP, #0x10          ;; 1 cycle
   \   00020B FD....                CALL      N:?FUNC_LEAVE_L06
   \   00020E 0400                  DW        0x4                ;; 3 cycles
   \   000210                       ; ------------------------------------- Block: 5 cycles
   \   000210                       ; ------------------------------------- Total: 437 cycles
   \   000210                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 33                    XCHW      AX, BC             ;; 1 cycle
   \   000001 22....                SUBW      AX, N:OSTickCtr+2  ;; 1 cycle
   \   000004 33                    XCHW      AX, BC             ;; 1 cycle
   \   000005 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 10 cycles
   \   000009                       ; ------------------------------------- Total: 10 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 AA32                  MOVW      AX, [DE+0x32]      ;; 1 cycle
   \   000002 12                    MOVW      BC, AX             ;; 1 cycle
   \   000003 AA30                  MOVW      AX, [DE+0x30]      ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 9 cycles
   \   000006                       ; ------------------------------------- Total: 9 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 33                    XCHW      AX, BC             ;; 1 cycle
   \   000001 22....                SUBW      AX, N:OSTickCtr+2  ;; 1 cycle
   \   000004 33                    XCHW      AX, BC             ;; 1 cycle
   \   000005 BA34                  MOVW      [DE+0x34], AX      ;; 1 cycle
   \   000007 13                    MOVW      AX, BC             ;; 1 cycle
   \   000008 BA36                  MOVW      [DE+0x36], AX      ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 12 cycles
   \   00000B                       ; ------------------------------------- Total: 12 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00
    307          
    308          /*$PAGE*/
    309          /*
    310          ************************************************************************************************************************
    311          *                                         REMOVE A TASK FROM THE TICK LIST
    312          *
    313          * Description: This function is called to remove a task from the tick list
    314          *
    315          * Arguments  : p_tcb          Is a pointer to the OS_TCB to remove.
    316          *              -----
    317          *
    318          * Returns    : none
    319          *
    320          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    321          *
    322          *              2) This function is assumed to be called with interrupts disabled.
    323          ************************************************************************************************************************
    324          */
    325          

   \                                 In  segment CODE, align 1, keep-with-next
    326          void  OS_TickListRemove (OS_TCB  *p_tcb)
   \                     OS_TickListRemove:
    327          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 6
   \   000002 2006                  SUBW      SP, #0x6           ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
    328              OS_TICK_SPOKE  *p_spoke;
    329              OS_TCB         *p_tcb1;
    330              OS_TCB         *p_tcb2;
    331          
    332          
    333          
    334              p_spoke = p_tcb->TickSpokePtr;
   \   000005 AC0E                  MOVW      AX, [HL+0x0E]      ;; 1 cycle
   \   000007 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
    335              if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
   \   000009 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00000C DD45                  BZ        ??OS_TickListUpdate_18  ;; 4 cycles
   \   00000E                       ; ------------------------------------- Block: 11 cycles
    336                  p_tcb->TickRemain = (OS_TICK)0u;
   \   00000E F6                    CLRW      AX                 ;; 1 cycle
   \   00000F BC34                  MOVW      [HL+0x34], AX      ;; 1 cycle
   \   000011 BC36                  MOVW      [HL+0x36], AX      ;; 1 cycle
    337                  if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
   \   000013 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000015 14                    MOVW      DE, AX             ;; 1 cycle
   \   000016 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000017 47                    CMPW      AX, HL             ;; 1 cycle
   \   000018 DF0E                  BNZ       ??OS_TickListUpdate_19  ;; 4 cycles
   \   00001A                       ; ------------------------------------- Block: 11 cycles
    338                      p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
   \   00001A AC0A                  MOVW      AX, [HL+0x0A]      ;; 1 cycle
   \   00001C B800                  MOVW      [SP], AX           ;; 1 cycle
    339                      p_spoke->FirstPtr = p_tcb1;
   \   00001E B9                    MOVW      [DE], AX           ;; 1 cycle
    340                      if (p_tcb1 != (OS_TCB *)0) {
   \   00001F 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000022 DD1C                  BZ        ??OS_TickListUpdate_20  ;; 4 cycles
   \   000024                       ; ------------------------------------- Block: 8 cycles
    341                          p_tcb1->TickPrevPtr = (void *)0;
   \   000024 14                    MOVW      DE, AX             ;; 1 cycle
   \   000025 F6                    CLRW      AX                 ;; 1 cycle
   \   000026 EF16                  BR        S:??OS_TickListUpdate_21  ;; 3 cycles
   \   000028                       ; ------------------------------------- Block: 5 cycles
    342                      }
    343                  } else {
    344                      p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
   \                     ??OS_TickListUpdate_19:
   \   000028 AC0C                  MOVW      AX, [HL+0x0C]      ;; 1 cycle
   \   00002A B800                  MOVW      [SP], AX           ;; 1 cycle
    345                      p_tcb2              = p_tcb->TickNextPtr;
   \   00002C AC0A                  MOVW      AX, [HL+0x0A]      ;; 1 cycle
   \   00002E B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
    346                      p_tcb1->TickNextPtr = p_tcb2;
   \   000030 12                    MOVW      BC, AX             ;; 1 cycle
   \   000031 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000033 14                    MOVW      DE, AX             ;; 1 cycle
   \   000034 33                    XCHW      AX, BC             ;; 1 cycle
   \   000035 BA0A                  MOVW      [DE+0x0A], AX      ;; 1 cycle
    347                      if (p_tcb2 != (OS_TCB *)0) {
   \   000037 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00003A DD04                  BZ        ??OS_TickListUpdate_20  ;; 4 cycles
   \   00003C                       ; ------------------------------------- Block: 14 cycles
    348                          p_tcb2->TickPrevPtr = p_tcb1;
   \   00003C 14                    MOVW      DE, AX             ;; 1 cycle
   \   00003D 13                    MOVW      AX, BC             ;; 1 cycle
   \   00003E                       ; ------------------------------------- Block: 2 cycles
   \                     ??OS_TickListUpdate_21:
   \   00003E BA0C                  MOVW      [DE+0x0C], AX      ;; 1 cycle
   \   000040                       ; ------------------------------------- Block: 1 cycles
    349                      }
    350                  }
    351                  p_tcb->TickNextPtr  = (OS_TCB        *)0;
   \                     ??OS_TickListUpdate_20:
   \   000040 F6                    CLRW      AX                 ;; 1 cycle
   \   000041 BC0A                  MOVW      [HL+0x0A], AX      ;; 1 cycle
    352                  p_tcb->TickPrevPtr  = (OS_TCB        *)0;
   \   000043 BC0C                  MOVW      [HL+0x0C], AX      ;; 1 cycle
    353                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
   \   000045 BC0E                  MOVW      [HL+0x0E], AX      ;; 1 cycle
    354                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
   \   000047 BC30                  MOVW      [HL+0x30], AX      ;; 1 cycle
   \   000049 BC32                  MOVW      [HL+0x32], AX      ;; 1 cycle
    355                  p_spoke->NbrEntries--;
   \   00004B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004E AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   000050 B1                    DECW      AX                 ;; 1 cycle
   \   000051 BA02                  MOVW      [DE+0x02], AX      ;; 1 cycle
   \   000053                       ; ------------------------------------- Block: 11 cycles
    356              }
    357          }
   \                     ??OS_TickListUpdate_18:
   \   000053 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   000055 C4                    POP       DE                 ;; 1 cycle
   \   000056 C2                    POP       BC                 ;; 1 cycle
   \   000057 D7                    RET                          ;; 6 cycles
   \   000058                       ; ------------------------------------- Block: 9 cycles
   \   000058                       ; ------------------------------------- Total: 72 cycles
   \   000058                       REQUIRE ?CLRL78_V1_0_L00
    358          
    359          /*$PAGE*/
    360          /*
    361          ************************************************************************************************************************
    362          *                                              RESET TICK LIST PEAK DETECTOR
    363          *
    364          * Description: This function is used to reset the peak detector for the number of entries in each spoke.
    365          *
    366          * Arguments  : void
    367          *
    368          * Returns    : none
    369          *
    370          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    371          ************************************************************************************************************************
    372          */
    373          
    374          

   \                                 In  segment CODE, align 1, keep-with-next
    375          void  OS_TickListResetPeak (void)
   \                     OS_TickListResetPeak:
    376          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
    377              OS_TICK_SPOKE_IX   i;
    378              OS_TICK_SPOKE     *p_spoke;
    379          
    380          
    381          
    382              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 16                    MOVW      HL, AX             ;; 1 cycle
   \   000004 EF0E                  BR        S:??OS_TickListUpdate_22  ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 7 cycles
    383                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
    384                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \                     ??OS_TickListResetPeak_0:
   \   000006 17                    MOVW      AX, HL             ;; 1 cycle
   \   000007 320600                MOVW      BC, #0x6           ;; 1 cycle
   \   00000A CEFB01                MULHU                        ;; 2 cycles
   \   00000D 04....                ADDW      AX, #OSCfg_TickWheel+4  ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
   \   000011 F6                    CLRW      AX                 ;; 1 cycle
   \   000012 B9                    MOVW      [DE], AX           ;; 1 cycle
    385              }
   \   000013 A7                    INCW      HL                 ;; 1 cycle
   \   000014                       ; ------------------------------------- Block: 9 cycles
   \                     ??OS_TickListUpdate_22:
   \   000014 AF....                MOVW      AX, N:OSCfg_TickWheelSize  ;; 1 cycle
   \   000017 47                    CMPW      AX, HL             ;; 1 cycle
   \   000018 61C3EB                BH        ??OS_TickListResetPeak_0  ;; 4 cycles
   \   00001B                       ; ------------------------------------- Block: 6 cycles
    386          }
   \   00001B C4                    POP       DE                 ;; 1 cycle
   \   00001C C2                    POP       BC                 ;; 1 cycle
   \   00001D D7                    RET                          ;; 6 cycles
   \   00001E                       ; ------------------------------------- Block: 8 cycles
   \   00001E                       ; ------------------------------------- Total: 30 cycles
   \   00001E                       REQUIRE ?CLRL78_V1_0_L00
    387          
    388          /*$PAGE*/
    389          /*
    390          ************************************************************************************************************************
    391          *                                                UPDATE THE TICK LIST
    392          *
    393          * Description: This function is called when a tick occurs and determines if the timeout waiting for a kernel object has
    394          *              expired or a delay has expired.
    395          *
    396          * Arguments  : non
    397          *
    398          * Returns    : none
    399          *
    400          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    401          ************************************************************************************************************************
    402          */
    403          

   \                                 In  segment CODE, align 1, keep-with-next
    404          void  OS_TickListUpdate (void)
   \                     OS_TickListUpdate:
    405          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 10
   \   000002 200A                  SUBW      SP, #0xA           ;; 1 cycle
    406              CPU_BOOLEAN        done;
    407              OS_TICK_SPOKE     *p_spoke;
    408              OS_TCB            *p_tcb;
    409              OS_TCB            *p_tcb_next;
    410              OS_TICK_SPOKE_IX   spoke;
    411              CPU_TS             ts_start;
    412              CPU_TS             ts_end;
    413              CPU_SR_ALLOC();
    414          
    415          
    416              OS_CRITICAL_ENTER();
   \   000004 8EFA                  MOV       A, PSW             ;; 1 cycle
   \   000006 70                    MOV       X, A               ;; 1 cycle
   \   000007 F1                    CLRB      A                  ;; 1 cycle
   \   000008 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00000A F6                    CLRW      AX                 ;; 1 cycle
   \   00000B B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   00000D 717BFA                DI                           ;; 2 cycles
   \   000010 FD....                CALL      CPU_IntDisMeasStart  ;; 3 cycles
    417              ts_start = OS_TS_GET();
    418              OSTickCtr++;                                                       /* Keep track of the number of ticks           */
   \   000013 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 17 cycles
   \                     ??CrossCallReturnLabel_14:
   \   000016 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000019 61D8                  SKNC
   \   00001B A3                    INCW      BC                 ;; 5 cycles
   \   00001C BF....                MOVW      N:OSTickCtr, AX    ;; 1 cycle
   \   00001F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000020 BF....                MOVW      N:OSTickCtr+2, AX  ;; 1 cycle
    419              spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
    420              p_spoke  = &OSCfg_TickWheel[spoke];
    421              p_tcb    = p_spoke->FirstPtr;
   \   000023 EB....                MOVW      DE, N:OSCfg_TickWheelSize  ;; 1 cycle
   \   000026 F6                    CLRW      AX                 ;; 1 cycle
   \   000027 16                    MOVW      HL, AX             ;; 1 cycle
   \   000028 AF....                MOVW      AX, N:OSTickCtr    ;; 1 cycle
   \   00002B CEFB0B                DIVWU                        ;; 17 cycles
   \   00002E 15                    MOVW      AX, DE             ;; 1 cycle
   \   00002F 320600                MOVW      BC, #0x6           ;; 1 cycle
   \   000032 CEFB01                MULHU                        ;; 2 cycles
   \   000035 04....                ADDW      AX, #OSCfg_TickWheel  ;; 1 cycle
   \   000038 16                    MOVW      HL, AX             ;; 1 cycle
   \   000039 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00003A EF2D                  BR        S:??OS_TickListUpdate_23  ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 40 cycles
    422              done     = DEF_FALSE;
    423              while (done == DEF_FALSE) {
    424                  if (p_tcb != (OS_TCB *)0) {
    425                      p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
    426                      switch (p_tcb->TaskState) {
    427                          case OS_TASK_STATE_RDY:
    428                          case OS_TASK_STATE_PEND:
    429                          case OS_TASK_STATE_SUSPENDED:
    430                          case OS_TASK_STATE_PEND_SUSPENDED:
    431                               break;
    432          
    433                          case OS_TASK_STATE_DLY:
    434                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    435                                                 - OSTickCtr;
   \                     ??OS_TickListUpdate_24:
   \   00003C FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_10:
   \   00003F B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000041 13                    MOVW      AX, BC             ;; 1 cycle
   \   000042 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000044 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000046 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   000049 61D8                  SKNC
   \   00004B B3                    DECW      BC                 ;; 5 cycles
   \   00004C FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00004F                       ; ------------------------------------- Block: 13 cycles
    436                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
   \                     ??CrossCallReturnLabel_3:
   \   00004F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000051 C1                    PUSH      AX                 ;; 1 cycle
   \   000052 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000054 C1                    PUSH      AX                 ;; 1 cycle
   \   000055 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000058                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_15:
   \   000058 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   00005B 61E8                  SKZ                          ;; 4 cycles
   \   00005D ED....                BR        N:??OS_TickListUpdate_25  ;; 4 cycles
   \   000060                       ; ------------------------------------- Block: 7 cycles
    437                                   p_tcb->TaskState = OS_TASK_STATE_RDY;
   \   000060 F1                    CLRB      A                  ;; 1 cycle
   \   000061 9A1C                  MOV       [DE+0x1C], A       ;; 1 cycle
    438                                   OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
   \   000063 15                    MOVW      AX, DE             ;; 1 cycle
   \   000064 FD....                CALL      OS_TaskRdy         ;; 3 cycles
   \   000067                       ; ------------------------------------- Block: 6 cycles
    439                               } else {
    440                                   done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
    441                               }
    442                               break;
    443          
    444                          case OS_TASK_STATE_PEND_TIMEOUT:
    445                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    446                                                 - OSTickCtr;
    447                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    448          #if (OS_MSG_EN > 0u)
    449                                   p_tcb->MsgPtr     = (void      *)0;
    450                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    451          #endif
    452                                   p_tcb->TS         = OS_TS_GET();
    453                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    454                                   OS_TaskRdy(p_tcb);
    455                                   p_tcb->TaskState  = OS_TASK_STATE_RDY;
    456                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    457                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    458                               } else {
    459                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    460                               }
    461                               break;
    462          
    463                          case OS_TASK_STATE_DLY_SUSPENDED:
    464                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    465                                                 - OSTickCtr;
    466                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    467                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    468                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    469                               } else {
    470                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    471                               }
    472                               break;
    473          
    474                          case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
    475                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    476                                                 - OSTickCtr;
    477                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    478          #if (OS_MSG_EN > 0u)
    479                                   p_tcb->MsgPtr     = (void      *)0;
    480                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    481          #endif
    482                                   p_tcb->TS         = OS_TS_GET();
    483                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    484                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    485                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    486                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    487                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    488                               } else {
    489                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    490                               }
    491                               break;
    492          
    493                          default:
    494                               break;
    495                      }
    496                      p_tcb = p_tcb_next;
   \                     ??OS_TickListUpdate_26:
   \   000067 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000069                       ; ------------------------------------- Block: 1 cycles
   \                     ??OS_TickListUpdate_23:
   \   000069 14                    MOVW      DE, AX             ;; 1 cycle
   \   00006A 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00006D 61F8                  SKNZ                         ;; 4 cycles
   \   00006F ED....                BR        N:??OS_TickListUpdate_25  ;; 4 cycles
   \   000072                       ; ------------------------------------- Block: 6 cycles
   \   000072 AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   000074 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000076 8A1C                  MOV       A, [DE+0x1C]       ;; 1 cycle
   \   000078 91                    DEC       A                  ;; 1 cycle
   \   000079 DDC1                  BZ        ??OS_TickListUpdate_24  ;; 4 cycles
   \   00007B                       ; ------------------------------------- Block: 8 cycles
   \   00007B 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   00007D DD0A                  BZ        ??OS_TickListUpdate_27  ;; 4 cycles
   \   00007F                       ; ------------------------------------- Block: 5 cycles
   \   00007F 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   000081 DD3D                  BZ        ??OS_TickListUpdate_28  ;; 4 cycles
   \   000083                       ; ------------------------------------- Block: 5 cycles
   \   000083 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   000085 DD65                  BZ        ??OS_TickListUpdate_29  ;; 4 cycles
   \   000087                       ; ------------------------------------- Block: 5 cycles
   \   000087 EFDE                  BR        S:??OS_TickListUpdate_26  ;; 3 cycles
   \   000089                       ; ------------------------------------- Block: 3 cycles
   \                     ??OS_TickListUpdate_27:
   \   000089 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   00008C                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_11:
   \   00008C B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00008E 13                    MOVW      AX, BC             ;; 1 cycle
   \   00008F B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000091 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000093 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   000096 61D8                  SKNC
   \   000098 B3                    DECW      BC                 ;; 5 cycles
   \   000099 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00009C                       ; ------------------------------------- Block: 13 cycles
   \                     ??CrossCallReturnLabel_4:
   \   00009C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009E C1                    PUSH      AX                 ;; 1 cycle
   \   00009F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000A1 C1                    PUSH      AX                 ;; 1 cycle
   \   0000A2 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   0000A5                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_16:
   \   0000A5 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   0000A8 DF71                  BNZ       ??OS_TickListUpdate_25  ;; 4 cycles
   \   0000AA                       ; ------------------------------------- Block: 7 cycles
   \   0000AA FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   0000AD                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_0:
   \   0000AD FD....                CALL      OS_PendListRemove  ;; 3 cycles
   \   0000B0 15                    MOVW      AX, DE             ;; 1 cycle
   \   0000B1 FD....                CALL      OS_TaskRdy         ;; 3 cycles
   \   0000B4 F1                    CLRB      A                  ;; 1 cycle
   \   0000B5                       ; ------------------------------------- Block: 8 cycles
   \                     ??OS_TickListUpdate_30:
   \   0000B5 9A1C                  MOV       [DE+0x1C], A       ;; 1 cycle
   \   0000B7 5103                  MOV       A, #0x3            ;; 1 cycle
   \   0000B9 9A1B                  MOV       [DE+0x1B], A       ;; 1 cycle
   \   0000BB F1                    CLRB      A                  ;; 1 cycle
   \   0000BC 9A1A                  MOV       [DE+0x1A], A       ;; 1 cycle
   \   0000BE EFA7                  BR        S:??OS_TickListUpdate_26  ;; 3 cycles
   \   0000C0                       ; ------------------------------------- Block: 8 cycles
   \                     ??OS_TickListUpdate_28:
   \   0000C0 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   0000C3                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_12:
   \   0000C3 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0000C5 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000C6 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000C8 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000CA 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   0000CD 61D8                  SKNC
   \   0000CF B3                    DECW      BC                 ;; 5 cycles
   \   0000D0 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   0000D3                       ; ------------------------------------- Block: 13 cycles
   \                     ??CrossCallReturnLabel_5:
   \   0000D3 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000D5 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D6 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000D8 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D9 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   0000DC                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_17:
   \   0000DC FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   0000DF DF3A                  BNZ       ??OS_TickListUpdate_25  ;; 4 cycles
   \   0000E1                       ; ------------------------------------- Block: 7 cycles
   \   0000E1 5104                  MOV       A, #0x4            ;; 1 cycle
   \   0000E3 9A1C                  MOV       [DE+0x1C], A       ;; 1 cycle
   \   0000E5 15                    MOVW      AX, DE             ;; 1 cycle
   \   0000E6 FD....                CALL      OS_TickListRemove  ;; 3 cycles
   \   0000E9 ED....                BR        N:??OS_TickListUpdate_26  ;; 3 cycles
   \   0000EC                       ; ------------------------------------- Block: 9 cycles
   \                     ??OS_TickListUpdate_29:
   \   0000EC FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   0000EF                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_13:
   \   0000EF B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0000F1 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000F2 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000F4 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000F6 22....                SUBW      AX, N:OSTickCtr    ;; 1 cycle
   \   0000F9 61D8                  SKNC
   \   0000FB B3                    DECW      BC                 ;; 5 cycles
   \   0000FC FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   0000FF                       ; ------------------------------------- Block: 13 cycles
   \                     ??CrossCallReturnLabel_6:
   \   0000FF A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000101 C1                    PUSH      AX                 ;; 1 cycle
   \   000102 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000104 C1                    PUSH      AX                 ;; 1 cycle
   \   000105 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000108                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_18:
   \   000108 FD....                CALL      N:?UL_CMP_L03      ;; 3 cycles
   \   00010B DF0E                  BNZ       ??OS_TickListUpdate_25  ;; 4 cycles
   \   00010D                       ; ------------------------------------- Block: 7 cycles
   \   00010D FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   000110                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_1:
   \   000110 FD....                CALL      OS_PendListRemove  ;; 3 cycles
   \   000113 15                    MOVW      AX, DE             ;; 1 cycle
   \   000114 FD....                CALL      OS_TickListRemove  ;; 3 cycles
   \   000117 5104                  MOV       A, #0x4            ;; 1 cycle
   \   000119 EF9A                  BR        S:??OS_TickListUpdate_30  ;; 3 cycles
   \   00011B                       ; ------------------------------------- Block: 11 cycles
    497                  } else {
    498                      done  = DEF_TRUE;
    499                  }
    500              }
    501              ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
    502              if (ts_end > OSTickTaskTimeMax) {
    503                  OSTickTaskTimeMax = ts_end;
    504              }
    505              OS_CRITICAL_EXIT();
   \                     ??OS_TickListUpdate_25:
   \   00011B FD....                CALL      CPU_IntDisMeasStop  ;; 3 cycles
   \   00011E 8806                  MOV       A, [SP+0x06]       ;; 1 cycle
   \   000120 71FC                  MOV1      CY, A.7            ;; 1 cycle
   \   000122 7179FA                MOV1      PSW.7, CY          ;; 4 cycles
    506          }
   \   000125 100A                  ADDW      SP, #0xA           ;; 1 cycle
   \   000127 C4                    POP       DE                 ;; 1 cycle
   \   000128 C2                    POP       BC                 ;; 1 cycle
   \   000129 D7                    RET                          ;; 6 cycles
   \   00012A                       ; ------------------------------------- Block: 18 cycles
   \   00012A                       ; ------------------------------------- Total: 276 cycles
   \   00012A                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 DB....                MOVW      BC, N:OSTickCtr+2  ;; 1 cycle
   \   000003 AF....                MOVW      AX, N:OSTickCtr    ;; 1 cycle
   \   000006 D7                    RET                          ;; 6 cycles
   \   000007                       ; ------------------------------------- Block: 8 cycles
   \   000007                       ; ------------------------------------- Total: 8 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 F6                    CLRW      AX                 ;; 1 cycle
   \   000001 BA40                  MOVW      [DE+0x40], AX      ;; 1 cycle
   \   000003 BA42                  MOVW      [DE+0x42], AX      ;; 1 cycle
   \   000005 BA24                  MOVW      [DE+0x24], AX      ;; 1 cycle
   \   000007 BA26                  MOVW      [DE+0x26], AX      ;; 1 cycle
   \   000009 15                    MOVW      AX, DE             ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 12 cycles
   \   00000B                       ; ------------------------------------- Total: 12 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "uC/OS-III Tick Task">`:
   \   000000 75432F4F532D          DB "uC/OS-III Tick Task"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   OS_TickListInit
     24   OS_TickListInsert
     10   OS_TickListRemove
      4   OS_TickListResetPeak
     18   OS_TickListUpdate
       14   -> CPU_IntDisMeasStart
       14   -> CPU_IntDisMeasStop
       14   -> OS_PendListRemove
       14   -> OS_TaskRdy
       14   -> OS_TickListRemove
     14   OS_TickTask
       14   -> OSTaskSemPend
       10   -> OS_TickListUpdate
     26   OS_TickTaskInit
       26   -> OSTaskCreate
        4   -> OS_TickListInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "uC/OS-III Tick Task">
      11  ?Subroutine0
      11  ?Subroutine1
       9  ?Subroutine2
       6  ?Subroutine3
       7  ?Subroutine4
      34  OS_TickListInit
     528  OS_TickListInsert
      88  OS_TickListRemove
      30  OS_TickListResetPeak
     298  OS_TickListUpdate
      33  OS_TickTask
      76  OS_TickTaskInit

 
 1 131 bytes in segment CODE
    20 bytes in segment NEAR_CONST
 
 1 131 bytes of CODE  memory
    20 bytes of CONST memory

Errors: none
Warnings: none
