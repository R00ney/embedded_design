###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             23/Mar/2014  17:08:36 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\BSP\Glyph\glyph\glyph_register.c                #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\BSP\Glyph\glyph\glyph_register.c --core rl78_2  #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\ --dlib_config            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --no_clustering --debug -lC                              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\ -I                      #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\ -I C:\Users\Suddenlink\Dropbox\git #
#                    _files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\E #
#                    valBoards\Renesas\YRDKRL78G14\IAR\Application\Source\    #
#                    -I C:\Users\Suddenlink\Dropbox\git_files\embedded_design #
#                    \Proj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDK #
#                    RL78G14\IAR\Application\..\uCOS-III\ -I                  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\ -I                          #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\applilet3_src\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\Drivers\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\BSP\Glyph\glyph\ -I              #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-CPU\RL78\IAR\ -I  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uC-LIB\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\..\..\..\..\..\uCOS-III\Ports\Renes #
#                    as\RL78\IAR\ -I C:\Users\Suddenlink\Dropbox\git_files\em #
#                    bedded_design\Proj2_uCOS-III-LCD-G14\Software\EvalBoards #
#                    \Renesas\YRDKRL78G14\IAR\Application\..\..\..\..\..\uCOS #
#                    -III\Source\ --relaxed_fp                                #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\List\glyph_register.lst       #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Pr #
#                    oj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL7 #
#                    8G14\IAR\Application\Debug\Obj\glyph_register.r87        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\Proj2_uCOS-III-LCD-G14\Software\EvalBoards\Renesas\YRDKRL78G14\IAR\BSP\Glyph\glyph\glyph_register.c
      1          /******************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only
      4          * intended for use with Renesas products. No other uses are authorized.
      5          * This software is owned by Renesas Electronics Corporation and is protected under
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
      8          * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
      9          * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
     10          * PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY
     11          * DISCLAIMED.
     12          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
     13          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
     14          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
     15          * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
     16          * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     17          * Renesas reserves the right, without notice, to make changes to this
     18          * software and to discontinue the availability of this software.
     19          * By using this software, you agree to the additional terms and
     20          * conditions found by accessing the following link:
     21          * http://www.renesas.com/disclaimer
     22          ******************************************************************************/
     23          /* Copyright (C) 2011 Renesas Electronics Corporation. All rights reserved. */
     24          /* Code written for Renesas by Future Designs, Inc. www.teamfdi.com */
     25          
     26          /******************************************************************************
     27          * File Name : GlyphOpenDrivers.c
     28          * Version : 1.00
     29          * Device(s) : Communications Drivers and LCD Display Drivers
     30          * Tool-Chain : Glyph - The Generic API for Graphics RSPI API
     31          * H/W Platform : YRDKRL78G13
     32          * Description : Sets functions in the Handle.
     33          ******************************************************************************/
     34          
     35          /******************************************************************************
     36          Includes <system include> “Glyph Includes”
     37          ******************************************************************************/
     38          #include "glyph_api.h"
     39          
     40          /******************************************************************************
     41          Includes “Glyph LCD Display (0) Include”
     42          ******************************************************************************/
     43          #include "ST7579_LCD.h"
     44          #include "YRDKRL78_SPI.h"
     45          
     46          /******************************************************************************
     47          * Function Name: GlyphCommOpen
     48          * Description : Assign the communications workspace.
     49          * Argument : aHandle - the Glyph handle to setup for the LCD and Communications.
     50          * Return Value : 0=success, not 0= error
     51          * Calling Functions : main
     52          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     53          T_glyphError GlyphCommOpen(T_glyphHandle aHandle, int32_t aAddress)
   \                     GlyphCommOpen:
     54          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 2
     55              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
     56          
     57          
     58              switch (aAddress) {
   \   000003 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000008 33                    XCHW      AX, BC             ;; 1 cycle
   \   000009 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00000C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000D DF02                  BNZ       ??GlyphLCDOpen_0   ;; 4 cycles
   \   00000F                       ; ------------------------------------- Block: 13 cycles
   \   00000F F7                    CLRW      BC                 ;; 1 cycle
   \   000010 43                    CMPW      AX, BC             ;; 1 cycle
   \   000011                       ; ------------------------------------- Block: 2 cycles
   \                     ??GlyphLCDOpen_0:
   \   000011 DF2B                  BNZ       ??GlyphLCDOpen_1   ;; 4 cycles
   \   000013                       ; ------------------------------------- Block: 4 cycles
     59                  case 0:
     60                       p_gw->iCommAPI->iOpen        = LCD_SPI_Open;
   \   000013 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000015 14                    MOVW      DE, AX             ;; 1 cycle
   \   000016 A5                    INCW      DE                 ;; 1 cycle
   \   000017 A5                    INCW      DE                 ;; 1 cycle
   \   000018 32....                MOVW      BC, #LCD_SPI_Open  ;; 1 cycle
   \   00001B A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00001C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001D 13                    MOVW      AX, BC             ;; 1 cycle
   \   00001E BB                    MOVW      [HL], AX           ;; 1 cycle
     61                       p_gw->iCommAPI->iCommandSend = LCD_SPI_CommandSend;
   \   00001F 32....                MOVW      BC, #LCD_SPI_CommandSend  ;; 1 cycle
   \   000022 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000023 16                    MOVW      HL, AX             ;; 1 cycle
   \   000024 13                    MOVW      AX, BC             ;; 1 cycle
   \   000025 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
     62                       p_gw->iCommAPI->iDataSend    = LCD_SPI_DataSend;
   \   000027 32....                MOVW      BC, #LCD_SPI_DataSend  ;; 1 cycle
   \   00002A A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00002B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00002D BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
     63                       break;
     64          
     65          
     66                  default:
     67                      return GLYPH_ERROR_ILLEGAL_OPERATION;
     68              }
     69          
     70              return p_gw->iCommAPI->iOpen(aHandle);
   \   00002F A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000031 16                    MOVW      HL, AX             ;; 1 cycle
   \   000032 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000033 14                    MOVW      DE, AX             ;; 1 cycle
   \   000034 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000035 12                    MOVW      BC, AX             ;; 1 cycle
   \   000036 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000039 17                    MOVW      AX, HL             ;; 1 cycle
   \   00003A 61DA                  CALL      BC                 ;; 3 cycles
   \   00003C EF01                  BR        S:??GlyphLCDOpen_2  ;; 3 cycles
   \   00003E                       ; ------------------------------------- Block: 33 cycles
   \                     ??GlyphLCDOpen_1:
   \   00003E E1                    ONEB      A                  ;; 1 cycle
   \   00003F                       ; ------------------------------------- Block: 1 cycles
   \                     ??GlyphLCDOpen_2:
   \   00003F 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000041                       ; ------------------------------------- Block: 1 cycles
   \   000041                       ; ------------------------------------- Total: 54 cycles
   \   000041                       REQUIRE ?CLRL78_V1_0_L00
   \   000041                       REQUIRE ?Subroutine0
   \   000041                       ; // Fall through to label ?Subroutine0
     71          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 C4                    POP       DE                 ;; 1 cycle
   \   000001 C2                    POP       BC                 ;; 1 cycle
   \   000002 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000005 0400                  DW        0x4                ;; 3 cycles
   \   000007                       ; ------------------------------------- Block: 5 cycles
   \   000007                       ; ------------------------------------- Total: 5 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00
     72          
     73          /******************************************************************************
     74          * Function Name: GlyphLCDOpen
     75          * Description : Assign the global ST7579_LCD to aHandle.
     76          * Argument : aHandle - the Glyph handle to setup for the LCD.
     77          * Return Value : 0=success, not 0= error
     78          * Calling Functions : GlyphOpen
     79          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     80          T_glyphError GlyphLCDOpen(T_glyphHandle aHandle, int32_t aAddress)
   \                     GlyphLCDOpen:
     81          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
     82              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
     83          
     84          
     85              switch (aAddress) {
   \   000003 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000005 12                    MOVW      BC, AX             ;; 1 cycle
   \   000006 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000008 33                    XCHW      AX, BC             ;; 1 cycle
   \   000009 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00000C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000D DF02                  BNZ       ??GlyphLCDOpen_3   ;; 4 cycles
   \   00000F                       ; ------------------------------------- Block: 13 cycles
   \   00000F F7                    CLRW      BC                 ;; 1 cycle
   \   000010 43                    CMPW      AX, BC             ;; 1 cycle
   \   000011                       ; ------------------------------------- Block: 2 cycles
   \                     ??GlyphLCDOpen_3:
   \   000011 DF23                  BNZ       ??GlyphLCDOpen_4   ;; 4 cycles
   \   000013                       ; ------------------------------------- Block: 4 cycles
     86                  case 0:
     87                       p_gw->iLCDAPI->iOpen  = ST7579_Open;
   \   000013 32....                MOVW      BC, #ST7579_Open   ;; 1 cycle
   \   000016 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 13                    MOVW      AX, BC             ;; 1 cycle
   \   000019 BC42                  MOVW      [HL+0x42], AX      ;; 1 cycle
     88                       p_gw->iLCDAPI->iWrite = ST7579_Write;
   \   00001B 32....                MOVW      BC, #ST7579_Write  ;; 1 cycle
   \   00001E A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00001F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000020 13                    MOVW      AX, BC             ;; 1 cycle
   \   000021 BC48                  MOVW      [HL+0x48], AX      ;; 1 cycle
     89                       p_gw->iLCDAPI->iRead  = ST7579_Read;
   \   000023 32....                MOVW      BC, #ST7579_Read   ;; 1 cycle
   \   000026 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000027 16                    MOVW      HL, AX             ;; 1 cycle
   \   000028 13                    MOVW      AX, BC             ;; 1 cycle
   \   000029 BC46                  MOVW      [HL+0x46], AX      ;; 1 cycle
     90                       p_gw->iLCDAPI->iClose = ST7579_Close;
   \   00002B 36....                MOVW      HL, #ST7579_Close  ;; 1 cycle
   \   00002E A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00002F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000030 17                    MOVW      AX, HL             ;; 1 cycle
   \   000031 BA44                  MOVW      [DE+0x44], AX      ;; 1 cycle
     91                       break;
     92          
     93          
     94                  default:
     95                      return GLYPH_ERROR_ILLEGAL_OPERATION;
     96              }
     97          
     98              return GLYPH_ERROR_NONE;
   \   000033 F1                    CLRB      A                  ;; 1 cycle
   \   000034 EF01                  BR        S:??GlyphLCDOpen_5  ;; 3 cycles
   \   000036                       ; ------------------------------------- Block: 24 cycles
   \                     ??GlyphLCDOpen_4:
   \   000036 E1                    ONEB      A                  ;; 1 cycle
   \   000037                       ; ------------------------------------- Block: 1 cycles
   \                     ??GlyphLCDOpen_5:
   \   000037 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   00003A                       ; ------------------------------------- Block: 3 cycles
   \   00003A                       ; ------------------------------------- Total: 47 cycles
   \   00003A                       REQUIRE ?CLRL78_V1_0_L00
     99          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     10   GlyphCommOpen
        6   -- Indirect call
      8   GlyphLCDOpen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      65  GlyphCommOpen
      58  GlyphLCDOpen

 
 130 bytes in segment CODE
 
 130 bytes of CODE memory

Errors: none
Warnings: none
