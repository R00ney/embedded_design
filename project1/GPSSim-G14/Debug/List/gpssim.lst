###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             19/Feb/2014  19:39:55 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14\user_src\gpssim.c                      #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14\user_src\gpssim.c --core rl78_2        #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14\Debug\Obj\ --dlib_config "C:\Program   #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --debug -lCN C:\Users\Suddenlink\Dropbox\git_files\embed #
#                    ded_design\project1\GPSSim-G14\Debug\List\ -I            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14/applilet3_src/\ -I                     #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14/Glyph/\ -I                             #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14/Glyph/Drivers/\ -I                     #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14/user_include/\ -I                      #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14/RTC/\                                  #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14\Debug\List\gpssim.lst                  #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\GPSSim-G14\Debug\Obj\gpssim.r87                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\project1\GPSSim-G14\user_src\gpssim.c
      1          #include "gpssim.h"
      2          #include "r_cg_macrodriver.h"
      3          #include "r_cg_port.h"
      4          #include "r_cg_serial.h"
      5          #include "r_cg_adc.h"
      6          #include "lcd.h"
      7          #include "stdio.h"
      8          #include "string.h"
      9          #include "r_cg_userdefine.h"
     10          
     11          extern volatile uint8_t G_UART_SendingData, G_UART_ReceivingData;
     12          

   \                                 In  segment NEAR_Z, align 2, align-sorted
     13          char msg[128];
   \                     msg:
   \   000000                       DS 128
   \   000080                       REQUIRE __INIT_NEAR_Z
     14          

   \                                 In  segment CODE, align 1, keep-with-next
     15          uint8_t checksum(char *s) {
   \                     checksum:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
     16              uint8_t c = 0;
   \   000002 F0                    CLRB      X                  ;; 1 cycle
   \   000003 EF06                  BR        S:??sim_motion_0   ;; 3 cycles
   \   000005                       ; ------------------------------------- Block: 6 cycles
     17          
     18              while(*s)
     19                  c ^= *s++;
   \                     ??checksum_0:
   \   000005 73                    MOV       B, A               ;; 1 cycle
   \   000006 60                    MOV       A, X               ;; 1 cycle
   \   000007 617B                  XOR       A, B               ;; 1 cycle
   \   000009 70                    MOV       X, A               ;; 1 cycle
   \   00000A A7                    INCW      HL                 ;; 1 cycle
   \   00000B                       ; ------------------------------------- Block: 5 cycles
   \                     ??sim_motion_0:
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C D1                    CMP0      A                  ;; 1 cycle
   \   00000D DFF6                  BNZ       ??checksum_0       ;; 4 cycles
   \   00000F                       ; ------------------------------------- Block: 6 cycles
     20          
     21              return c;
   \   00000F 60                    MOV       A, X               ;; 1 cycle
   \   000010 C2                    POP       BC                 ;; 1 cycle
   \   000011 D7                    RET                          ;; 6 cycles
   \   000012                       ; ------------------------------------- Block: 8 cycles
   \   000012                       ; ------------------------------------- Total: 25 cycles
   \   000012                       REQUIRE ?CLRL78_V1_0_L00
     22          }
     23          

   \                                 In  segment CODE, align 1, keep-with-next
     24          void create_GLL_msg(char * buffer, int lat_deg, float lat_min, int lon_deg, float lon_min, unsigned
   \                     create_GLL_msg:
     25          hr, unsigned min, unsigned sec) {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 14
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 12
   \   000002 2008                  SUBW      SP, #0x8           ;; 1 cycle
     26          	uint8_t cs=0;
     27          	char end[8];
     28          
     29          	// form message
     30          	sprintf(buffer, "$GPGLL,%02d%06.3f,N,%03d%06.3f,W,%02d%02d%02d,A,*", lat_deg, lat_min, lon_deg, lon_min,
     31          	hr, min, sec);
   \   000004 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000006 C1                    PUSH      AX                 ;; 1 cycle
   \   000007 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000009 C1                    PUSH      AX                 ;; 1 cycle
   \   00000A A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00000C C1                    PUSH      AX                 ;; 1 cycle
   \   00000D A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00000F 12                    MOVW      BC, AX             ;; 1 cycle
   \   000010 A81A                  MOVW      AX, [SP+0x1A]      ;; 1 cycle
   \   000012 C3                    PUSH      BC                 ;; 1 cycle
   \   000013 C1                    PUSH      AX                 ;; 1 cycle
   \   000014 C5                    PUSH      DE                 ;; 1 cycle
   \   000015 A81E                  MOVW      AX, [SP+0x1E]      ;; 1 cycle
   \   000017 12                    MOVW      BC, AX             ;; 1 cycle
   \   000018 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   00001A C3                    PUSH      BC                 ;; 1 cycle
   \   00001B C1                    PUSH      AX                 ;; 1 cycle
   \   00001C A818                  MOVW      AX, [SP+0x18]      ;; 1 cycle
   \   00001E C1                    PUSH      AX                 ;; 1 cycle
   \   00001F 32....                MOVW      BC, #`?<Constant "$GPGLL,%02d%06.3f,N,%...">`  ;; 1 cycle
   \   000022 A81C                  MOVW      AX, [SP+0x1C]      ;; 1 cycle
   \   000024 FD....                CALL      sprintf            ;; 3 cycles
   \   000027 1012                  ADDW      SP, #0x12          ;; 1 cycle
     32          
     33          	// form checksum
     34          	cs = checksum(buffer);
   \   000029 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00002B FD....                CALL      checksum           ;; 3 cycles
     35          
     36          	// undo effects of exoring in start $ and end *
     37          	cs ^= '$' ^ '*';
     38          
     39          	sprintf(end, "%02X\n\r", cs);
   \   00002E 7C0E                  XOR       A, #0xE            ;; 1 cycle
   \   000030 70                    MOV       X, A               ;; 1 cycle
   \   000031 F1                    CLRB      A                  ;; 1 cycle
   \   000032 C1                    PUSH      AX                 ;; 1 cycle
   \   000033 32....                MOVW      BC, #`?<Constant "%02X\\n\\r">`  ;; 1 cycle
   \   000036 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000038 A1                    INCW      AX                 ;; 1 cycle
   \   000039 A1                    INCW      AX                 ;; 1 cycle
   \   00003A FD....                CALL      sprintf            ;; 3 cycles
     40          	strcat(buffer, end);
   \   00003D DBF8FF                MOVW      BC, SP             ;; 1 cycle
   \   000040 A3                    INCW      BC                 ;; 1 cycle
   \   000041 A3                    INCW      BC                 ;; 1 cycle
   \   000042 A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000044 FD....                CALL      strcat             ;; 3 cycles
     41          }
   \   000047 100E                  ADDW      SP, #0xE           ;; 1 cycle
   \   000049 FD....                CALL      N:?FUNC_LEAVE_L06
   \   00004C 0E00                  DW        0xE                ;; 3 cycles
   \   00004E                       ; ------------------------------------- Block: 54 cycles
   \   00004E                       ; ------------------------------------- Total: 54 cycles
   \   00004E                       REQUIRE ?CLRL78_V1_0_L00
     42          

   \                                 In  segment CODE, align 1, keep-with-next
     43          void create_RMC_msg(char * buffer, int lat_deg, float lat_min, int lon_deg, float lon_min, unsigned
   \                     create_RMC_msg:
     44          hr, unsigned min, unsigned sec, float speed, float track, uint32_t date, float var) {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 30
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 12
   \   000002 2008                  SUBW      SP, #0x8           ;; 1 cycle
     45          	uint8_t cs=0;
     46          	char end[8];
     47          
     48          	// form message
     49          	sprintf(buffer, "$GPRMC,%02d%02d%02d,A,%02d%06.3f,N,%03d%06.3f,W,%05.1f,%04.1f,%06ld,%05.1f,W*",
     50          					hr, min, sec, lat_deg, lat_min, lon_deg, lon_min, speed, track, date, var);
   \   000004 A82C                  MOVW      AX, [SP+0x2C]      ;; 1 cycle
   \   000006 12                    MOVW      BC, AX             ;; 1 cycle
   \   000007 A82A                  MOVW      AX, [SP+0x2A]      ;; 1 cycle
   \   000009 C3                    PUSH      BC                 ;; 1 cycle
   \   00000A C1                    PUSH      AX                 ;; 1 cycle
   \   00000B A82C                  MOVW      AX, [SP+0x2C]      ;; 1 cycle
   \   00000D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00000E A82A                  MOVW      AX, [SP+0x2A]      ;; 1 cycle
   \   000010 C3                    PUSH      BC                 ;; 1 cycle
   \   000011 C1                    PUSH      AX                 ;; 1 cycle
   \   000012 A82C                  MOVW      AX, [SP+0x2C]      ;; 1 cycle
   \   000014 12                    MOVW      BC, AX             ;; 1 cycle
   \   000015 A82A                  MOVW      AX, [SP+0x2A]      ;; 1 cycle
   \   000017 C3                    PUSH      BC                 ;; 1 cycle
   \   000018 C1                    PUSH      AX                 ;; 1 cycle
   \   000019 A82C                  MOVW      AX, [SP+0x2C]      ;; 1 cycle
   \   00001B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00001C A82A                  MOVW      AX, [SP+0x2A]      ;; 1 cycle
   \   00001E C3                    PUSH      BC                 ;; 1 cycle
   \   00001F C1                    PUSH      AX                 ;; 1 cycle
   \   000020 A826                  MOVW      AX, [SP+0x26]      ;; 1 cycle
   \   000022 12                    MOVW      BC, AX             ;; 1 cycle
   \   000023 A824                  MOVW      AX, [SP+0x24]      ;; 1 cycle
   \   000025 C3                    PUSH      BC                 ;; 1 cycle
   \   000026 C1                    PUSH      AX                 ;; 1 cycle
   \   000027 C5                    PUSH      DE                 ;; 1 cycle
   \   000028 A828                  MOVW      AX, [SP+0x28]      ;; 1 cycle
   \   00002A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00002B A826                  MOVW      AX, [SP+0x26]      ;; 1 cycle
   \   00002D C3                    PUSH      BC                 ;; 1 cycle
   \   00002E C1                    PUSH      AX                 ;; 1 cycle
   \   00002F A822                  MOVW      AX, [SP+0x22]      ;; 1 cycle
   \   000031 C1                    PUSH      AX                 ;; 1 cycle
   \   000032 A838                  MOVW      AX, [SP+0x38]      ;; 1 cycle
   \   000034 C1                    PUSH      AX                 ;; 1 cycle
   \   000035 A838                  MOVW      AX, [SP+0x38]      ;; 1 cycle
   \   000037 C1                    PUSH      AX                 ;; 1 cycle
   \   000038 A838                  MOVW      AX, [SP+0x38]      ;; 1 cycle
   \   00003A C1                    PUSH      AX                 ;; 1 cycle
   \   00003B 32....                MOVW      BC, #`?<Constant "$GPRMC,%02d%02d%02d,A...">`  ;; 1 cycle
   \   00003E A82C                  MOVW      AX, [SP+0x2C]      ;; 1 cycle
   \   000040 FD....                CALL      sprintf            ;; 3 cycles
   \   000043 1022                  ADDW      SP, #0x22          ;; 1 cycle
     51          
     52          	// form checksum
     53          	cs = checksum(buffer);
   \   000045 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000047 FD....                CALL      checksum           ;; 3 cycles
     54          
     55          	// undo effects of exoring in start $ and end *
     56          	cs ^= '$' ^ '*';
     57          
     58          
     59          	sprintf(end, "%02X\n\r", cs);
   \   00004A 7C0E                  XOR       A, #0xE            ;; 1 cycle
   \   00004C 70                    MOV       X, A               ;; 1 cycle
   \   00004D F1                    CLRB      A                  ;; 1 cycle
   \   00004E C1                    PUSH      AX                 ;; 1 cycle
   \   00004F 32....                MOVW      BC, #`?<Constant "%02X\\n\\r">`  ;; 1 cycle
   \   000052 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000054 A1                    INCW      AX                 ;; 1 cycle
   \   000055 A1                    INCW      AX                 ;; 1 cycle
   \   000056 FD....                CALL      sprintf            ;; 3 cycles
     60          	strcat(buffer, end);
   \   000059 DBF8FF                MOVW      BC, SP             ;; 1 cycle
   \   00005C A3                    INCW      BC                 ;; 1 cycle
   \   00005D A3                    INCW      BC                 ;; 1 cycle
   \   00005E A80C                  MOVW      AX, [SP+0x0C]      ;; 1 cycle
   \   000060 FD....                CALL      strcat             ;; 3 cycles
     61          }
   \   000063 100E                  ADDW      SP, #0xE           ;; 1 cycle
   \   000065 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000068 1E00                  DW        0x1E               ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 74 cycles
   \   00006A                       ; ------------------------------------- Total: 74 cycles
   \   00006A                       REQUIRE ?CLRL78_V1_0_L00
     62          
     63          

   \                                 In  segment CODE, align 1, keep-with-next
     64          void inc_time(unsigned * hours, unsigned * minutes, unsigned * seconds) {
   \                     inc_time:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001                       ; Auto size: 2
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 C6                    POP       HL                 ;; 1 cycle
     65          	(*seconds)++;
   \   000003 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000004 A1                    INCW      AX                 ;; 1 cycle
   \   000005 B9                    MOVW      [DE], AX           ;; 1 cycle
     66          	if (*seconds > 59) {
   \   000006 443C00                CMPW      AX, #0x3C          ;; 1 cycle
   \   000009 DC16                  BC        ??sim_motion_1     ;; 4 cycles
   \   00000B                       ; ------------------------------------- Block: 11 cycles
     67          		*seconds -= 60;
   \   00000B 04C4FF                ADDW      AX, #0xFFC4        ;; 1 cycle
   \   00000E B9                    MOVW      [DE], AX           ;; 1 cycle
     68          		(*minutes)++;
   \   00000F AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000010 A1                    INCW      AX                 ;; 1 cycle
   \   000011 BB                    MOVW      [HL], AX           ;; 1 cycle
     69          		if (*minutes > 59) {
   \   000012 443C00                CMPW      AX, #0x3C          ;; 1 cycle
   \   000015 DC0A                  BC        ??sim_motion_1     ;; 4 cycles
   \   000017                       ; ------------------------------------- Block: 10 cycles
     70          			*minutes -= 60;
   \   000017 04C4FF                ADDW      AX, #0xFFC4        ;; 1 cycle
   \   00001A BB                    MOVW      [HL], AX           ;; 1 cycle
     71          			(*hours)++;
   \   00001B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001E A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00001F A1                    INCW      AX                 ;; 1 cycle
   \   000020 B9                    MOVW      [DE], AX           ;; 1 cycle
   \   000021                       ; ------------------------------------- Block: 7 cycles
     72          		}
     73          	}
     74          }
   \                     ??sim_motion_1:
   \   000021 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000023 D7                    RET                          ;; 6 cycles
   \   000024                       ; ------------------------------------- Block: 7 cycles
   \   000024                       ; ------------------------------------- Total: 35 cycles
   \   000024                       REQUIRE ?CLRL78_V1_0_L00
     75          

   \                                 In  segment CODE, align 1, keep-with-next
     76          void sim_motion(void) {
   \                     sim_motion:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
     77          	static int16_t i, lat_deg = 35, lon_deg = 78;
     78          	static uint32_t date=22213;
     79          	static float lat_min = 1.1, lon_min = 2.6, lat_step=0.011, lon_step=0.025;
     80          	static float spd=1.2, trk=180.0, var=0.0;
     81          
     82          	static unsigned h=0, m=0, s=0, ctr=0;
     83          
     84          	LCDPrintf(1,0, "GPSSimulator");
   \   000002 34....                MOVW      DE, #`?<Constant "GPSSimulator">`  ;; 1 cycle
   \   000005 F3                    CLRB      B                  ;; 1 cycle
   \   000006 E1                    ONEB      A                  ;; 1 cycle
   \   000007 FD....                CALL      LCDPrintf          ;; 3 cycles
     85          	LCDPrintf(2,0, "deg minutes");
   \   00000A 34....                MOVW      DE, #`?<Constant "deg minutes">`  ;; 1 cycle
   \   00000D F3                    CLRB      B                  ;; 1 cycle
   \   00000E 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000010 FD....                CALL      LCDPrintf          ;; 3 cycles
     86          
     87          	LCDPrintf(3,0, "%03d %06.3f", lat_deg, lat_min);
   \   000013 AF....                MOVW      AX, N:??lat_min+2  ;; 1 cycle
   \   000016 C1                    PUSH      AX                 ;; 1 cycle
   \   000017 AF....                MOVW      AX, N:??lat_min    ;; 1 cycle
   \   00001A C1                    PUSH      AX                 ;; 1 cycle
   \   00001B AF....                MOVW      AX, N:??lat_deg    ;; 1 cycle
   \   00001E C1                    PUSH      AX                 ;; 1 cycle
   \   00001F 34....                MOVW      DE, #`?<Constant "%03d %06.3f">`  ;; 1 cycle
   \   000022 F3                    CLRB      B                  ;; 1 cycle
   \   000023 5103                  MOV       A, #0x3            ;; 1 cycle
   \   000025 FD....                CALL      LCDPrintf          ;; 3 cycles
     88          	LCDPrintf(4,0, "%03d %06.3f", lon_deg, lon_min);
   \   000028 AF....                MOVW      AX, N:??lon_min+2  ;; 1 cycle
   \   00002B C1                    PUSH      AX                 ;; 1 cycle
   \   00002C AF....                MOVW      AX, N:??lon_min    ;; 1 cycle
   \   00002F C1                    PUSH      AX                 ;; 1 cycle
   \   000030 AF....                MOVW      AX, N:??lon_deg    ;; 1 cycle
   \   000033 C1                    PUSH      AX                 ;; 1 cycle
   \   000034 34....                MOVW      DE, #`?<Constant "%03d %06.3f">`  ;; 1 cycle
   \   000037 F3                    CLRB      B                  ;; 1 cycle
   \   000038 5104                  MOV       A, #0x4            ;; 1 cycle
   \   00003A FD....                CALL      LCDPrintf          ;; 3 cycles
     89          	LCDPrintf(5,0, "%02d:%02d:%02d", h, m, s);
   \   00003D AF....                MOVW      AX, N:??s          ;; 1 cycle
   \   000040 C1                    PUSH      AX                 ;; 1 cycle
   \   000041 AF....                MOVW      AX, N:??m          ;; 1 cycle
   \   000044 C1                    PUSH      AX                 ;; 1 cycle
   \   000045 AF....                MOVW      AX, N:??h          ;; 1 cycle
   \   000048 C1                    PUSH      AX                 ;; 1 cycle
   \   000049 34....                MOVW      DE, #`?<Constant "%02d:%02d:%02d">`  ;; 1 cycle
   \   00004C F3                    CLRB      B                  ;; 1 cycle
   \   00004D 5105                  MOV       A, #0x5            ;; 1 cycle
   \   00004F FD....                CALL      LCDPrintf          ;; 3 cycles
   \   000052 1012                  ADDW      SP, #0x12          ;; 1 cycle
     90          	LCDPrintf(6,0, "%4d msgs", ctr);
   \   000054 AF....                MOVW      AX, N:??ctr        ;; 1 cycle
   \   000057 C1                    PUSH      AX                 ;; 1 cycle
   \   000058 34....                MOVW      DE, #`?<Constant "%4d msgs">`  ;; 1 cycle
   \   00005B F3                    CLRB      B                  ;; 1 cycle
   \   00005C 5106                  MOV       A, #0x6            ;; 1 cycle
   \   00005E FD....                CALL      LCDPrintf          ;; 3 cycles
     91          
     92          	create_RMC_msg(msg, lat_deg, lat_min, lon_deg, lon_min, h, m, s, spd, trk, date, var);
   \   000061 AF....                MOVW      AX, N:??var+2      ;; 1 cycle
   \   000064 C1                    PUSH      AX                 ;; 1 cycle
   \   000065 AF....                MOVW      AX, N:??var        ;; 1 cycle
   \   000068 C1                    PUSH      AX                 ;; 1 cycle
   \   000069 AF....                MOVW      AX, N:??date+2     ;; 1 cycle
   \   00006C C1                    PUSH      AX                 ;; 1 cycle
   \   00006D AF....                MOVW      AX, N:??date       ;; 1 cycle
   \   000070 C1                    PUSH      AX                 ;; 1 cycle
   \   000071 AF....                MOVW      AX, N:??trk+2      ;; 1 cycle
   \   000074 C1                    PUSH      AX                 ;; 1 cycle
   \   000075 AF....                MOVW      AX, N:??trk        ;; 1 cycle
   \   000078 C1                    PUSH      AX                 ;; 1 cycle
   \   000079 AF....                MOVW      AX, N:??spd+2      ;; 1 cycle
   \   00007C C1                    PUSH      AX                 ;; 1 cycle
   \   00007D AF....                MOVW      AX, N:??spd        ;; 1 cycle
   \   000080 C1                    PUSH      AX                 ;; 1 cycle
   \   000081 AF....                MOVW      AX, N:??s          ;; 1 cycle
   \   000084 C1                    PUSH      AX                 ;; 1 cycle
   \   000085 AF....                MOVW      AX, N:??m          ;; 1 cycle
   \   000088 C1                    PUSH      AX                 ;; 1 cycle
   \   000089 AF....                MOVW      AX, N:??h          ;; 1 cycle
   \   00008C C1                    PUSH      AX                 ;; 1 cycle
   \   00008D AF....                MOVW      AX, N:??lon_min+2  ;; 1 cycle
   \   000090 C1                    PUSH      AX                 ;; 1 cycle
   \   000091 AF....                MOVW      AX, N:??lon_min    ;; 1 cycle
   \   000094 C1                    PUSH      AX                 ;; 1 cycle
   \   000095 AF....                MOVW      AX, N:??lat_min+2  ;; 1 cycle
   \   000098 C1                    PUSH      AX                 ;; 1 cycle
   \   000099 AF....                MOVW      AX, N:??lat_min    ;; 1 cycle
   \   00009C C1                    PUSH      AX                 ;; 1 cycle
   \   00009D EB....                MOVW      DE, N:??lon_deg    ;; 1 cycle
   \   0000A0 DB....                MOVW      BC, N:??lat_deg    ;; 1 cycle
   \   0000A3 30....                MOVW      AX, #msg           ;; 1 cycle
   \   0000A6 FD....                CALL      create_RMC_msg     ;; 3 cycles
     93          	G_UART_SendingData = 1;
   \   0000A9 E5....                ONEB      N:G_UART_SendingData  ;; 1 cycle
     94          	R_UART1_Send((uint8_t *) msg, strlen(msg));
   \   0000AC 30....                MOVW      AX, #msg           ;; 1 cycle
   \   0000AF FD....                CALL      strlen             ;; 3 cycles
   \   0000B2 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B3 30....                MOVW      AX, #msg           ;; 1 cycle
   \   0000B6 FD....                CALL      R_UART1_Send       ;; 3 cycles
     95          
     96          	// update variables and LCD
     97          	lat_min += lat_step;
   \   0000B9 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   0000BB AF....                MOVW      AX, N:??lat_step+2  ;; 1 cycle
   \   0000BE C1                    PUSH      AX                 ;; 1 cycle
   \   0000BF AF....                MOVW      AX, N:??lat_step   ;; 1 cycle
   \   0000C2 C1                    PUSH      AX                 ;; 1 cycle
   \   0000C3 DB....                MOVW      BC, N:??lat_min+2  ;; 1 cycle
   \   0000C6 AF....                MOVW      AX, N:??lat_min    ;; 1 cycle
   \   0000C9 FD....                CALL      N:?F_ADD           ;; 3 cycles
   \   0000CC BF....                MOVW      N:??lat_min, AX    ;; 1 cycle
   \   0000CF 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000D0 BF....                MOVW      N:??lat_min+2, AX  ;; 1 cycle
     98          	lon_min += lon_step;
   \   0000D3 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000D5 AF....                MOVW      AX, N:??lon_step+2  ;; 1 cycle
   \   0000D8 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D9 AF....                MOVW      AX, N:??lon_step   ;; 1 cycle
   \   0000DC C1                    PUSH      AX                 ;; 1 cycle
   \   0000DD DB....                MOVW      BC, N:??lon_min+2  ;; 1 cycle
   \   0000E0 AF....                MOVW      AX, N:??lon_min    ;; 1 cycle
   \   0000E3 FD....                CALL      N:?F_ADD           ;; 3 cycles
   \   0000E6 BF....                MOVW      N:??lon_min, AX    ;; 1 cycle
   \   0000E9 13                    MOVW      AX, BC             ;; 1 cycle
   \   0000EA BF....                MOVW      N:??lon_min+2, AX  ;; 1 cycle
     99          	ctr += 1;
   \   0000ED A2....                INCW      N:??ctr            ;; 2 cycles
    100          	inc_time(&h, &m, &s);
   \   0000F0 34....                MOVW      DE, #??s           ;; 1 cycle
   \   0000F3 32....                MOVW      BC, #??m           ;; 1 cycle
   \   0000F6 30....                MOVW      AX, #??h           ;; 1 cycle
   \   0000F9 FD....                CALL      inc_time           ;; 3 cycles
    101          
    102          
    103          #if 0	// delay between sentences unless user is pressing switch 3
    104          	if (SW_3 == 1) {
    105          		for (dly=0; dly<600000; dly++) {
    106          			if (SW_3 == 0) // abandon delay immediately
    107          				break;
    108          			;
    109          		}
    110          	}
    111          #endif
    112          
    113            if (++i >= NUM_STEPS) {
   \   0000FC A2....                INCW      N:??i              ;; 2 cycles
   \   0000FF AF....                MOVW      AX, N:??i          ;; 1 cycle
   \   000102 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000104 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000106 446480                CMPW      AX, #0x8064        ;; 1 cycle
   \   000109 DC34                  BC        ??sim_motion_2     ;; 4 cycles
   \   00010B                       ; ------------------------------------- Block: 149 cycles
    114          		lat_step *= -1.0;
   \   00010B 3080BF                MOVW      AX, #0xBF80        ;; 1 cycle
   \   00010E C1                    PUSH      AX                 ;; 1 cycle
   \   00010F F6                    CLRW      AX                 ;; 1 cycle
   \   000110 C1                    PUSH      AX                 ;; 1 cycle
   \   000111 DB....                MOVW      BC, N:??lat_step+2  ;; 1 cycle
   \   000114 AF....                MOVW      AX, N:??lat_step   ;; 1 cycle
   \   000117 FD....                CALL      N:?F_MUL           ;; 3 cycles
   \   00011A BF....                MOVW      N:??lat_step, AX   ;; 1 cycle
   \   00011D 13                    MOVW      AX, BC             ;; 1 cycle
   \   00011E BF....                MOVW      N:??lat_step+2, AX  ;; 1 cycle
    115          		lon_step *= -1.0;
   \   000121 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000123 3080BF                MOVW      AX, #0xBF80        ;; 1 cycle
   \   000126 C1                    PUSH      AX                 ;; 1 cycle
   \   000127 F6                    CLRW      AX                 ;; 1 cycle
   \   000128 C1                    PUSH      AX                 ;; 1 cycle
   \   000129 DB....                MOVW      BC, N:??lon_step+2  ;; 1 cycle
   \   00012C AF....                MOVW      AX, N:??lon_step   ;; 1 cycle
   \   00012F FD....                CALL      N:?F_MUL           ;; 3 cycles
   \   000132 BF....                MOVW      N:??lon_step, AX   ;; 1 cycle
   \   000135 13                    MOVW      AX, BC             ;; 1 cycle
   \   000136 BF....                MOVW      N:??lon_step+2, AX  ;; 1 cycle
    116              i = 0;
   \   000139 F6                    CLRW      AX                 ;; 1 cycle
   \   00013A BF....                MOVW      N:??i, AX          ;; 1 cycle
   \   00013D 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00013F                       ; ------------------------------------- Block: 28 cycles
    117          	}
    118          }
   \                     ??sim_motion_2:
   \   00013F C4                    POP       DE                 ;; 1 cycle
   \   000140 C2                    POP       BC                 ;; 1 cycle
   \   000141 D7                    RET                          ;; 6 cycles
   \   000142                       ; ------------------------------------- Block: 8 cycles
   \   000142                       ; ------------------------------------- Total: 185 cycles
   \   000142                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??i:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lat_deg:
   \   000000                       DS 2
   \   000002                       REQUIRE `?<Initializer for lat_deg>`
   \   000002                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lon_deg:
   \   000000                       DS 2
   \   000002                       REQUIRE `?<Initializer for lon_deg>`
   \   000002                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??date:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for date>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lat_min:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for lat_min>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lon_min:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for lon_min>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lat_step:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for lat_step>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??lon_step:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for lon_step>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??spd:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for spd>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
   \                     ??trk:
   \   000000                       DS 4
   \   000004                       REQUIRE `?<Initializer for trk>`
   \   000004                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??var:
   \   000000                       DS 4
   \   000004                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??h:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??m:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??s:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     ??ctr:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lat_deg>`:
   \   000000 2300                  DW 35

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lon_deg>`:
   \   000000 4E00                  DW 78

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for date>`:
   \   000000 C5560000              DD 22213

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lat_min>`:
   \   000000 CDCC8C3F              DD 3F8CCCCDH

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lon_min>`:
   \   000000 66662640              DD 40266666H

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lat_step>`:
   \   000000 5839343C              DD 3C343958H

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for lon_step>`:
   \   000000 CDCCCC3C              DD 3CCCCCCDH

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for spd>`:
   \   000000 9A99993F              DD 3F99999AH

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for trk>`:
   \   000000 00003443              DD 43340000H

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "$GPGLL,%02d%06.3f,N,%...">`:
   \   000000 244750474C4C          DB "$GPGLL,%02d%06.3f,N,%03d%06.3f,W,%02d%02d%02d,A,*"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%02X\\n\\r">`:
   \   000000 253032580A0D          DB "%02X\012\015"
   \   000007 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "$GPRMC,%02d%02d%02d,A...">`:
   \   000000 244750524D43          DB 24H, 47H, 50H, 52H, 4DH, 43H, 2CH, 25H
   \   000008 303264253032          DB 30H, 32H, 64H, 25H, 30H, 32H, 64H, 25H
   \   000010 3032642C412C          DB 30H, 32H, 64H, 2CH, 41H, 2CH, 25H, 30H
   \   000018 32642530362E          DB 32H, 64H, 25H, 30H, 36H, 2EH, 33H, 66H
   \   000020 2C4E2C253033          DB 2CH, 4EH, 2CH, 25H, 30H, 33H, 64H, 25H
   \   000028 30362E33662C          DB 30H, 36H, 2EH, 33H, 66H, 2CH, 57H, 2CH
   \   000030 2530352E3166          DB 25H, 30H, 35H, 2EH, 31H, 66H, 2CH, 25H
   \   000038 30342E31662C          DB 30H, 34H, 2EH, 31H, 66H, 2CH, 25H, 30H
   \   000040 366C642C2530          DB 36H, 6CH, 64H, 2CH, 25H, 30H, 35H, 2EH
   \   000048 31662C572A00          DB 31H, 66H, 2CH, 57H, 2AH, 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "GPSSimulator">`:
   \   000000 47505353696D          DB "GPSSimulator"
   \   00000D 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "deg minutes">`:
   \   000000 646567206D69          DB "deg minutes"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%03d %06.3f">`:
   \   000000 253033642025          DB "%03d %06.3f"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%02d:%02d:%02d">`:
   \   000000 253032643A25          DB "%02d:%02d:%02d"
   \   00000F 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%4d msgs">`:
   \   000000 253464206D73          DB "%4d msgs"
   \   000009 00                    DB 0
    119          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   checksum
     44   create_GLL_msg
       12   -> checksum
       14   -> sprintf
       30   -> sprintf
       14   -> strcat
     76   create_RMC_msg
       12   -> checksum
       14   -> sprintf
       46   -> sprintf
       14   -> strcat
      2   inc_time
     36   sim_motion
       10   -> LCDPrintf
       16   -> LCDPrintf
       22   -> LCDPrintf
        4   -> LCDPrintf
        6   -> LCDPrintf
        6   -> R_UART1_Send
       36   -> create_RMC_msg
        8   -> inc_time
        6   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      50  ?<Constant "$GPGLL,%02d%06.3f,N,%...">
      78  ?<Constant "$GPRMC,%02d%02d%02d,A...">
       8  ?<Constant "%02X\n\r">
      16  ?<Constant "%02d:%02d:%02d">
      12  ?<Constant "%03d %06.3f">
      10  ?<Constant "%4d msgs">
      14  ?<Constant "GPSSimulator">
      12  ?<Constant "deg minutes">
       4  ?<Initializer for date>
       2  ?<Initializer for lat_deg>
       4  ?<Initializer for lat_min>
       4  ?<Initializer for lat_step>
       2  ?<Initializer for lon_deg>
       4  ?<Initializer for lon_min>
       4  ?<Initializer for lon_step>
       4  ?<Initializer for spd>
       4  ?<Initializer for trk>
      18  checksum
      78  create_GLL_msg
     106  create_RMC_msg
       2  ctr
       4  date
       2  h
       2  i
      36  inc_time
       2  lat_deg
       4  lat_min
       4  lat_step
       2  lon_deg
       4  lon_min
       4  lon_step
       2  m
     128  msg
       2  s
     322  sim_motion
       4  spd
       4  trk
       4  var

 
 560 bytes in segment CODE
 200 bytes in segment NEAR_CONST
  32 bytes in segment NEAR_I
  32 bytes in segment NEAR_ID
 142 bytes in segment NEAR_Z
 
 560 bytes of CODE  memory
 232 bytes of CONST memory
 174 bytes of DATA  memory

Errors: none
Warnings: none
