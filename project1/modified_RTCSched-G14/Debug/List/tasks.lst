###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             22/Feb/2014  23:21:44 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\user_src\tasks.c            #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\user_src\tasks.c --core     #
#                    rl78_2 --code_model near --data_model near               #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --debug -lCN C:\Users\Suddenlink\Dropbox\git_files\embed #
#                    ded_design\project1\modified_RTCSched-G14\Debug\List\    #
#                    -I C:\Users\Suddenlink\Dropbox\git_files\embedded_design #
#                    \project1\modified_RTCSched-G14/applilet3_src/\ -I       #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Glyph/\ -I                  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Glyph/Drivers/\ -I          #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/user_include/\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/RTC/\ -I                    #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Queu/\                      #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\List\tasks.lst        #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\Obj\tasks.r87         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\project1\modified_RTCSched-G14\user_src\tasks.c
      1          #include "r_cg_macrodriver.h"

   \                                 In  segment SADDR_A, at 0xfff04
   \   union <unnamed> volatile __saddr _A_P4
   \                     _A_P4:
   \   000000                       DS 1
      2          #include "r_cg_userdefine.h"
      3          
      4          #include "rtc_sched.h"
      5          #include "lcd.h"
      6          #include "r_cg_serial.h"
      7          #include "queu.h"
      8          #include "tasks.h"
      9          
     10          extern Q_T  rx_q;      //recieve queu

   \                                 In  segment NEAR_Z, align 2, align-sorted
     11           var_NMEA gps_message;
   \                     gps_message:
   \   000000                       DS 62
   \   00003E                       REQUIRE __INIT_NEAR_Z
     12          
     13          //Task_GPS_Update_LCD

   \                                 In  segment CODE, align 1, keep-with-next
     14          void Task1(void) {
   \                     Task1:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
     15          	static char led_state=0;
     16                  
     17                  int deg = 0;
     18                  float min = 0;
     19                  int h=0;
     20                  int m=0;
     21                  int s=0;
     22                  
     23          	LED_4_G = led_state;
   \   000003 8F....                MOV       A, N:??led_state   ;; 1 cycle
   \   000006 9800                  MOV       [SP], A            ;; 1 cycle
   \   000008 36....                MOVW      HL, #??led_state   ;; 1 cycle
   \   00000B 718C                  MOV1      CY, A.0            ;; 1 cycle
   \   00000D 712104                MOV1      S:0xFFF04.2, CY    ;; 2 cycles
     24          	led_state ^= 1;
   \   000010 E1                    ONEB      A                  ;; 1 cycle
   \   000011 7D                    XOR       A, [HL]            ;; 1 cycle
   \   000012 9B                    MOV       [HL], A            ;; 1 cycle
     25                  
     26                  //lat
     27                  deg = (int)(gps_message.lat_num/100);
   \   000013 30C842                MOVW      AX, #0x42C8        ;; 1 cycle
   \   000016 C1                    PUSH      AX                 ;; 1 cycle
   \   000017 F6                    CLRW      AX                 ;; 1 cycle
   \   000018 C1                    PUSH      AX                 ;; 1 cycle
   \   000019 DB....                MOVW      BC, N:gps_message+18  ;; 1 cycle
   \   00001C AF....                MOVW      AX, N:gps_message+16  ;; 1 cycle
   \   00001F FD....                CALL      N:?F_DIV           ;; 3 cycles
   \   000022 FD....                CALL      N:?F_F2SL          ;; 3 cycles
   \   000025 16                    MOVW      HL, AX             ;; 1 cycle
     28                  min = (float)(gps_message.lat_num - deg*100);
     29                  LCDPrintf(4,0,"%03d %06.3f %c",deg,min,gps_message.lat_dir);
   \   000026 8F....                MOV       A, N:gps_message+22  ;; 1 cycle
   \   000029 70                    MOV       X, A               ;; 1 cycle
   \   00002A F1                    CLRB      A                  ;; 1 cycle
   \   00002B C1                    PUSH      AX                 ;; 1 cycle
   \   00002C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00002D 326400                MOVW      BC, #0x64          ;; 1 cycle
   \   000030 CEFB01                MULHU                        ;; 2 cycles
   \   000033 12                    MOVW      BC, AX             ;; 1 cycle
   \   000034 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   000036 33                    XCHW      AX, BC             ;; 1 cycle
   \   000037 FD....                CALL      N:?F_SL2F          ;; 3 cycles
   \   00003A C3                    PUSH      BC                 ;; 1 cycle
   \   00003B C1                    PUSH      AX                 ;; 1 cycle
   \   00003C DB....                MOVW      BC, N:gps_message+18  ;; 1 cycle
   \   00003F AF....                MOVW      AX, N:gps_message+16  ;; 1 cycle
   \   000042 FD....                CALL      N:?F_SUB           ;; 3 cycles
   \   000045 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000047 C3                    PUSH      BC                 ;; 1 cycle
   \   000048 C1                    PUSH      AX                 ;; 1 cycle
   \   000049 C7                    PUSH      HL                 ;; 1 cycle
   \   00004A 34....                MOVW      DE, #`?<Constant "%03d %06.3f %c">`  ;; 1 cycle
   \   00004D F3                    CLRB      B                  ;; 1 cycle
   \   00004E 5104                  MOV       A, #0x4            ;; 1 cycle
   \   000050 FD....                CALL      LCDPrintf          ;; 3 cycles
     30                  
     31                  //long
     32                  deg = (int)(gps_message.long_num/100);
   \   000053 100C                  ADDW      SP, #0xC           ;; 1 cycle
   \   000055 30C842                MOVW      AX, #0x42C8        ;; 1 cycle
   \   000058 C1                    PUSH      AX                 ;; 1 cycle
   \   000059 F6                    CLRW      AX                 ;; 1 cycle
   \   00005A C1                    PUSH      AX                 ;; 1 cycle
   \   00005B DB....                MOVW      BC, N:gps_message+26  ;; 1 cycle
   \   00005E AF....                MOVW      AX, N:gps_message+24  ;; 1 cycle
   \   000061 FD....                CALL      N:?F_DIV           ;; 3 cycles
   \   000064 FD....                CALL      N:?F_F2SL          ;; 3 cycles
   \   000067 16                    MOVW      HL, AX             ;; 1 cycle
     33                  min = (float)(gps_message.long_num - deg*100);
     34                  LCDPrintf(5,0,"%03d %06.3f %c",deg,min,gps_message.long_dir);
   \   000068 8F....                MOV       A, N:gps_message+30  ;; 1 cycle
   \   00006B 70                    MOV       X, A               ;; 1 cycle
   \   00006C F1                    CLRB      A                  ;; 1 cycle
   \   00006D C1                    PUSH      AX                 ;; 1 cycle
   \   00006E 17                    MOVW      AX, HL             ;; 1 cycle
   \   00006F 326400                MOVW      BC, #0x64          ;; 1 cycle
   \   000072 CEFB01                MULHU                        ;; 2 cycles
   \   000075 12                    MOVW      BC, AX             ;; 1 cycle
   \   000076 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   000078 33                    XCHW      AX, BC             ;; 1 cycle
   \   000079 FD....                CALL      N:?F_SL2F          ;; 3 cycles
   \   00007C C3                    PUSH      BC                 ;; 1 cycle
   \   00007D C1                    PUSH      AX                 ;; 1 cycle
   \   00007E DB....                MOVW      BC, N:gps_message+26  ;; 1 cycle
   \   000081 AF....                MOVW      AX, N:gps_message+24  ;; 1 cycle
   \   000084 FD....                CALL      N:?F_SUB           ;; 3 cycles
   \   000087 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000089 C3                    PUSH      BC                 ;; 1 cycle
   \   00008A C1                    PUSH      AX                 ;; 1 cycle
   \   00008B C7                    PUSH      HL                 ;; 1 cycle
   \   00008C 34....                MOVW      DE, #`?<Constant "%03d %06.3f %c">`  ;; 1 cycle
   \   00008F F3                    CLRB      B                  ;; 1 cycle
   \   000090 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000092 FD....                CALL      LCDPrintf          ;; 3 cycles
     35                  
     36                  //speed
     37                  LCDPrintf(6,0,"%06.2f  kt",gps_message.speed);
   \   000095 AF....                MOVW      AX, N:gps_message+34  ;; 1 cycle
   \   000098 C1                    PUSH      AX                 ;; 1 cycle
   \   000099 AF....                MOVW      AX, N:gps_message+32  ;; 1 cycle
   \   00009C C1                    PUSH      AX                 ;; 1 cycle
   \   00009D 34....                MOVW      DE, #`?<Constant "%06.2f  kt">`  ;; 1 cycle
   \   0000A0 F3                    CLRB      B                  ;; 1 cycle
   \   0000A1 5106                  MOV       A, #0x6            ;; 1 cycle
   \   0000A3 FD....                CALL      LCDPrintf          ;; 3 cycles
   \   0000A6 1010                  ADDW      SP, #0x10          ;; 1 cycle
     38                  
     39                  //track
     40                  LCDPrintf(7,0,"%06.2f  T",gps_message.angle);
   \   0000A8 AF....                MOVW      AX, N:gps_message+40  ;; 1 cycle
   \   0000AB C1                    PUSH      AX                 ;; 1 cycle
   \   0000AC AF....                MOVW      AX, N:gps_message+38  ;; 1 cycle
   \   0000AF C1                    PUSH      AX                 ;; 1 cycle
   \   0000B0 34....                MOVW      DE, #`?<Constant "%06.2f  T">`  ;; 1 cycle
   \   0000B3 F3                    CLRB      B                  ;; 1 cycle
   \   0000B4 5107                  MOV       A, #0x7            ;; 1 cycle
   \   0000B6 FD....                CALL      LCDPrintf          ;; 3 cycles
     41                  
     42                  //time
     43                  h = (int)(gps_message.time/10000);
   \   0000B9 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000BB 301C46                MOVW      AX, #0x461C        ;; 1 cycle
   \   0000BE C1                    PUSH      AX                 ;; 1 cycle
   \   0000BF 300040                MOVW      AX, #0x4000        ;; 1 cycle
   \   0000C2 C1                    PUSH      AX                 ;; 1 cycle
   \   0000C3 FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   0000C6                       ; ------------------------------------- Block: 130 cycles
   \                     ??CrossCallReturnLabel_0:
   \   0000C6 FD....                CALL      N:?F_DIV           ;; 3 cycles
   \   0000C9 FD....                CALL      N:?F_F2SL          ;; 3 cycles
   \   0000CC 16                    MOVW      HL, AX             ;; 1 cycle
     44                  m = (int)((gps_message.time - h*10000)/100);
   \   0000CD 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000CF 30C842                MOVW      AX, #0x42C8        ;; 1 cycle
   \   0000D2 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D3 F6                    CLRW      AX                 ;; 1 cycle
   \   0000D4 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D5 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000D6 321027                MOVW      BC, #0x2710        ;; 1 cycle
   \   0000D9 CEFB01                MULHU                        ;; 2 cycles
   \   0000DC 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000DD 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   0000DF 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000E0 FD....                CALL      N:?F_SL2F          ;; 3 cycles
   \   0000E3 C3                    PUSH      BC                 ;; 1 cycle
   \   0000E4 C1                    PUSH      AX                 ;; 1 cycle
   \   0000E5 FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   0000E8                       ; ------------------------------------- Block: 27 cycles
   \                     ??CrossCallReturnLabel_1:
   \   0000E8 FD....                CALL      N:?F_SUB           ;; 3 cycles
   \   0000EB 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000ED FD....                CALL      N:?F_DIV           ;; 3 cycles
   \   0000F0 FD....                CALL      N:?F_F2SL          ;; 3 cycles
   \   0000F3 14                    MOVW      DE, AX             ;; 1 cycle
     45                  s = (int)(((gps_message.time - h*10000)-m*100)); 
     46                  LCDPrintf(8,0,"%02u:%02u:%02u",h,m,s);
   \   0000F4 326400                MOVW      BC, #0x64          ;; 1 cycle
   \   0000F7 CEFB01                MULHU                        ;; 2 cycles
   \   0000FA 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000FB 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   0000FD 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000FE FD....                CALL      N:?F_SL2F          ;; 3 cycles
   \   000101 C3                    PUSH      BC                 ;; 1 cycle
   \   000102 C1                    PUSH      AX                 ;; 1 cycle
   \   000103 17                    MOVW      AX, HL             ;; 1 cycle
   \   000104 321027                MOVW      BC, #0x2710        ;; 1 cycle
   \   000107 CEFB01                MULHU                        ;; 2 cycles
   \   00010A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00010B 31FF                  SARW      AX, 0xF            ;; 1 cycle
   \   00010D 33                    XCHW      AX, BC             ;; 1 cycle
   \   00010E FD....                CALL      N:?F_SL2F          ;; 3 cycles
   \   000111 C3                    PUSH      BC                 ;; 1 cycle
   \   000112 C1                    PUSH      AX                 ;; 1 cycle
   \   000113 FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   000116                       ; ------------------------------------- Block: 37 cycles
   \                     ??CrossCallReturnLabel_2:
   \   000116 FD....                CALL      N:?F_SUB           ;; 3 cycles
   \   000119 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00011B FD....                CALL      N:?F_SUB           ;; 3 cycles
   \   00011E FD....                CALL      N:?F_F2SL          ;; 3 cycles
   \   000121 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000123 C1                    PUSH      AX                 ;; 1 cycle
   \   000124 C5                    PUSH      DE                 ;; 1 cycle
   \   000125 C7                    PUSH      HL                 ;; 1 cycle
   \   000126 34....                MOVW      DE, #`?<Constant "%02u:%02u:%02u">`  ;; 1 cycle
   \   000129 F3                    CLRB      B                  ;; 1 cycle
   \   00012A 5108                  MOV       A, #0x8            ;; 1 cycle
   \   00012C FD....                CALL      LCDPrintf          ;; 3 cycles
     47          }
   \   00012F 100C                  ADDW      SP, #0xC           ;; 1 cycle
   \   000131 C4                    POP       DE                 ;; 1 cycle
   \   000132 C2                    POP       BC                 ;; 1 cycle
   \   000133 D7                    RET                          ;; 6 cycles
   \   000134                       ; ------------------------------------- Block: 29 cycles
   \   000134                       ; ------------------------------------- Total: 223 cycles
   \   000134                       REQUIRE ?CLRL78_V1_0_L00
   \   000134                       REQUIRE _A_P4

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 DB....                MOVW      BC, N:gps_message+12  ;; 1 cycle
   \   000003 AF....                MOVW      AX, N:gps_message+10  ;; 1 cycle
   \   000006 D7                    RET                          ;; 6 cycles
   \   000007                       ; ------------------------------------- Block: 8 cycles
   \   000007                       ; ------------------------------------- Total: 8 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??led_state:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z
     48          
     49          //Decode Task

   \                                 In  segment CODE, align 1, keep-with-next
     50          void Task2(void) {
   \                     Task2:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001                       ; Auto size: 2
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
     51          	//static char led_state=0;
     52                  char next_char;
     53                  
     54          	//LED_6_G = led_state;
     55          	//led_state ^= 1;
     56                  
     57                        //ReStart Serial Recieve 
     58                //uint8_t * const rx_buf, uint16_t rx_num
     59                 uint8_t * rx_address;
     60                 uint8_t rx_buff[2];
     61                 rx_address = rx_buff; 
     62                R_UART1_Receive(rx_address, 2);
   \   000002 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   000005 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000007 FD....                CALL      R_UART1_Receive    ;; 3 cycles
     63                      
     64                  next_char = Q_Dequeue(& rx_q);
   \   00000A 30....                MOVW      AX, #rx_q          ;; 1 cycle
   \   00000D FD....                CALL      Q_Dequeue          ;; 3 cycles
   \   000010 73                    MOV       B, A               ;; 1 cycle
     65                  DecodeNMEA(& gps_message,next_char);
   \   000011 30....                MOVW      AX, #gps_message   ;; 1 cycle
   \   000014 FD....                CALL      DecodeNMEA         ;; 3 cycles
     66                  
     67          
     68          }
   \   000017 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000019 C2                    POP       BC                 ;; 1 cycle
   \   00001A D7                    RET                          ;; 6 cycles
   \   00001B                       ; ------------------------------------- Block: 24 cycles
   \   00001B                       ; ------------------------------------- Total: 24 cycles
   \   00001B                       REQUIRE ?CLRL78_V1_0_L00
     69          
     70          //Update LCD Task
     71          // Task3 runs at 1 Hz, updates elapsed time on LCD

   \                                 In  segment CODE, align 1, keep-with-next
     72          void Task3(void) {
   \                     Task3:
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 0
     73          	//static char led_state=0;
     74          	static unsigned char h=0, m=0, s=0, ms=0;
     75          
     76          	//LED_8_G = led_state;
     77          	//led_state ^= 1;
     78          
     79                  ms++;
   \   000002 A0....                INC       N:??ms             ;; 2 cycles
     80                  if(ms>=10){
   \   000005 8F....                MOV       A, N:??ms          ;; 1 cycle
   \   000008 4C0A                  CMP       A, #0xA            ;; 1 cycle
   \   00000A DC13                  BC        ??Task3_0          ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 10 cycles
     81                    s++;
   \   00000C A0....                INC       N:??s              ;; 2 cycles
     82                    ms = 0;
   \   00000F F5....                CLRB      N:??ms             ;; 1 cycle
     83                    if (s>59) {
   \   000012 8F....                MOV       A, N:??s           ;; 1 cycle
   \   000015 4C3C                  CMP       A, #0x3C           ;; 1 cycle
   \   000017 DC06                  BC        ??Task3_0          ;; 4 cycles
   \   000019                       ; ------------------------------------- Block: 9 cycles
     84                            m++;
   \   000019 A0....                INC       N:??m              ;; 2 cycles
     85                            s = 0;
   \   00001C F5....                CLRB      N:??s              ;; 1 cycle
     86                            if(ms>60){
   \   00001F                       ; ------------------------------------- Block: 3 cycles
     87                              h++;
     88                              m=0;
     89                            }
     90                    }
     91                  }
     92                  
     93          	LCDPrintf(3,0, "%02u:%02u:%02u.%01u",h, m, s,ms);
   \                     ??Task3_0:
   \   00001F 8F....                MOV       A, N:??ms          ;; 1 cycle
   \   000022 70                    MOV       X, A               ;; 1 cycle
   \   000023 F1                    CLRB      A                  ;; 1 cycle
   \   000024 C1                    PUSH      AX                 ;; 1 cycle
   \   000025 8F....                MOV       A, N:??s           ;; 1 cycle
   \   000028 70                    MOV       X, A               ;; 1 cycle
   \   000029 F1                    CLRB      A                  ;; 1 cycle
   \   00002A C1                    PUSH      AX                 ;; 1 cycle
   \   00002B 8F....                MOV       A, N:??m           ;; 1 cycle
   \   00002E 70                    MOV       X, A               ;; 1 cycle
   \   00002F F1                    CLRB      A                  ;; 1 cycle
   \   000030 C1                    PUSH      AX                 ;; 1 cycle
   \   000031 8F....                MOV       A, N:??h           ;; 1 cycle
   \   000034 70                    MOV       X, A               ;; 1 cycle
   \   000035 F1                    CLRB      A                  ;; 1 cycle
   \   000036 C1                    PUSH      AX                 ;; 1 cycle
   \   000037 34....                MOVW      DE, #`?<Constant "%02u:%02u:%02u.%01u">`  ;; 1 cycle
   \   00003A F3                    CLRB      B                  ;; 1 cycle
   \   00003B 5103                  MOV       A, #0x3            ;; 1 cycle
   \   00003D FD....                CALL      LCDPrintf          ;; 3 cycles
     94          }
   \   000040 1008                  ADDW      SP, #0x8           ;; 1 cycle
   \   000042 C4                    POP       DE                 ;; 1 cycle
   \   000043 C2                    POP       BC                 ;; 1 cycle
   \   000044 D7                    RET                          ;; 6 cycles
   \   000045                       ; ------------------------------------- Block: 31 cycles
   \   000045                       ; ------------------------------------- Total: 53 cycles
   \   000045                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??h:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??m:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??s:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??ms:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%03d %06.3f %c">`:
   \   000000 253033642025          DB "%03d %06.3f %c"
   \   00000F 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%06.2f  kt">`:
   \   000000 2530362E3266          DB "%06.2f  kt"
   \   00000B 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%06.2f  T">`:
   \   000000 2530362E3266          DB "%06.2f  T"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%02u:%02u:%02u">`:
   \   000000 253032753A25          DB "%02u:%02u:%02u"
   \   00000F 00                    DB 0

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%02u:%02u:%02u.%01u">`:
   \   000000 253032753A25          DB "%02u:%02u:%02u.%01u"
     95          
     96          
     97          
     98          
     99          
    100          
    101          
    102          
    103          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     22   Task1
       10   -> LCDPrintf
       16   -> LCDPrintf
       18   -> LCDPrintf
       22   -> LCDPrintf
      4   Task2
        4   -> DecodeNMEA
        4   -> Q_Dequeue
        4   -> R_UART1_Receive
     12   Task3
       12   -> LCDPrintf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "%02u:%02u:%02u">
      20  ?<Constant "%02u:%02u:%02u.%01u">
      16  ?<Constant "%03d %06.3f %c">
      10  ?<Constant "%06.2f  T">
      12  ?<Constant "%06.2f  kt">
       7  ?Subroutine0
     308  Task1
      27  Task2
      69  Task3
       1  _A_P4
      62  gps_message
       1  h
       1  led_state
       1  m
       1  ms
       1  s

 
 411 bytes in segment CODE
  74 bytes in segment NEAR_CONST
  67 bytes in segment NEAR_Z
   1 byte  in segment SADDR_A
 
 411 bytes of CODE  memory
  74 bytes of CONST memory
  67 bytes of DATA  memory (+ 1 byte shared)

Errors: none
Warnings: none
