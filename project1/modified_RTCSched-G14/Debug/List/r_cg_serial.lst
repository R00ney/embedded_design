###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             22/Feb/2014  21:58:11 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\applilet3_src\r_cg_serial.c #
#    Command line =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\applilet3_src\r_cg_serial.c #
#                     --core rl78_2 --code_model near --data_model near       #
#                    --near_const_location rom0 -o                            #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --debug -lCN C:\Users\Suddenlink\Dropbox\git_files\embed #
#                    ded_design\project1\modified_RTCSched-G14\Debug\List\    #
#                    -I C:\Users\Suddenlink\Dropbox\git_files\embedded_design #
#                    \project1\modified_RTCSched-G14/applilet3_src/\ -I       #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Glyph/\ -I                  #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Glyph/Drivers/\ -I          #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/user_include/\ -I           #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/RTC/\ -I                    #
#                    C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14/Queu/\                      #
#    List file    =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\List\r_cg_serial.lst  #
#    Object file  =  C:\Users\Suddenlink\Dropbox\git_files\embedded_design\pr #
#                    oject1\modified_RTCSched-G14\Debug\Obj\r_cg_serial.r87   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Suddenlink\Dropbox\git_files\embedded_design\project1\modified_RTCSched-G14\applilet3_src\r_cg_serial.c
      1          /***********************************************************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only 
      4          * intended for use with Renesas products. No other uses are authorized. This 
      5          * software is owned by Renesas Electronics Corporation and is protected under 
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING 
      8          * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT 
      9          * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
     10          * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
     11          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
     12          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
     13          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR 
     14          * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE 
     15          * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     16          * Renesas reserves the right, without notice, to make changes to this software 
     17          * and to discontinue the availability of this software.  By using this software, 
     18          * you agree to the additional terms and conditions found by accessing the 
     19          * following link:
     20          * http://www.renesas.com/disclaimer
     21          *
     22          * Copyright (C) 2011, 2013 Renesas Electronics Corporation. All rights reserved.
     23          ***********************************************************************************************************************/
     24          
     25          /***********************************************************************************************************************
     26          * File Name    : r_cg_serial.c
     27          * Version      : Applilet3 for RL78/G14 V2.01.00.02 [09 Aug 2013]
     28          * Device(s)    : R5F104PJ
     29          * Tool-Chain   : IAR Systems iccrl78
     30          * Description  : This file implements device driver for Serial module.
     31          * Creation Date: 2/19/2014
     32          ***********************************************************************************************************************/
     33          
     34          /***********************************************************************************************************************
     35          Includes
     36          ***********************************************************************************************************************/
     37          #include "r_cg_macrodriver.h"

   \                                 In  segment SADDR_A, at 0xfff07
   \   union <unnamed> volatile __saddr _A_P7
   \                     _A_P7:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xfff20
   \   union <unnamed> volatile __sfr _A_PM0
   \                     _A_PM0:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xfff27
   \   union <unnamed> volatile __sfr _A_PM7
   \                     _A_PM7:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xfff46
   \   union <unnamed> volatile __sfr __no_bit_access _A_SDR03
   \                     _A_SDR03:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfff4a
   \   union <unnamed> volatile __sfr __no_bit_access _A_SDR11
   \                     _A_SDR11:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffe0
   \   union <unnamed> volatile __sfr _A_IF0
   \                     _A_IF0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffe2
   \   union <unnamed> volatile __sfr _A_IF1
   \                     _A_IF1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffe4
   \   union <unnamed> volatile __sfr _A_MK0
   \                     _A_MK0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffe6
   \   union <unnamed> volatile __sfr _A_MK1
   \                     _A_MK1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffe8
   \   union <unnamed> volatile __sfr _A_PR00
   \                     _A_PR00:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffea
   \   union <unnamed> volatile __sfr _A_PR01
   \                     _A_PR01:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffec
   \   union <unnamed> volatile __sfr _A_PR10
   \                     _A_PR10:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfffee
   \   union <unnamed> volatile __sfr _A_PR11
   \                     _A_PR11:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0060
   \   union <unnamed> volatile _A_PMC0
   \                     _A_PMC0:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xf0070
   \   union <unnamed> volatile _A_NFEN0
   \                     _A_NFEN0:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xf00f0
   \   union <unnamed> volatile _A_PER0
   \                     _A_PER0:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xf010e
   \   union <unnamed> volatile __no_bit_access _A_SIR03
   \                     _A_SIR03:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0114
   \   union <unnamed> volatile __no_bit_access _A_SMR02
   \                     _A_SMR02:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0116
   \   union <unnamed> volatile __no_bit_access _A_SMR03
   \                     _A_SMR03:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf011e
   \   union <unnamed> volatile __no_bit_access _A_SCR03
   \                     _A_SCR03:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0122
   \   union <unnamed> volatile _A_SS0
   \                     _A_SS0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0124
   \   union <unnamed> volatile _A_ST0
   \                     _A_ST0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0126
   \   union <unnamed> volatile __no_bit_access _A_SPS0
   \                     _A_SPS0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf012a
   \   union <unnamed> volatile _A_SOE0
   \                     _A_SOE0:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf014a
   \   union <unnamed> volatile __no_bit_access _A_SIR11
   \                     _A_SIR11:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0152
   \   union <unnamed> volatile __no_bit_access _A_SMR11
   \                     _A_SMR11:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf015a
   \   union <unnamed> volatile __no_bit_access _A_SCR11
   \                     _A_SCR11:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0162
   \   union <unnamed> volatile _A_SS1
   \                     _A_SS1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0164
   \   union <unnamed> volatile _A_ST1
   \                     _A_ST1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0166
   \   union <unnamed> volatile __no_bit_access _A_SPS1
   \                     _A_SPS1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf0168
   \   union <unnamed> volatile __no_bit_access _A_SO1
   \                     _A_SO1:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xf016a
   \   union <unnamed> volatile _A_SOE1
   \                     _A_SOE1:
   \   000000                       DS 2
     38          #include "r_cg_serial.h"
     39          /* Start user code for include. Do not edit comment generated here */
     40          /* End user code. Do not edit comment generated here */
     41          #include "r_cg_userdefine.h"
     42          
     43          /***********************************************************************************************************************
     44          Global variables and functions
     45          ***********************************************************************************************************************/

   \                                 In  segment NEAR_Z, align 2, align-sorted
     46          uint8_t * gp_uart1_tx_address;         /* uart1 transmit buffer address */
   \                     gp_uart1_tx_address:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     47          uint16_t  g_uart1_tx_count;            /* uart1 transmit data number */
   \                     g_uart1_tx_count:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     48          uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
   \                     gp_uart1_rx_address:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     49          uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
   \                     g_uart1_rx_count:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     50          uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
   \                     g_uart1_rx_length:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     51          uint8_t * gp_csi21_rx_address;         /* csi21 receive buffer address */
   \                     gp_csi21_rx_address:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     52          uint16_t  g_csi21_rx_length;           /* csi21 receive data length */
   \                     g_csi21_rx_length:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     53          uint16_t  g_csi21_rx_count;            /* csi21 receive data count */
   \                     g_csi21_rx_count:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     54          uint8_t * gp_csi21_tx_address;         /* csi21 send buffer address */
   \                     gp_csi21_tx_address:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     55          uint16_t  g_csi21_send_length;         /* csi21 send data length */
   \                     g_csi21_send_length:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     56          uint16_t  g_csi21_tx_count;            /* csi21 send data count */
   \                     g_csi21_tx_count:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z
     57          /* Start user code for global. Do not edit comment generated here */
     58          /* End user code. Do not edit comment generated here */
     59          
     60          /***********************************************************************************************************************
     61          * Function Name: R_SAU0_Create
     62          * Description  : This function initializes the SAU0 module.
     63          * Arguments    : None
     64          * Return Value : None
     65          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     66          void R_SAU0_Create(void)
   \                     R_SAU0_Create:
     67          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     68              SAU0EN = 1U;    /* supply SAU0 clock */
   \   000000 36F000                MOVW      HL, #0xF0          ;; 1 cycle
   \   000003 71A2                  SET1      [HL].2             ;; 2 cycles
     69              NOP();
   \   000005 00                    NOP                          ;; 1 cycle
     70              NOP();
   \   000006 00                    NOP                          ;; 1 cycle
     71              NOP();
   \   000007 00                    NOP                          ;; 1 cycle
     72              NOP();
   \   000008 00                    NOP                          ;; 1 cycle
     73              SPS0 = _0004_SAU_CK00_FCLK_4 | _0000_SAU_CK01_FCLK_0;
   \   000009 300400                MOVW      AX, #0x4           ;; 1 cycle
   \   00000C BF2601                MOVW      0x126, AX          ;; 1 cycle
   \   00000F                       ; ------------------------------------- Block: 9 cycles
   \   00000F                       ; ------------------------------------- Total: 9 cycles
     74              R_UART1_Create();
   \   00000F                       REQUIRE ?CLRL78_V1_0_L00
   \   00000F                       REQUIRE R_UART1_Create
   \   00000F                       REQUIRE _A_PER0
   \   00000F                       REQUIRE _A_SPS0
   \   00000F                       ; // Fall through to label R_UART1_Create
     75          }
     76          
     77          /***********************************************************************************************************************
     78          * Function Name: R_UART1_Create
     79          * Description  : This function initializes the UART1 module.
     80          * Arguments    : None
     81          * Return Value : None
     82          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     83          void R_UART1_Create(void)
   \                     R_UART1_Create:
     84          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     85              ST0 |= _0008_SAU_CH3_STOP_TRG_ON;    /* disable UART1 receive operation */
   \   000000 362401                MOVW      HL, #0x124         ;; 1 cycle
   \   000003 71B2                  SET1      [HL].3             ;; 2 cycles
     86              STMK1 = 1U;    /* disable INTST1 interrupt */
   \   000005 710AE6                SET1      0xFFFE6.0          ;; 2 cycles
     87              STIF1 = 0U;    /* clear INTST1 interrupt flag */
   \   000008 710BE2                CLR1      0xFFFE2.0          ;; 2 cycles
     88              SRMK1 = 1U;    /* disable INTSR1 interrupt */
   \   00000B FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   00000E                       ; ------------------------------------- Block: 10 cycles
     89              SRIF1 = 0U;    /* clear INTSR1 interrupt flag */
     90              SREMK1 = 1U;   /* disable INTSRE1 interrupt */
     91              SREIF1 = 0U;   /* clear INTSRE1 interrupt flag */
     92              /* Set INTSR1 low priority */
     93              SRPR11 = 1U;
   \                     ??CrossCallReturnLabel_2:
   \   00000E 711AEE                SET1      0xFFFEE.1          ;; 2 cycles
     94              SRPR01 = 1U;
   \   000011 711AEA                SET1      0xFFFEA.1          ;; 2 cycles
     95              SIR03 = _0004_SAU_SIRMN_FECTMN | _0002_SAU_SIRMN_PECTMN | _0001_SAU_SIRMN_OVCTMN;    /* clear error flag */
   \   000014 300700                MOVW      AX, #0x7           ;; 1 cycle
   \   000017 BF0E01                MOVW      0x10E, AX          ;; 1 cycle
     96              NFEN0 |= _04_SAU_RXD1_FILTER_ON;
   \   00001A 367000                MOVW      HL, #0x70          ;; 1 cycle
   \   00001D 71A2                  SET1      [HL].2             ;; 2 cycles
     97              SMR02 = _0020_SAU_SMRMN_INITIALVALUE | _0000_SAU_CLOCK_SELECT_CK00 | _0000_SAU_TRIGGER_SOFTWARE |
     98                      _0000_SAU_EDGE_FALL | _0002_SAU_MODE_UART | _0000_SAU_TRANSFER_END;
   \   00001F 5022                  MOV       X, #0x22           ;; 1 cycle
   \   000021 BF1401                MOVW      0x114, AX          ;; 1 cycle
     99              SMR03 = _0020_SAU_SMRMN_INITIALVALUE | _0000_SAU_CLOCK_SELECT_CK00 | _0100_SAU_TRIGGER_RXD | _0000_SAU_EDGE_FALL |
    100                      _0002_SAU_MODE_UART | _0000_SAU_TRANSFER_END;
   \   000024 E1                    ONEB      A                  ;; 1 cycle
   \   000025 BF1601                MOVW      0x116, AX          ;; 1 cycle
    101              SCR03 = _4000_SAU_RECEPTION | _0000_SAU_INTSRE_MASK | _0000_SAU_PARITY_NONE | _0080_SAU_LSB | _0010_SAU_STOP_1 |
    102                      _0007_SAU_LENGTH_8;
   \   000028 309740                MOVW      AX, #0x4097        ;; 1 cycle
   \   00002B BF1E01                MOVW      0x11E, AX          ;; 1 cycle
    103              SDR03 = _CE00_UART1_RECEIVE_DIVISOR;
   \   00002E CB4600CE              MOVW      0xFFF46, #0xCE00   ;; 1 cycle
    104              SOE0 &= ~_0008_SAU_CH3_OUTPUT_ENABLE;    /* disable UART1 output */
   \   000032 362A01                MOVW      HL, #0x12A         ;; 1 cycle
   \   000035 71B3                  CLR1      [HL].3             ;; 2 cycles
    105              /* Set RxD1 pin */
    106              PMC0 &= 0xF7U;
   \   000037 366000                MOVW      HL, #0x60          ;; 1 cycle
   \   00003A 71B3                  CLR1      [HL].3             ;; 2 cycles
    107              PM0 |= 0x08U;
   \   00003C 713A20                SET1      0xFFF20.3          ;; 2 cycles
    108          }
   \   00003F D7                    RET                          ;; 6 cycles
   \   000040                       ; ------------------------------------- Block: 30 cycles
   \   000040                       ; ------------------------------------- Total: 40 cycles
   \   000040                       REQUIRE ?CLRL78_V1_0_L00
   \   000040                       REQUIRE _A_ST0
   \   000040                       REQUIRE _A_MK1
   \   000040                       REQUIRE _A_IF1
   \   000040                       REQUIRE _A_PR11
   \   000040                       REQUIRE _A_PR01
   \   000040                       REQUIRE _A_SIR03
   \   000040                       REQUIRE _A_NFEN0
   \   000040                       REQUIRE _A_SMR02
   \   000040                       REQUIRE _A_SMR03
   \   000040                       REQUIRE _A_SCR03
   \   000040                       REQUIRE _A_SDR03
   \   000040                       REQUIRE _A_SOE0
   \   000040                       REQUIRE _A_PMC0
   \   000040                       REQUIRE _A_PM0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 711AE6                SET1      0xFFFE6.1          ;; 2 cycles
   \   000003 711BE2                CLR1      0xFFFE2.1          ;; 2 cycles
   \   000006 712AE6                SET1      0xFFFE6.2          ;; 2 cycles
   \   000009 712BE2                CLR1      0xFFFE2.2          ;; 2 cycles
   \   00000C D7                    RET                          ;; 6 cycles
   \   00000D                       ; ------------------------------------- Block: 14 cycles
   \   00000D                       ; ------------------------------------- Total: 14 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    109          
    110          /***********************************************************************************************************************
    111          * Function Name: R_UART1_Start
    112          * Description  : This function starts the UART1 module operation.
    113          * Arguments    : None
    114          * Return Value : None
    115          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    116          void R_UART1_Start(void)
   \                     R_UART1_Start:
    117          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    118              SRIF1 = 0U;    /* clear INTSR1 interrupt flag */
   \   000000 711BE2                CLR1      0xFFFE2.1          ;; 2 cycles
    119              SRMK1 = 0U;    /* enable INTSR1 interrupt */
   \   000003 711BE6                CLR1      0xFFFE6.1          ;; 2 cycles
    120              SREIF1 = 0U;   /* clear INTSRE1 interrupt flag */
   \   000006 712BE2                CLR1      0xFFFE2.2          ;; 2 cycles
    121              SREMK1 = 0U;   /* enable INTSRE1 interrupt */
   \   000009 712BE6                CLR1      0xFFFE6.2          ;; 2 cycles
    122              SS0 |= _0008_SAU_CH3_START_TRG_ON;    /* enable UART1 receive */
   \   00000C 362201                MOVW      HL, #0x122         ;; 1 cycle
   \   00000F 71B2                  SET1      [HL].3             ;; 2 cycles
    123          }
   \   000011 D7                    RET                          ;; 6 cycles
   \   000012                       ; ------------------------------------- Block: 17 cycles
   \   000012                       ; ------------------------------------- Total: 17 cycles
   \   000012                       REQUIRE ?CLRL78_V1_0_L00
   \   000012                       REQUIRE _A_IF1
   \   000012                       REQUIRE _A_MK1
   \   000012                       REQUIRE _A_SS0
    124          
    125          /***********************************************************************************************************************
    126          * Function Name: R_UART1_Stop
    127          * Description  : This function stops the UART1 module operation.
    128          * Arguments    : None
    129          * Return Value : None
    130          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    131          void R_UART1_Stop(void)
   \                     R_UART1_Stop:
    132          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    133              ST0 |= _0008_SAU_CH3_STOP_TRG_ON;    /* disable UART1 receive */
   \   000000 362401                MOVW      HL, #0x124         ;; 1 cycle
   \   000003 71B2                  SET1      [HL].3             ;; 2 cycles
   \   000005                       ; ------------------------------------- Block: 3 cycles
   \   000005                       ; ------------------------------------- Total: 3 cycles
    134              SRMK1 = 1U;    /* disable INTSR1 interrupt */
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
   \   000005                       REQUIRE ?Subroutine1
   \   000005                       REQUIRE _A_ST0
   \   000005                       REQUIRE _A_MK1
   \   000005                       REQUIRE _A_IF1
   \   000005                       ; // Fall through to label ?Subroutine1
    135              SRIF1 = 0U;    /* clear INTSR1 interrupt flag */
    136              SREMK1 = 1U;   /* disable INTSRE1 interrupt */
    137              SREIF1 = 0U;   /* clear INTSRE1 interrupt flag */
    138          }
    139          
    140          /***********************************************************************************************************************
    141          * Function Name: R_UART1_Receive
    142          * Description  : This function receives UART1 data.
    143          * Arguments    : rx_buf -
    144          *                    receive buffer pointer
    145          *                rx_num -
    146          *                    buffer size
    147          * Return Value : status -
    148          *                    MD_OK or MD_ARGERROR
    149          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    150          MD_STATUS R_UART1_Receive(uint8_t * const rx_buf, uint16_t rx_num)
   \                     R_UART1_Receive:
    151          //MD_STATUS R_UART1_Receive(void)
    152          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    153              MD_STATUS status = MD_OK;
    154          
    155              
    156              /*
    157              if (rx_num < 1U)
    158              {
    159                  status = MD_ARGERROR;
    160              }
    161              else
    162              {
    163                  g_uart1_rx_count = 0U;
    164                  g_uart1_rx_length = rx_num;
    165                  gp_uart1_rx_address = rx_buf;
    166              }
    167              */
    168              
    169              return (status);
   \   000000 F6                    CLRW      AX                 ;; 1 cycle
   \   000001 D7                    RET                          ;; 6 cycles
   \   000002                       ; ------------------------------------- Block: 7 cycles
   \   000002                       ; ------------------------------------- Total: 7 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
    170          }
    171          
    172          /***********************************************************************************************************************
    173          * Function Name: R_SAU1_Create
    174          * Description  : This function initializes the SAU1 module.
    175          * Arguments    : None
    176          * Return Value : None
    177          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    178          void R_SAU1_Create(void)
   \                     R_SAU1_Create:
    179          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    180              SAU1EN = 1U;    /* supply SAU1 clock */
   \   000000 36F000                MOVW      HL, #0xF0          ;; 1 cycle
   \   000003 71B2                  SET1      [HL].3             ;; 2 cycles
    181              NOP();
   \   000005 00                    NOP                          ;; 1 cycle
    182              NOP();
   \   000006 00                    NOP                          ;; 1 cycle
    183              NOP();
   \   000007 00                    NOP                          ;; 1 cycle
    184              NOP();
   \   000008 00                    NOP                          ;; 1 cycle
    185              SPS1 = _0000_SAU_CK00_FCLK_0 | _0000_SAU_CK01_FCLK_0;
   \   000009 F6                    CLRW      AX                 ;; 1 cycle
   \   00000A BF6601                MOVW      0x166, AX          ;; 1 cycle
   \   00000D                       ; ------------------------------------- Block: 9 cycles
   \   00000D                       ; ------------------------------------- Total: 9 cycles
    186              R_CSI21_Create();
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
   \   00000D                       REQUIRE R_CSI21_Create
   \   00000D                       REQUIRE _A_PER0
   \   00000D                       REQUIRE _A_SPS1
   \   00000D                       ; // Fall through to label R_CSI21_Create
    187          }
    188          
    189          /***********************************************************************************************************************
    190          * Function Name: R_CSI21_Create
    191          * Description  : This function initializes the CSI21 module.
    192          * Arguments    : None
    193          * Return Value : None
    194          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    195          void R_CSI21_Create(void)
   \                     R_CSI21_Create:
    196          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    197              ST1 |= _0002_SAU_CH1_STOP_TRG_ON;    /* disable CSI21 */
   \   000000 366401                MOVW      HL, #0x164         ;; 1 cycle
   \   000003 7192                  SET1      [HL].1             ;; 2 cycles
    198              CSIMK21 = 1U;    /* disable INTCSI21 interrupt */
   \   000005 711AE5                SET1      0xFFFE5.1          ;; 2 cycles
    199              CSIIF21 = 0U;    /* clear INTCSI21 interrupt flag */
   \   000008 711BE1                CLR1      0xFFFE1.1          ;; 2 cycles
    200              /* Set INTCSI21 low priority */
    201              CSIPR121 = 1U;
   \   00000B 711AED                SET1      0xFFFED.1          ;; 2 cycles
    202              CSIPR021 = 1U;
   \   00000E 711AE9                SET1      0xFFFE9.1          ;; 2 cycles
    203              SIR11 = _0004_SAU_SIRMN_FECTMN | _0002_SAU_SIRMN_PECTMN | _0001_SAU_SIRMN_OVCTMN;    /* clear error flag */
   \   000011 300700                MOVW      AX, #0x7           ;; 1 cycle
   \   000014 BF4A01                MOVW      0x14A, AX          ;; 1 cycle
    204              SMR11 = _0020_SAU_SMRMN_INITIALVALUE | _0000_SAU_CLOCK_SELECT_CK00 | _0000_SAU_CLOCK_MODE_CKS |
    205                      _0000_SAU_TRIGGER_SOFTWARE | _0000_SAU_MODE_CSI | _0000_SAU_TRANSFER_END;
   \   000017 5020                  MOV       X, #0x20           ;; 1 cycle
   \   000019 BF5201                MOVW      0x152, AX          ;; 1 cycle
    206              SCR11 = _C000_SAU_RECEPTION_TRANSMISSION | _0000_SAU_TIMING_1 | _0000_SAU_MSB | _0007_SAU_LENGTH_8;
   \   00001C 3007C0                MOVW      AX, #0xC007        ;; 1 cycle
   \   00001F BF5A01                MOVW      0x15A, AX          ;; 1 cycle
    207              SDR11 = _6400_CSI21_DIVISOR;
   \   000022 CB4A0064              MOVW      0xFFF4A, #0x6400   ;; 1 cycle
    208              SO1 |= _0200_SAU_CH1_CLOCK_OUTPUT_1;    /* CSI21 clock initial level */
   \   000026 FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   000029                       ; ------------------------------------- Block: 21 cycles
    209              SO1 &= ~_0002_SAU_CH1_DATA_OUTPUT_1;    /* CSI21 SO initial level */
    210              SOE1 |= _0002_SAU_CH1_OUTPUT_ENABLE;    /* enable CSI21 output */
   \                     ??CrossCallReturnLabel_0:
   \   000029 566A                  MOV       L, #0x6A           ;; 1 cycle
   \   00002B 7192                  SET1      [HL].1             ;; 2 cycles
    211              /* Set SI21 pin */
    212              PM7 |= 0x02U;
   \   00002D 711A27                SET1      0xFFF27.1          ;; 2 cycles
    213              /* Set SO21 pin */
    214              P7 |= 0x04U;
   \   000030 712207                SET1      S:0xFFF07.2        ;; 2 cycles
    215              PM7 &= 0xFBU;
   \   000033 712B27                CLR1      0xFFF27.2          ;; 2 cycles
    216              /* Set SCK21 pin */
    217              P7 |= 0x01U;
   \   000036 710207                SET1      S:0xFFF07.0        ;; 2 cycles
    218              PM7 &= 0xFEU;
   \   000039 710B27                CLR1      0xFFF27.0          ;; 2 cycles
    219          }
   \   00003C D7                    RET                          ;; 6 cycles
   \   00003D                       ; ------------------------------------- Block: 19 cycles
   \   00003D                       ; ------------------------------------- Total: 40 cycles
   \   00003D                       REQUIRE ?CLRL78_V1_0_L00
   \   00003D                       REQUIRE _A_ST1
   \   00003D                       REQUIRE _A_MK0
   \   00003D                       REQUIRE _A_IF0
   \   00003D                       REQUIRE _A_PR10
   \   00003D                       REQUIRE _A_PR00
   \   00003D                       REQUIRE _A_SIR11
   \   00003D                       REQUIRE _A_SMR11
   \   00003D                       REQUIRE _A_SCR11
   \   00003D                       REQUIRE _A_SDR11
   \   00003D                       REQUIRE _A_SO1
   \   00003D                       REQUIRE _A_SOE1
   \   00003D                       REQUIRE _A_PM7
   \   00003D                       REQUIRE _A_P7

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 AF6801                MOVW      AX, 0x168          ;; 1 cycle
   \   000003 6C02                  OR        A, #0x2            ;; 1 cycle
   \   000005 BF6801                MOVW      0x168, AX          ;; 1 cycle
   \   000008 AF6801                MOVW      AX, 0x168          ;; 1 cycle
   \   00000B 08                    XCH       A, X               ;; 1 cycle
   \   00000C 5CFD                  AND       A, #0xFD           ;; 1 cycle
   \   00000E 08                    XCH       A, X               ;; 1 cycle
   \   00000F BF6801                MOVW      0x168, AX          ;; 1 cycle
   \   000012 D7                    RET                          ;; 6 cycles
   \   000013                       ; ------------------------------------- Block: 14 cycles
   \   000013                       ; ------------------------------------- Total: 14 cycles
   \   000013                       REQUIRE ?CLRL78_V1_0_L00
    220          
    221          /***********************************************************************************************************************
    222          * Function Name: R_CSI21_Start
    223          * Description  : This function starts the CSI21 module operation.
    224          * Arguments    : None
    225          * Return Value : None
    226          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    227          void R_CSI21_Start(void)
   \                     R_CSI21_Start:
    228          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    229              CSIIF21 = 0U;    /* clear INTCSI21 interrupt flag */
   \   000000 711BE1                CLR1      0xFFFE1.1          ;; 2 cycles
    230              CSIMK21 = 0U;    /* enable INTCSI21 */
   \   000003 711BE5                CLR1      0xFFFE5.1          ;; 2 cycles
    231              SO1 |= _0200_SAU_CH1_CLOCK_OUTPUT_1;    /* CSI21 clock initial level */
   \   000006 FD....                CALL      N:?Subroutine0     ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 7 cycles
    232              SO1 &= ~_0002_SAU_CH1_DATA_OUTPUT_1;           /* CSI21 SO initial level */
    233              SOE1 |= _0002_SAU_CH1_OUTPUT_ENABLE;           /* enable CSI21 output */
   \                     ??CrossCallReturnLabel_1:
   \   000009 366A01                MOVW      HL, #0x16A         ;; 1 cycle
   \   00000C 7192                  SET1      [HL].1             ;; 2 cycles
    234              SS1 |= _0002_SAU_CH1_START_TRG_ON;             /* enable CSI21 */
   \   00000E 5662                  MOV       L, #0x62           ;; 1 cycle
   \   000010 7192                  SET1      [HL].1             ;; 2 cycles
    235          }
   \   000012 D7                    RET                          ;; 6 cycles
   \   000013                       ; ------------------------------------- Block: 12 cycles
   \   000013                       ; ------------------------------------- Total: 19 cycles
   \   000013                       REQUIRE ?CLRL78_V1_0_L00
   \   000013                       REQUIRE _A_IF0
   \   000013                       REQUIRE _A_MK0
   \   000013                       REQUIRE _A_SO1
   \   000013                       REQUIRE _A_SOE1
   \   000013                       REQUIRE _A_SS1
    236          
    237          /***********************************************************************************************************************
    238          * Function Name: R_CSI21_Stop
    239          * Description  : This function stops the CSI21 module operation.
    240          * Arguments    : None
    241          * Return Value : None
    242          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    243          void R_CSI21_Stop(void)
   \                     R_CSI21_Stop:
    244          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    245              ST1 |= _0002_SAU_CH1_STOP_TRG_ON;        /* disable CSI21 */
   \   000000 366401                MOVW      HL, #0x164         ;; 1 cycle
   \   000003 7192                  SET1      [HL].1             ;; 2 cycles
    246              SOE1 &= ~_0002_SAU_CH1_OUTPUT_ENABLE;    /* disable CSI21 output */
   \   000005 566A                  MOV       L, #0x6A           ;; 1 cycle
   \   000007 7193                  CLR1      [HL].1             ;; 2 cycles
    247              CSIMK21 = 1U;    /* disable INTCSI21 interrupt */
   \   000009 711AE5                SET1      0xFFFE5.1          ;; 2 cycles
    248              CSIIF21 = 0U;    /* clear INTCSI21 interrupt flag */
   \   00000C 711BE1                CLR1      0xFFFE1.1          ;; 2 cycles
    249          }
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 16 cycles
   \   000010                       ; ------------------------------------- Total: 16 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
   \   000010                       REQUIRE _A_ST1
   \   000010                       REQUIRE _A_SOE1
   \   000010                       REQUIRE _A_MK0
   \   000010                       REQUIRE _A_IF0
    250          
    251          /***********************************************************************************************************************
    252          * Function Name: R_CSI21_Send_Receive
    253          * Description  : This function sends and receives CSI21 data.
    254          * Arguments    : tx_buf -
    255          *                    transfer buffer pointer
    256          *                tx_num -
    257          *                    buffer size
    258          *                rx_buf -
    259          *                    receive buffer pointer
    260          * Return Value : status -
    261          *                    MD_OK or MD_ARGERROR
    262          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    263          MD_STATUS R_CSI21_Send_Receive(uint8_t * const tx_buf, uint16_t tx_num, uint8_t * const rx_buf)
   \                     R_CSI21_Send_Receive:
    264          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001                       ; Auto size: 2
   \   000001 13                    MOVW      AX, BC             ;; 1 cycle
    265              MD_STATUS status = MD_OK;
   \   000002 360000                MOVW      HL, #0x0           ;; 1 cycle
    266          
    267              if (tx_num < 1U)
   \   000005 F7                    CLRW      BC                 ;; 1 cycle
   \   000006 43                    CMPW      AX, BC             ;; 1 cycle
   \   000007 DF04                  BNZ       ??R_CSI21_Send_Receive_0  ;; 4 cycles
   \   000009                       ; ------------------------------------- Block: 9 cycles
    268              {
    269                  status = MD_ARGERROR;
   \   000009 5681                  MOV       L, #0x81           ;; 1 cycle
   \   00000B EF28                  BR        S:??R_CSI21_Send_Receive_1  ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 4 cycles
    270              }
    271              else
    272              {
    273                  g_csi21_tx_count = tx_num;        /* send data count */
   \                     ??R_CSI21_Send_Receive_0:
   \   00000D BF....                MOVW      N:g_csi21_tx_count, AX  ;; 1 cycle
    274                  gp_csi21_tx_address = tx_buf;     /* send buffer pointer */
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 BF....                MOVW      N:gp_csi21_tx_address, AX  ;; 1 cycle
    275                  gp_csi21_rx_address = rx_buf;     /* receive buffer pointer */
   \   000015 35                    XCHW      AX, DE             ;; 1 cycle
   \   000016 BF....                MOVW      N:gp_csi21_rx_address, AX  ;; 1 cycle
    276                  CSIMK21 = 1U;                     /* disable INTCSI21 interrupt */
   \   000019 711AE5                SET1      0xFFFE5.1          ;; 2 cycles
    277          
    278                  if (0U != gp_csi21_tx_address)
   \   00001C F6                    CLRW      AX                 ;; 1 cycle
   \   00001D 42....                CMPW      AX, N:gp_csi21_tx_address  ;; 1 cycle
   \   000020 DD0A                  BZ        ??R_CSI21_Send_Receive_2  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 13 cycles
    279                  {
    280                      SIO21 = *gp_csi21_tx_address;    /* started by writing data to SDR[7:0] */
   \   000022 89                    MOV       A, [DE]            ;; 1 cycle
   \   000023 9E4A                  MOV       0xFFF4A, A         ;; 1 cycle
    281                      gp_csi21_tx_address++;
   \   000025 15                    MOVW      AX, DE             ;; 1 cycle
   \   000026 A1                    INCW      AX                 ;; 1 cycle
   \   000027 BF....                MOVW      N:gp_csi21_tx_address, AX  ;; 1 cycle
   \   00002A EF03                  BR        S:??R_CSI21_Send_Receive_3  ;; 3 cycles
   \   00002C                       ; ------------------------------------- Block: 8 cycles
    282                  }
    283                  else
    284                  {
    285                      SIO21 = 0xFFU;
   \                     ??R_CSI21_Send_Receive_2:
   \   00002C CE4AFF                MOV       0xFFF4A, #0xFF     ;; 1 cycle
   \   00002F                       ; ------------------------------------- Block: 1 cycles
    286                  }
    287          
    288                  g_csi21_tx_count--;
   \                     ??R_CSI21_Send_Receive_3:
   \   00002F B2....                DECW      N:g_csi21_tx_count  ;; 2 cycles
    289                  CSIMK21 = 0U;                     /* enable INTCSI21 interrupt */
   \   000032 711BE5                CLR1      0xFFFE5.1          ;; 2 cycles
   \   000035                       ; ------------------------------------- Block: 4 cycles
    290              }
    291          
    292              return (status);
   \                     ??R_CSI21_Send_Receive_1:
   \   000035 17                    MOVW      AX, HL             ;; 1 cycle
   \   000036 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000038 D7                    RET                          ;; 6 cycles
   \   000039                       ; ------------------------------------- Block: 8 cycles
   \   000039                       ; ------------------------------------- Total: 47 cycles
   \   000039                       REQUIRE ?CLRL78_V1_0_L00
   \   000039                       REQUIRE _A_MK0
   \   000039                       REQUIRE _A_SDR11
    293          }
    294          
    295          /* Start user code for adding. Do not edit comment generated here */
    296          /* End user code. Do not edit comment generated here */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   R_CSI21_Create
      2   R_CSI21_Send_Receive
      0   R_CSI21_Start
      0   R_CSI21_Stop
      0   R_SAU0_Create
        0   -> R_UART1_Create
      0   R_SAU1_Create
        0   -> R_CSI21_Create
      0   R_UART1_Create
      0   R_UART1_Receive
      0   R_UART1_Start
      0   R_UART1_Stop


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?Subroutine0
      13  ?Subroutine1
      61  R_CSI21_Create
      57  R_CSI21_Send_Receive
      19  R_CSI21_Start
      16  R_CSI21_Stop
      15  R_SAU0_Create
      13  R_SAU1_Create
      64  R_UART1_Create
       2  R_UART1_Receive
      18  R_UART1_Start
       5  R_UART1_Stop
       2  _A_IF0
       2  _A_IF1
       2  _A_MK0
       2  _A_MK1
       1  _A_NFEN0
       1  _A_P7
       1  _A_PER0
       1  _A_PM0
       1  _A_PM7
       1  _A_PMC0
       2  _A_PR00
       2  _A_PR01
       2  _A_PR10
       2  _A_PR11
       2  _A_SCR03
       2  _A_SCR11
       2  _A_SDR03
       2  _A_SDR11
       2  _A_SIR03
       2  _A_SIR11
       2  _A_SMR02
       2  _A_SMR03
       2  _A_SMR11
       2  _A_SO1
       2  _A_SOE0
       2  _A_SOE1
       2  _A_SPS0
       2  _A_SPS1
       2  _A_SS0
       2  _A_SS1
       2  _A_ST0
       2  _A_ST1
       2  g_csi21_rx_count
       2  g_csi21_rx_length
       2  g_csi21_send_length
       2  g_csi21_tx_count
       2  g_uart1_rx_count
       2  g_uart1_rx_length
       2  g_uart1_tx_count
       2  gp_csi21_rx_address
       2  gp_csi21_tx_address
       2  gp_uart1_rx_address
       2  gp_uart1_tx_address

 
 302 bytes in segment CODE
  57 bytes in segment NEAR_A
  22 bytes in segment NEAR_Z
   1 byte  in segment SADDR_A
 
 302 bytes of CODE memory
  22 bytes of DATA memory (+ 58 bytes shared)

Errors: none
Warnings: none
