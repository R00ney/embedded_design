///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V1.10.1.50009 for RL78            14/Jun/2012  12:37:41 /
// Copyright 2011 IAR Systems AB.                                             /
//                                                                            /
//    Core         =  rl78_1                                                  /
//    Code model   =  Near                                                    /
//    Data model   =  Near                                                    /
//                 =                                                          /
//    Source file  =  C:\Users\Alex\Documents\Teaching\Book Writin'\RL78      /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Glyph\Drivers\ST7579_LCD. /
//                    c                                                       /
//    Command line =  "C:\Users\Alex\Documents\Teaching\Book Writin'\RL78     /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Glyph\Drivers\ST7579_LCD. /
//                    c" --core rl78_1 --code_model near --data_model near    /
//                    --near_const_location rom0 -o                           /
//                    "C:\Users\Alex\Documents\Teaching\Book Writin'\RL78     /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Debug\Obj\"               /
//                    --dlib_config "C:\Program Files (x86)\IAR               /
//                    Systems\Embedded Workbench 6.0\rl78\LIB\dlrl78nn1n.h"   /
//                    -e -Ohz --debug -lB "C:\Users\Alex\Documents\Teaching\B /
//                    ook Writin'\RL78 Book\Code\RDK\LCDDemo\LCDDemo\Debug\Li /
//                    st\" -I "C:\Users\Alex\Documents\Teaching\Book          /
//                    Writin'\RL78 Book\Code\RDK\LCDDemo\LCDDemo\applilet3_sr /
//                    c\" -I "C:\Users\Alex\Documents\Teaching\Book           /
//                    Writin'\RL78 Book\Code\RDK\LCDDemo\LCDDemo\Glyph\" -I   /
//                    "C:\Users\Alex\Documents\Teaching\Book Writin'\RL78     /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Glyph\Drivers\" -I        /
//                    "C:\Users\Alex\Documents\Teaching\Book Writin'\RL78     /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Glyph\Fonts\" -I          /
//                    "C:\Users\Alex\Documents\Teaching\Book Writin'\RL78     /
//                    Book\Code\RDK\LCDDemo\LCDDemo\user_include\"            /
//    List file    =  C:\Users\Alex\Documents\Teaching\Book Writin'\RL78      /
//                    Book\Code\RDK\LCDDemo\LCDDemo\Debug\List\ST7579_LCD.s87 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ST7579_LCD

        RSEG CSTACK:DATA:NOROOT(1)

        EXTERN ?CLRL78_V1_0_L00
        EXTERN ?C_SSWITCH_L10
        EXTERN ?FUNC_LEAVE_L06
        EXTERN ?I_LSH_L02
        EXTERN ?L_SSWITCH_L10
        EXTERN ?MOVE_LONG_L06
        EXTERN ?SI_RSH_L02
        EXTERN ?SL_CMP_L03
        EXTERN ?UL_CMP_L03

        PUBLIC No_Clobber_Axes
        PUBLIC ST7579_Close
        PUBLIC ST7579_Config
        PUBLIC ST7579_Open
        PUBLIC ST7579_Read
        PUBLIC ST7579_Send16bitsCommand
        PUBLIC ST7579_Send8bitsData
        PUBLIC ST7579_SetChar
        PUBLIC ST7579_SetFrameRate
        PUBLIC ST7579_SetLine
        PUBLIC ST7579_SetPage
        PUBLIC ST7579_SetSystemBiasBooster
        PUBLIC ST7579_SetVO_Range
        PUBLIC ST7579_Write

        EXTERN Font8x8_table
        EXTERN Fontx5x7_table

// C:\Users\Alex\Documents\Teaching\Book Writin'\RL78 Book\Code\RDK\LCDDemo\LCDDemo\Glyph\Drivers\ST7579_LCD.c
//    1 /******************************************************************************
//    2 * DISCLAIMER
//    3 * This software is supplied by Renesas Electronics Corporation and is only
//    4 * intended for use with Renesas products. No other uses are authorized.
//    5 * This software is owned by Renesas Electronics Corporation and is protected under
//    6 * all applicable laws, including copyright laws.
//    7 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
//    8 * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
//    9 * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//   10 * PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY
//   11 * DISCLAIMED.
//   12 * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
//   13 * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
//   14 * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
//   15 * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
//   16 * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
//   17 * Renesas reserves the right, without notice, to make changes to this
//   18 * software and to discontinue the availability of this software.
//   19 * By using this software, you agree to the additional terms and
//   20 * conditions found by accessing the following link:
//   21 * http://www.renesas.com/disclaimer
//   22 ******************************************************************************/
//   23 /* Copyright (C) 2010 Renesas Electronics Corporation. All rights reserved. */
//   24 /* Code written for Renesas by Future Designs, Inc. www.teamfdi.com */
//   25 
//   26 /******************************************************************************
//   27 * File Name : ST7579_LCD.c
//   28 * Version : 1.00
//   29 * Device(s) : ST7579 LCD Controller
//   30 * Tool-Chain : Glyph - The Generic API for Graphics LCD API version 1.00
//   31 * H/W Platform : RX62N Group
//   32 * Description : A collection of functions used to operate an OKAYA 96x64
//   33 *               LCD display with the ST7579 controller chip.
//   34 *               (Okaya Graphic LCD P/N  SE9664WRF-004-I02Q uses ST7579 driver IC)
//   35 * Communications Required: 3-Wire SPI with a 4th Wire independent
//   36 *                          Transmit Only
//   37 ******************************************************************************
//   38 * History :
//   39 * : 21.07.2010 1.00 First Release
//   40 ******************************************************************************/
//   41 
//   42 /******************************************************************************
//   43 Includes “ST7579 Includes”
//   44 ******************************************************************************/
//   45 #include "ST7579_LCD.h"
//   46 #include "glyph_api.h"
//   47 #include "lcd.h"
//   48 
//   49 /******************************************************************************
//   50 * ID : 30.0
//   51 * Outline : ST7579_Open
//   52 * Include : ST7579_LCD.h
//   53 * Function Name: ST7579_Open
//   54 * Description : Assign values to the handle variables and configure LCD.
//   55 * Argument : aHandle - the Glyph handle to setup for the LCD.
//   56 *          : aAddress - may be used for some communications.
//   57 * Return Value : 0=success, not 0= error
//   58 * Calling Functions : GlyphOpen
//   59 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//   60 T_glyphError ST7579_Open(T_glyphHandle aHandle, uint32_t aAddress)
ST7579_Open:
//   61 {
        ; * Stack frame (at entry) *
        ; Param size: 4
        PUSH      BC
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
//   62     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//   63 
//   64     p_gw->iLCDAPI->iAddress = aAddress;
        MOVW      HL, AX
        MOVW      AX, [DE]
        XCHW      AX, HL
        MOVW      [HL+0x34], AX
        MOVW      AX, BC
        MOVW      [HL+0x36], AX
//   65 
//   66     p_gw->iLCDAPI->iFont = USE_DEFAULT_FONT ;
        MOVW      BC, #Fontx5x7_table
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOVW      AX, BC
        MOVW      [HL], AX
//   67 
//   68     /* FP_STATUS */
//   69     p_gw->iLCDAPI->iStatusRegister = 0x01 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        ONEW      AX
        MOVW      [HL+0x32], AX
//   70 
//   71     p_gw->iLCDAPI->iFP_API_MAJOR_VERSION = 0x01 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        ONEW      AX
        MOVW      [HL+0x16], AX
        CLRW      AX
        MOVW      [HL+0x18], AX
//   72     p_gw->iLCDAPI->iFP_API_MINOR_VERSION = 0x00 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        CLRW      AX
        MOVW      [HL+0x1A], AX
        MOVW      [HL+0x1C], AX
//   73     p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID = 0x01 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        ONEW      AX
        MOVW      [HL+0x1E], AX
        CLRW      AX
        MOVW      [HL+0x20], AX
//   74     p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION = VERSION_MAJOR ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        ONEW      AX
        MOVW      [HL+0x22], AX
        CLRW      AX
        MOVW      [HL+0x24], AX
//   75     p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION = VERSION_MINOR ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        CLRW      AX
        MOVW      [HL+0x26], AX
        MOVW      [HL+0x28], AX
//   76     p_gw->iLCDAPI->iMAX_HEIGHT = 64 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOVW      AX, #0x40
        MOVW      [HL+0x2A], AX
        CLRW      AX
        MOVW      [HL+0x2C], AX
//   77     p_gw->iLCDAPI->iMAX_WIDTH = 96 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOVW      AX, #0x60
        MOVW      [HL+0x2E], AX
        CLRW      AX
        MOVW      [HL+0x30], AX
//   78             
//   79     /* Set Default Contrast */
//   80     p_gw->iLCDAPI->iContrast = 95 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOVW      AX, #0x5F
        MOVW      [HL+0x38], AX
        CLRW      AX
        MOVW      [HL+0x3A], AX
//   81     p_gw->iLCDAPI->iContrastBoost = 5 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOV       A, #0x5
        MOV       [HL+0x3C], A
//   82     p_gw->iLCDAPI->iFrameRate = 137 ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOVW      AX, #0x89
        MOVW      [HL+0x3E], AX
        CLRW      AX
        MOVW      [HL+0x40], AX
//   83     
//   84     /* Turn on the LCD commands */
//   85     ST7579_Config(aHandle) ;
        MOVW      AX, DE
        CALL      ST7579_Config
//   86 
//   87     return GLYPH_ERROR_NONE ;
        CLRB      A
        BR        N:??Subroutine19_0
        REQUIRE ?CLRL78_V1_0_L00
//   88 }

        RSEG CODE:CODE:NOROOT(0)
?Subroutine0:
        CALL      HL
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine19_0:
        POP       DE
        POP       BC
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine20_0:
        CALL      N:?FUNC_LEAVE_L06
        DW        0x4
        REQUIRE ?CLRL78_V1_0_L00
//   89 
//   90 /******************************************************************************
//   91 * ID : 30.2
//   92 * Outline : ST7579_Close
//   93 * Include : ST7579_LCD.h
//   94 * Function Name: ST7579_Close
//   95 * Description : Clear all settings in the global ST7579_LCD.
//   96 * Argument : aHandle - the Glyph handle to setup for the LCD and Communications.
//   97 * Return Value : 0=success, not 0= error
//   98 * Calling Functions : GlyphOpen
//   99 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  100 T_glyphError ST7579_Close(T_glyphHandle aHandle)
ST7579_Close:
//  101 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
//  102     return GLYPH_ERROR_NONE ;
        CLRB      A
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  103 }
//  104 

        RSEG CODE:CODE:NOROOT(0)
//  105 uint8_t No_Clobber_Axes(uint8_t cmd, uint32_t col, uint32_t line)
No_Clobber_Axes:
//  106 {
        ; * Stack frame (at entry) *
        ; Param size: 8
        PUSH      BC
        PUSH      DE
        ; Auto size: 0
//  107     uint8_t new_cmd = cmd;
        MOV       D, A
//  108     
//  109     if (col == ((LCD_W/2)-4))
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        CALL      N:?Subroutine17
??CrossCallReturnLabel_41:
        SKNZ
        CMPW      AX, #0x2C
??No_Clobber_Axes_0:
        BNZ       ??ST7579_SetLine_0
//  110         new_cmd = 0xFF;     // Preserve the y-axis
        MOV       D, #0xFF
        BR        S:??ST7579_SetLine_1
//  111     else if (line <= ((LCD_H/2)-4) && (line+8) >= ((LCD_H/2)-4))
??ST7579_SetLine_0:
        MOVW      AX, [SP+0x0E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0C]
        XCHW      AX, BC
        CMPW      AX, #0x0
        XCHW      AX, BC
        SKNZ
        CMPW      AX, #0x1D
??No_Clobber_Axes_1:
        BNC       ??ST7579_SetLine_1
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??No_Clobber_Axes_2:
        CALL      N:?Subroutine17
??CrossCallReturnLabel_42:
        SKNZ
        CMPW      AX, #0x1C
??No_Clobber_Axes_3:
        BC        ??ST7579_SetLine_1
//  112         new_cmd |= (1 << ((LCD_H/2)-4) % 8);
        MOV       A, D
        OR        A, #0x10
        MOV       D, A
//  113     
//  114     return new_cmd;
??ST7579_SetLine_1:
        MOV       A, D
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  115 }

        RSEG CODE:CODE:NOROOT(0)
?Subroutine1:
        POP       DE
        POP       BC
        CALL      N:?FUNC_LEAVE_L06
        DW        0x8
        REQUIRE ?CLRL78_V1_0_L00
//  116 
//  117 /******************************************************************************
//  118 * ID : 31.0
//  119 * Outline : ST7579_Write
//  120 * Include : ST7579_LCD.h
//  121 * Function Name: ST7579_Write
//  122 * Description : Write to the LCD using a Glyph Register value, to the Glyph
//  123 * data storage or run an LCD Glyph Command.
//  124 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  125 *          : aRegister - specifies what to do.
//  126 *          : aValue - data if required
//  127 * Return Value : 0=success, not 0= error
//  128 * Calling Functions : GlyphWrite
//  129 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  130 T_glyphError ST7579_Write(T_glyphHandle aHandle, uint32_t aRegister, uint32_t aValue)
ST7579_Write:
//  131 {
        ; * Stack frame (at entry) *
        ; Param size: 8
        PUSH      BC
        PUSH      DE
        PUSH      AX
        ; Auto size: 16
        SUBW      SP, #0xE
//  132     uint32_t pCounter;
//  133     uint32_t column;
//  134     uint32_t line;
//  135     const uint8_t *p_char;
//  136     uint8_t width;
//  137     uint8_t height;
//  138     const uint8_t *p_charData;
//  139     uint32_t page;
//  140     T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
        CALL      N:?Subroutine16
//  141     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  142     uint8_t cmd = 0xFF;
//  143 
//  144     p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
//  145 
//  146     switch (aRegister) {
??CrossCallReturnLabel_39:
        MOVW      AX, [SP+0x1A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x18]
        MOVW      HL, #LWRD(??ST7579_Write_0)
        MOV       ES, #BYTE3(??ST7579_Write_0)
        MOV       CS, #BYTE3(ST7579_Write)
        BR        N:?L_SSWITCH_L10
//  147         case GLYPH_CHAR_X:
//  148             p_gw->iLCDAPI->iCharX_Position = aValue ;
??ST7579_Write_2:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
??ST7579_Write_3:
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x02], AX
        MOVW      AX, BC
        MOVW      [HL+0x04], AX
        BR        S:??ST7579_SetLine_2
//  149             error = GLYPH_ERROR_NONE ;
//  150             break ;
//  151         case GLYPH_CHAR_Y:
//  152             p_gw->iLCDAPI->iCharY_Position = aValue ;
??ST7579_Write_4:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x06], AX
        MOVW      AX, BC
        MOVW      [HL+0x08], AX
        BR        S:??ST7579_SetLine_2
//  153             error = GLYPH_ERROR_NONE ;
//  154             break ;
//  155         case GLYPH_FONT:
//  156             p_gw->iLCDAPI->iCharFont = aValue;
??ST7579_Write_5:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x12], AX
        MOVW      AX, BC
        MOVW      [HL+0x14], AX
//  157             switch (aValue) {
        MOVW      AX, [SP+0x1C]
        CALL      N:?Subroutine17
??CrossCallReturnLabel_43:
        BNZ       ??ST7579_SetLine_2
        CLRW      BC
        CMPW      AX, BC
        BZ        ??ST7579_SetLine_3
        CMPW      AX, #0x2
        BZ        ??ST7579_SetLine_4
        BR        S:??ST7579_SetLine_2
//  158             #ifdef USE_GLYPH_FONT_BITMAP
//  159                 case GLYPH_FONT_BITMAP:
//  160                     p_gw->iLCDAPI->iFont = Bitmaps_table ;
//  161                     break ;
//  162             #endif
//  163             #ifdef USE_GLYPH_FONT_HELVR10
//  164                 case GLYPH_FONT_HELVR10:
//  165                     p_gw->iLCDAPI->iFont = FontHelvr10_table ;
//  166                     break ;
//  167             #endif
//  168             #ifdef USE_GLYPH_FONT_8_BY_16
//  169                 case GLYPH_FONT_8_BY_16:
//  170                     p_gw->iLCDAPI->iFont = Font8x16_table ;
//  171                     break ;
//  172             #endif
//  173             #ifdef USE_GLYPH_FONT_8_BY_8
//  174                 case GLYPH_FONT_8_BY_8:
//  175                     p_gw->iLCDAPI->iFont = Font8x8_table ;
??ST7579_SetLine_3:
        MOVW      HL, #Font8x8_table
        BR        S:??ST7579_SetLine_5
//  176                     break ;
//  177             #endif
//  178             #ifdef USE_GLYPH_FONT_WINFREE
//  179                 case GLYPH_FONT_WINFREESYSTEM14_BY_16:
//  180                     p_gw->iLCDAPI->iFont = FontWinFreeSystem14x16_table ;
//  181                     break ;
//  182             #endif
//  183             #ifdef USE_GLYPH_FONT_5_BY_7
//  184                 case GLYPH_FONT_5_BY_7:
//  185                     p_gw->iLCDAPI->iFont = Fontx5x7_table ;
??ST7579_SetLine_4:
        MOVW      HL, #Fontx5x7_table
??ST7579_SetLine_5:
        MOVW      AX, [SP+0x0E]
        MOVW      DE, AX
        MOVW      AX, [DE]
        MOVW      DE, AX
        MOVW      AX, HL
        MOVW      [DE], AX
//  186                     break ;
//  187             #endif
//  188             #ifdef USE_GLYPH_FONT_6_BY_13
//  189                 case GLYPH_FONT_6_BY_13:
//  190                     p_gw->iLCDAPI->iFont = Fontx6x13_table ;
//  191                     break ;
//  192             #endif
//  193 			#ifdef USE_GLYPH_FONT_LOGOS
//  194                 case GLYPH_FONT_LOGOS:
//  195                     p_gw->iLCDAPI->iFont = Logos_table ;
//  196                     break ;
//  197             #endif
//  198             }
//  199             error = GLYPH_ERROR_NONE ;
??ST7579_SetLine_2:
        MOV       D, #0x0
//  200             break ;
//  201         case GLYPH_DRAW_CMD:
//  202             switch (aValue)  {
//  203                 case 1:
//  204                     ST7579_SetLine(p_gw, 0);
//  205                     for (pCounter=0;pCounter<8;pCounter++)  {
//  206                         ST7579_SetPage(aHandle, pCounter);
//  207                         ST7579_SetChar(aHandle, 0);
//  208                         for (column=0; column<128; column++)    {
//  209                             p_gw->iCommAPI->iDataSend(0x00);
//  210                         }
//  211                     }
//  212                     ST7579_SetPage(aHandle, 0);
//  213                     ST7579_SetChar(aHandle, 0);
//  214                     break;
//  215                 case 2:
//  216                     /* use reverse video to detect pixel changes */
//  217                     ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_REVERSE);
//  218                     break;
//  219                 case 3:
//  220                     /* use normal video to detect pixel changes */
//  221                     ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_NORMAL);
//  222                     break;
//  223                 case 6:
//  224                     for (pCounter=0;pCounter<8;pCounter++)  {
//  225                         ST7579_SetLine(aHandle, 0);
//  226                         ST7579_SetChar(aHandle, 0);              
//  227                         ST7579_SetPage(aHandle, pCounter);
//  228                         for (column=0;column<16;column++)   {
//  229                             p_gw->iCommAPI->iDataSend(0xFF);
//  230                             p_gw->iCommAPI->iDataSend(0x01);
//  231                             p_gw->iCommAPI->iDataSend(0x01);
//  232                             p_gw->iCommAPI->iDataSend(0x01);
//  233                             p_gw->iCommAPI->iDataSend(0x01);
//  234                             p_gw->iCommAPI->iDataSend(0x01);
//  235                             p_gw->iCommAPI->iDataSend(0x01);
//  236                             p_gw->iCommAPI->iDataSend(0x01);
//  237                         }
//  238                     }                                       
//  239                     break;
//  240                     
//  241                 case 7: // Draw block
//  242                     
//  243                     line = p_gw->iLCDAPI->iCharY_Position - (p_gw->iLCDAPI->iCharY_Position % 8);   // Gets the nearest block boundary
//  244                     cmd = 0xFF;
//  245                     
//  246                     if (p_gw->iLCDAPI->iCharY_Position < (line + 8))
//  247                             cmd &= (0xFF << (p_gw->iLCDAPI->iCharY_Position - line));
//  248                     
//  249                     for ( ; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
//  250                         
//  251                         ST7579_SetPage(aHandle, line/8);
//  252                         ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
//  253                        
//  254                         if ((line+8) > p_gw->iLCDAPI->iCharY2_Position) /* If we're ending midway through a line */
//  255                             cmd &= (0xFF >> ((line+7) - p_gw->iLCDAPI->iCharY2_Position));
//  256                         
//  257                         /* This code fills in the row column by column, one px at a time */
//  258                         for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
//  259                             p_gw->iCommAPI->iDataSend(cmd); // No_Clobber_Axes(cmd, column, line));
//  260                         }
//  261                         
//  262                         cmd = 0xFF;
//  263                     }
//  264                     break;
//  265                     
//  266                 case 8: // Erase block
//  267                     line = p_gw->iLCDAPI->iCharY_Position - (p_gw->iLCDAPI->iCharY_Position % 8);
//  268                     cmd = 0x00;
//  269                     
//  270                     if (p_gw->iLCDAPI->iCharY_Position < (line + 8))
//  271                             cmd &= (0xFF << (p_gw->iLCDAPI->iCharY_Position - line));
//  272                     
//  273                     for ( ; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
//  274                         ST7579_SetPage(aHandle, line/8);
//  275                         ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
//  276                         for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
//  277                             p_gw->iCommAPI->iDataSend(cmd); // No_Clobber_Axes(cmd, column, line));
//  278                         }
//  279                     }
//  280                     break;
//  281             }
//  282             error = GLYPH_ERROR_NONE ;
//  283             break ;
//  284         case GLYPH_DRAW_CHAR:
//  285             p_char = p_gw->iLCDAPI->iFont[aValue];
//  286             width = p_char[0];
//  287             height = p_char[1];
//  288             p_charData = &p_char[2];
//  289             for (page=0; page<height; page+=8)  {
//  290                 ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
//  291                 ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
//  292                 for (column=0; column<width; column++, p_charData++)    {
//  293                     p_gw->iCommAPI->iDataSend(*p_charData);
//  294                 }
//  295             }
//  296 			p_gw->iLCDAPI->iCharX_Position += width;
//  297             error = GLYPH_ERROR_NONE ;
//  298             break ;
//  299         case GLYPH_CHAR_ERASE:
//  300             p_char = p_gw->iLCDAPI->iFont[aValue];
//  301             width = p_char[0];
//  302             height = p_char[1];
//  303             for (page=0; page<height; page+=8)  {
//  304                 ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
//  305                 ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
//  306                 for (column=0; column<width; column++, p_charData++)    {
//  307                     p_gw->iCommAPI->iDataSend(0x00);
//  308                 }
//  309             }
//  310 			p_gw->iLCDAPI->iCharX_Position += width;
//  311             error = GLYPH_ERROR_NONE ;
//  312             break ;
//  313         case GLYPH_INVERT_CHAR:
//  314             p_char = (uint8_t *)p_gw->iLCDAPI->iFont[aValue];
//  315             width = p_char[0];
//  316             height = p_char[1];
//  317             p_charData = &p_char[2];
//  318             for (page=0; page<height; page+=8)  {
//  319                 ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
//  320                 ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
//  321                 for (column=0; column<width; column++, p_charData++)    {
//  322 									// Output the inverted values to invert character
//  323                     p_gw->iCommAPI->iDataSend(*p_charData ^ 0xFF);
//  324                 }
//  325             }
//  326 						p_gw->iLCDAPI->iCharX_Position += width;
//  327             error = GLYPH_ERROR_NONE;
//  328             break;
//  329         case GLYPH_CHAR_X2:
//  330             p_gw->iLCDAPI->iCharX2_Position = aValue ;
//  331             error = GLYPH_ERROR_NONE ;
//  332             break ;
//  333         case GLYPH_CHAR_Y2:
//  334             p_gw->iLCDAPI->iCharY2_Position = aValue ;
//  335             error = GLYPH_ERROR_NONE ;
//  336             break ;
//  337         case GLYPH_FRAME_RATE:
//  338             p_gw->iLCDAPI->iFrameRate = (int32_t)aValue ;
//  339             ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
//  340             error = GLYPH_ERROR_NONE ;
//  341             break ;
//  342         case GLYPH_CONTRAST:
//  343             p_gw->iLCDAPI->iContrast = (int32_t)aValue ;
//  344             ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
//  345             error = GLYPH_ERROR_NONE ;
//  346             break ;
//  347         case GLYPH_CONTRAST_BOOST:
//  348             p_gw->iLCDAPI->iContrastBoost = (int8_t)aValue ;
//  349             ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
//  350             error = GLYPH_ERROR_NONE ;
//  351             break ;
//  352     }
//  353 
//  354     p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
??ST7579_Write_6:
        MOVW      AX, [SP+0x0E]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        CLRW      AX
        MOVW      [HL+0x32], AX
//  355     return error ;
        MOV       A, D
        ADDW      SP, #0x10
        BR        N:?Subroutine1
??ST7579_Write_7:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, #LWRD(??ST7579_Write_1)
        MOV       ES, #BYTE3(??ST7579_Write_1)
        BR        N:?L_SSWITCH_L10
??ST7579_Write_8:
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetLine
        CLRW      AX
        MOVW      [SP+0x02], AX
        MOVW      [SP+0x04], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        MOV       D, #0x0
??ST7579_Write_9:
        MOV       A, [SP+0x02]
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        MOV       B, #0x80
??ST7579_Write_10:
        MOV       A, D
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_23:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        DEC       B
        BNZ       ??ST7579_Write_10
        MOVW      AX, [SP+0x04]
        MOVW      BC, AX
        MOVW      AX, [SP+0x02]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_11:
        MOVW      [SP+0x02], AX
        MOVW      AX, BC
        MOVW      [SP+0x04], AX
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine17
??CrossCallReturnLabel_44:
        SKNZ
        CMPW      AX, #0x8
??ST7579_Write_12:
        BC        ??ST7579_Write_9
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        BR        S:??ST7579_SetLine_2
??ST7579_Write_13:
        CLRW      AX
        PUSH      AX
        MOVW      AX, #0x280D
??ST7579_Write_14:
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      ST7579_Send16bitsCommand
        BR        N:??ST7579_SetLine_2
??ST7579_Write_15:
        CLRW      AX
        PUSH      AX
        MOVW      AX, #0x280C
        BR        S:??ST7579_Write_14
??ST7579_Write_16:
        CLRW      AX
        MOVW      [SP+0x02], AX
        MOVW      [SP+0x04], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
??ST7579_Write_17:
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetLine
        CLRB      B
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        MOV       A, [SP+0x02]
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOV       B, #0x10
??ST7579_Write_18:
        MOV       A, #0xFF
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_24:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_25:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_26:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_27:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_28:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_29:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_30:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        ONEB      A
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_31:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        DEC       B
        BNZ       ??ST7579_Write_18
        MOVW      AX, [SP+0x04]
        MOVW      BC, AX
        MOVW      AX, [SP+0x02]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_19:
        MOVW      [SP+0x02], AX
        MOVW      AX, BC
        MOVW      [SP+0x04], AX
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine17
??CrossCallReturnLabel_45:
        SKNZ
        CMPW      AX, #0x8
??ST7579_Write_20:
        SKC
        BR        N:??ST7579_SetLine_2
        BR        N:??ST7579_Write_17
??ST7579_Write_21:
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine12
??CrossCallReturnLabel_33:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine5
??CrossCallReturnLabel_8:
        POP       DE
        POP       HL
        SUBW      AX, DE
        SKNC
        DECW      BC
??ST7579_Write_22:
        MOVW      [SP+0x08], AX
        MOVW      AX, BC
        MOVW      [SP+0x0A], AX
        MOV       E, #0xFF
        MOVW      AX, [SP+0x08]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_23:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine5
??CrossCallReturnLabel_9:
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_SetLine_6
        MOV       A, [SP+0x08]
        MOV       D, A
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine13
??CrossCallReturnLabel_35:
        MOV       A, X
        SUB       A, D
        MOV       C, A
        MOV       D, #0x0
        MOVW      AX, DE
        CALL      N:?I_LSH_L02
        MOVW      DE, AX
        BR        S:??ST7579_SetLine_6
??ST7579_Write_24:
        MOV       A, E
        MOV       B, A
        MOVW      AX, [SP]
        CALL      N:?Subroutine8
??CrossCallReturnLabel_54:
        CALL      HL
        MOVW      AX, [SP+0x06]
        MOVW      BC, AX
        MOVW      AX, [SP+0x04]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_25:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
        MOVW      [SP+0x06], AX
??ST7579_Write_26:
        MOVW      AX, [SP+0x06]
        PUSH      AX
        MOVW      AX, [SP+0x06]
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine10
??CrossCallReturnLabel_20:
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_Write_24
        MOV       E, #0xFF
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_27:
        MOVW      [SP+0x08], AX
        MOVW      AX, BC
        MOVW      [SP+0x0A], AX
??ST7579_SetLine_6:
        MOVW      AX, [SP+0x0A]
        PUSH      AX
        MOVW      AX, [SP+0x0A]
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine7
??CrossCallReturnLabel_16:
        CALL      N:?UL_CMP_L03
        SKNC
        BR        N:??ST7579_SetLine_2
        MOVW      AX, [SP+0x08]
        SHRW      AX, 0x3
        MOV       A, X
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine4
??CrossCallReturnLabel_3:
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_28:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine7
??CrossCallReturnLabel_17:
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_SetLine_7
        MOVW      AX, [SP+0x0E]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x0E]
        MOV       A, X
        MOV       D, A
        MOV       A, [SP+0x08]
        ADD       A, #0x7
        SUB       A, D
        MOV       C, A
        MOVW      AX, #0xFF
        CALL      N:?SI_RSH_L02
        MOV       A, E
        AND       A, X
        MOV       E, A
??ST7579_SetLine_7:
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine6
??CrossCallReturnLabel_12:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
        MOVW      [SP+0x06], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        BR        N:??ST7579_Write_26
??ST7579_Write_29:
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine12
??CrossCallReturnLabel_34:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine5
??CrossCallReturnLabel_10:
        POP       DE
        POP       HL
        SUBW      AX, DE
        SKNC
        DECW      BC
??ST7579_Write_30:
        MOVW      [SP+0x08], AX
        MOVW      AX, BC
        MOVW      [SP+0x0A], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        BR        S:??ST7579_SetLine_8
??ST7579_Write_31:
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x04]
        CALL      N:??Subroutine26_0
??CrossCallReturnLabel_65:
        CLRB      A
        CALL      HL
        MOVW      AX, [SP+0x06]
        MOVW      BC, AX
        MOVW      AX, [SP+0x04]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_32:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
        MOVW      [SP+0x06], AX
        PUSH      BC
        MOVW      AX, [SP+0x06]
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine10
??CrossCallReturnLabel_21:
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_Write_31
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_33:
        MOVW      [SP+0x08], AX
        MOVW      AX, BC
        MOVW      [SP+0x0A], AX
??ST7579_SetLine_8:
        MOVW      AX, [SP+0x0A]
        PUSH      AX
        MOVW      AX, [SP+0x0A]
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine7
??CrossCallReturnLabel_18:
        CALL      N:?UL_CMP_L03
        SKNC
        BR        N:??ST7579_SetLine_2
        MOVW      AX, [SP+0x08]
        SHRW      AX, 0x3
        MOV       A, X
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine4
??CrossCallReturnLabel_4:
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine6
??CrossCallReturnLabel_13:
        BR        S:??ST7579_Write_32
??ST7579_Write_34:
        MOVW      AX, [SP+0x1C]
        ADDW      AX, AX
        MOVW      DE, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine3
??CrossCallReturnLabel_0:
        MOV       [SP+0x02], A
        MOVW      AX, HL
        INCW      AX
        INCW      AX
        MOVW      [SP+0x08], AX
        CLRW      AX
        MOVW      [SP+0x0A], AX
        MOVW      [SP+0x0C], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        BR        S:??ST7579_SetLine_9
??ST7579_Write_35:
        MOVW      AX, [SP+0x08]
        MOVW      HL, AX
        MOV       A, [HL]
        MOV       B, A
        MOVW      AX, [SP]
        CALL      N:?Subroutine8
??CrossCallReturnLabel_55:
        CALL      HL
        MOVW      AX, [SP+0x06]
        MOVW      BC, AX
        MOVW      AX, [SP+0x04]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_36:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
        MOVW      [SP+0x06], AX
        MOVW      AX, [SP+0x08]
        INCW      AX
        MOVW      [SP+0x08], AX
??ST7579_Write_37:
        MOV       A, E
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        CALL      N:?UL_CMP_L03
        BC        ??ST7579_Write_35
        MOVW      AX, [SP+0x0C]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0A]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_38:
        MOVW      [SP+0x0A], AX
        MOVW      AX, BC
        MOVW      [SP+0x0C], AX
??ST7579_SetLine_9:
        MOV       A, [SP+0x02]
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x10]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_SetLine_10
        PUSH      AX
        MOVW      AX, [SP+0x10]
        CALL      N:?Subroutine13
??CrossCallReturnLabel_36:
        POP       HL
        ADDW      AX, HL
        SHRW      AX, 0x3
        MOV       A, X
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine4
??CrossCallReturnLabel_5:
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        CLRW      AX
        MOVW      [SP+0x04], AX
        MOVW      [SP+0x06], AX
        BR        S:??ST7579_Write_37
??ST7579_SetLine_10:
        MOV       A, E
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      N:?Subroutine6
??CrossCallReturnLabel_14:
        POP       DE
        POP       HL
        ADDW      AX, DE
        SKC
        BR        N:??ST7579_Write_3
        INCW      BC
        BR        N:??ST7579_Write_3
??ST7579_Write_39:
        MOVW      AX, [SP+0x1C]
        ADDW      AX, AX
        MOVW      DE, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine3
??CrossCallReturnLabel_1:
        MOV       [SP+0x02], A
        CLRW      AX
        MOVW      [SP+0x0A], AX
        MOVW      [SP+0x0C], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        MOV       D, #0x0
        BR        S:??ST7579_SetLine_11
??ST7579_Write_40:
        MOV       A, D
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        CALL      N:?Subroutine11
??CrossCallReturnLabel_32:
        POP       AX
        MOV       CS, #0x0
        CALL      HL
        MOVW      AX, [SP+0x04]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_41:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
??ST7579_Write_42:
        MOVW      [SP+0x06], AX
        MOV       A, E
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        CALL      N:?UL_CMP_L03
        BC        ??ST7579_Write_40
        MOVW      AX, [SP+0x0C]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0A]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_43:
        MOVW      [SP+0x0A], AX
        MOVW      AX, BC
        MOVW      [SP+0x0C], AX
??ST7579_SetLine_11:
        MOV       A, [SP+0x02]
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x10]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?UL_CMP_L03
        BNC       ??ST7579_SetLine_10
        PUSH      AX
        MOVW      AX, [SP+0x10]
        CALL      N:?Subroutine13
??CrossCallReturnLabel_37:
        POP       HL
        ADDW      AX, HL
        SHRW      AX, 0x3
        MOV       A, X
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine4
??CrossCallReturnLabel_6:
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        CLRW      AX
        MOVW      [SP+0x04], AX
        BR        S:??ST7579_Write_42
??ST7579_Write_44:
        MOVW      AX, [SP+0x1C]
        ADDW      AX, AX
        MOVW      DE, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine3
??CrossCallReturnLabel_2:
        MOV       [SP+0x02], A
        MOVW      AX, HL
        INCW      AX
        INCW      AX
        MOVW      [SP+0x08], AX
        CLRW      AX
        MOVW      [SP+0x0A], AX
        MOVW      [SP+0x0C], AX
        MOVW      AX, [SP+0x0E]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        BR        S:??ST7579_SetLine_12
??ST7579_Write_45:
        MOVW      AX, [SP+0x08]
        MOVW      HL, AX
        MOV       A, [HL]
        XOR       A, #0xFF
        MOV       B, A
        MOVW      AX, [SP]
        CALL      N:?Subroutine8
??CrossCallReturnLabel_56:
        CALL      HL
        MOVW      AX, [SP+0x06]
        MOVW      BC, AX
        MOVW      AX, [SP+0x04]
        ADDW      AX, #0x1
        SKNC
        INCW      BC
??ST7579_Write_46:
        MOVW      [SP+0x04], AX
        MOVW      AX, BC
        MOVW      [SP+0x06], AX
        MOVW      AX, [SP+0x08]
        INCW      AX
        MOVW      [SP+0x08], AX
??ST7579_Write_47:
        MOV       A, E
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        CALL      N:?UL_CMP_L03
        BC        ??ST7579_Write_45
        MOVW      AX, [SP+0x0C]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0A]
        ADDW      AX, #0x8
        SKNC
        INCW      BC
??ST7579_Write_48:
        MOVW      [SP+0x0A], AX
        MOVW      AX, BC
        MOVW      [SP+0x0C], AX
??ST7579_SetLine_12:
        MOV       A, [SP+0x02]
        MOV       X, A
        CLRB      A
        CLRW      BC
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x10]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?UL_CMP_L03
        SKC
        BR        N:??ST7579_SetLine_10
        PUSH      AX
        MOVW      AX, [SP+0x10]
        CALL      N:?Subroutine13
??CrossCallReturnLabel_38:
        POP       HL
        ADDW      AX, HL
        SHRW      AX, 0x3
        MOV       A, X
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetPage
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine4
??CrossCallReturnLabel_7:
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetChar
        CLRW      AX
        MOVW      [SP+0x04], AX
        MOVW      [SP+0x06], AX
        BR        S:??ST7579_Write_47
??ST7579_Write_49:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x0A], AX
        MOVW      AX, BC
        MOVW      [HL+0x0C], AX
        BR        N:??ST7579_SetLine_2
??ST7579_Write_50:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x0E], AX
        MOVW      AX, BC
        MOVW      [HL+0x10], AX
        BR        N:??ST7579_SetLine_2
??ST7579_Write_51:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x3E], AX
        MOVW      AX, BC
        MOVW      [HL+0x40], AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine14
??CrossCallReturnLabel_51:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      ST7579_SetFrameRate
        BR        N:??ST7579_SetLine_2
??ST7579_Write_52:
        MOVW      AX, [SP+0x1E]
        MOVW      BC, AX
        MOVW      AX, [SP+0x1C]
        MOVW      HL, AX
        MOVW      AX, [SP+0x0E]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        POP       AX
        MOVW      [HL+0x38], AX
        MOVW      AX, BC
        MOVW      [HL+0x3A], AX
        MOVW      AX, [SP+0x0E]
        CALL      N:?Subroutine15
??CrossCallReturnLabel_48:
        PUSH      BC
        PUSH      AX
        MOVW      AX, [SP+0x12]
        CALL      ST7579_SetVO_Range
        BR        N:??ST7579_SetLine_2
??ST7579_Write_53:
        MOV       A, [SP+0x1C]
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOV       A, B
        MOV       [HL+0x3C], A
        MOVW      AX, [SP+0x0E]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOV       A, [HL+0x3C]
        MOV       B, A
        MOVW      AX, [SP+0x0E]
        CALL      ST7579_SetSystemBiasBooster
        BR        N:??ST7579_SetLine_2
        REQUIRE ?CLRL78_V1_0_L00
//  356 }

        RSEG CODE:CODE:NOROOT(0)
?Subroutine17:
        XCHW      AX, BC
        CMPW      AX, #0x0
        MOVW      AX, BC
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine15:
        MOVW      HL, AX
        MOVW      AX, [HL]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine21_0:
        MOVW      HL, AX
        MOVW      AX, [HL+0x3A]
        MOVW      BC, AX
        MOVW      AX, [HL+0x38]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine14:
        MOVW      HL, AX
        MOVW      AX, [HL]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine22_0:
        MOVW      HL, AX
        MOVW      AX, [HL+0x40]
        MOVW      BC, AX
        MOVW      AX, [HL+0x3E]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine13:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x06]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine12:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x06]
        CLRW      BC
        MOV       A, X
        CLRB      X
        AND       A, #0x7
        XCH       A, X
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine11:
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x04]
        MOVW      HL, AX
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine8:
        MOVW      HL, AX
        MOVW      AX, [HL]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ?Subroutine18
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine23_0:
        MOVW      HL, AX
        MOVW      AX, [HL+0x04]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ?Subroutine18
        ; // Fall through to label ?Subroutine18

        RSEG CODE:CODE:NOROOT(0)
?Subroutine18:
        MOVW      HL, AX
        MOV       CS, #0x0
        MOV       A, B
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine4:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        MOV       A, X
        MOV       B, A
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine3:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL]
        ADDW      AX, DE
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOV       A, [HL]
        MOV       E, A
        MOV       A, [HL+0x01]
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  357 
//  358 /******************************************************************************
//  359 * ID : 32.0
//  360 * Outline : ST7579_Read
//  361 * Include : ST7579_LCD.h
//  362 * Function Name: ST7579_Read
//  363 * Description : Read data from the glyph data storage using a Glyph Register
//  364 *               value.
//  365 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  366 *          : aRegister - specifies what to receive.
//  367 *          : aValue - data received.
//  368 * Return Value : 0=success, not 0= error
//  369 * Calling Functions : GlyphRead
//  370 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  371 T_glyphError ST7579_Read(T_glyphHandle aHandle, uint32_t aRegister, uint32_t *aValue)
ST7579_Read:
//  372 {
        ; * Stack frame (at entry) *
        ; Param size: 4
        PUSH      DE
        PUSH      AX
        PUSH      BC
        ; Auto size: 4
//  373     T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
        CALL      N:?Subroutine16
//  374     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  375 
//  376     p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
//  377 
//  378     switch (aRegister) {
??CrossCallReturnLabel_40:
        MOVW      AX, [SP+0x0C]
        MOVW      BC, AX
        MOVW      AX, [SP+0x0A]
        MOVW      HL, #LWRD(??ST7579_Read_0)
        MOV       ES, #BYTE3(??ST7579_Read_0)
        MOV       CS, #BYTE3(ST7579_Read)
        BR        N:?L_SSWITCH_L10
//  379         case GLYPH_STATUS:
//  380             *aValue = GLYPH_STATUS_BUSY ;
??ST7579_Read_1:
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, #0x2
        MOVW      [HL], AX
        CLRW      AX
        MOVW      [HL+0x02], AX
//  381             if (p_gw->iLCDAPI->iStatusRegister == 0)
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x32]
        CLRW      BC
        CMPW      AX, BC
        SKZ
        BR        N:??ST7579_SetLine_13
//  382             {
//  383                 *aValue = GLYPH_STATUS_READY ;
        MOVW      AX, [SP]
        MOVW      HL, AX
        CLRW      AX
        MOVW      [HL], AX
        MOVW      [HL+0x02], AX
//  384             }
//  385             error = GLYPH_ERROR_NONE ;
        BR        N:??ST7579_SetLine_13
//  386             break ;
//  387         case GLYPH_CHAR_X:
//  388             *aValue = p_gw->iLCDAPI->iCharX_Position ;
??ST7579_Read_2:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine6
??CrossCallReturnLabel_15:
        BR        S:??ST7579_SetLine_14
//  389             error = GLYPH_ERROR_NONE ;
//  390             break ;
//  391         case GLYPH_CHAR_Y:
//  392             *aValue = p_gw->iLCDAPI->iCharY_Position ;
??ST7579_Read_3:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine5
??CrossCallReturnLabel_11:
        BR        S:??ST7579_SetLine_14
//  393             error = GLYPH_ERROR_NONE ;
//  394             break ;
//  395         case GLYPH_FONT:
//  396             *aValue = p_gw->iLCDAPI->iCharFont ;
??ST7579_Read_4:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x14]
        MOVW      BC, AX
        MOVW      AX, [HL+0x12]
        BR        S:??ST7579_SetLine_14
//  397             error = GLYPH_ERROR_NONE ;
//  398             break ;
//  399         case GLYPH_API_MAJOR_VERSION:
//  400             *aValue = p_gw->iLCDAPI->iFP_API_MAJOR_VERSION ;
??ST7579_Read_5:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x18]
        MOVW      BC, AX
        MOVW      AX, [HL+0x16]
        BR        S:??ST7579_SetLine_14
//  401             error = GLYPH_ERROR_NONE ;
//  402             break ;
//  403         case GLYPH_API_MINOR_VERSION:
//  404             *aValue = p_gw->iLCDAPI->iFP_API_MINOR_VERSION ;
??ST7579_Read_6:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x1C]
        MOVW      BC, AX
        MOVW      AX, [HL+0x1A]
        BR        S:??ST7579_SetLine_14
//  405             error = GLYPH_ERROR_NONE ;
//  406             break ;
//  407         case GLYPH_IMPLEMENTATION_ID:
//  408             *aValue = p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID ;
??ST7579_Read_7:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x20]
        MOVW      BC, AX
        MOVW      AX, [HL+0x1E]
        BR        S:??ST7579_SetLine_14
//  409             error = GLYPH_ERROR_NONE ;
//  410             break ;
//  411         case GLYPH_IMPL_MAJOR_VERSION:
//  412             *aValue = p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION ;
??ST7579_Read_8:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x24]
        MOVW      BC, AX
        MOVW      AX, [HL+0x22]
        BR        S:??ST7579_SetLine_14
//  413             error = GLYPH_ERROR_NONE ;
//  414             break ;
//  415         case GLYPH_IMPL_MINOR_VERSION:
//  416             *aValue = p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION ;
??ST7579_Read_9:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x28]
        MOVW      BC, AX
        MOVW      AX, [HL+0x26]
        BR        S:??ST7579_SetLine_14
//  417             error = GLYPH_ERROR_NONE ;
//  418             break ;
//  419         case GLYPH_CHAR_X2:
//  420             *aValue = p_gw->iLCDAPI->iCharX2_Position ;
??ST7579_Read_10:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine10
??CrossCallReturnLabel_22:
        BR        S:??ST7579_SetLine_14
//  421             error = GLYPH_ERROR_NONE ;
//  422             break ;
//  423         case GLYPH_CHAR_Y2:
//  424             *aValue = p_gw->iLCDAPI->iCharY2_Position ;
??ST7579_Read_11:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine7
??CrossCallReturnLabel_19:
        BR        S:??ST7579_SetLine_14
//  425             error = GLYPH_ERROR_NONE ;
//  426             break ;
//  427         case GLYPH_FRAME_RATE:
//  428             *aValue = (uint32_t)p_gw->iLCDAPI->iFrameRate ;
??ST7579_Read_12:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine14
??CrossCallReturnLabel_52:
        BR        S:??ST7579_SetLine_14
//  429             error = GLYPH_ERROR_NONE ;
//  430             break ;
//  431         case GLYPH_CONTRAST:
//  432             *aValue = (uint32_t)p_gw->iLCDAPI->iContrast ;
??ST7579_Read_13:
        MOVW      AX, [SP+0x02]
        CALL      N:?Subroutine15
??CrossCallReturnLabel_49:
        BR        S:??ST7579_SetLine_14
//  433             error = GLYPH_ERROR_NONE ;
//  434             break ;
//  435         case GLYPH_CONTRAST_BOOST:
//  436             *aValue = (uint32_t)p_gw->iLCDAPI->iContrastBoost ;
??ST7579_Read_14:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOV       A, [HL+0x3C]
        MOV       X, A
        SAR       A, 0x7
        MOVW      BC, AX
        SARW      AX, 0xF
        XCHW      AX, BC
??ST7579_SetLine_14:
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        MOVW      [HL], AX
        MOVW      AX, BC
        MOVW      [HL+0x02], AX
//  437             error = GLYPH_ERROR_NONE ;
??ST7579_SetLine_13:
        MOV       D, #0x0
//  438             break ;
//  439     }
//  440 
//  441     p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
??ST7579_Read_15:
        MOVW      AX, [SP+0x02]
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        CLRW      AX
        MOVW      [HL+0x32], AX
//  442     return error ;
        MOV       A, D
        ADDW      SP, #0x4
        POP       DE
        BR        N:??Subroutine20_0
        REQUIRE ?CLRL78_V1_0_L00
//  443 }

        RSEG CODE:CODE:NOROOT(0)
?Subroutine16:
        MOV       D, #0x1
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, #0x2
        MOVW      [HL+0x32], AX
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine10:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x0C]
        MOVW      BC, AX
        MOVW      AX, [HL+0x0A]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine7:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x10]
        MOVW      BC, AX
        MOVW      AX, [HL+0x0E]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine6:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x04]
        MOVW      BC, AX
        MOVW      AX, [HL+0x02]
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine5:
        MOVW      HL, AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x08]
        MOVW      BC, AX
        MOVW      AX, [HL+0x06]
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  444 
//  445 /******************************************************************************
//  446 * ID : 39.0
//  447 * Outline : ST7579_SetSystemBiasBooster
//  448 * Include : ST7579_LCD.h
//  449 * Function Name: ST7579_SetSystemBiasBooster
//  450 * Description : Set the LCD system bias.  Below is a sample Bias chart.
//  451 *
//  452 * VDD2=2.4V                             Bias
//  453 *             1/4     1/5     1/6     1/7       1/8     1/9     1/10    1/11
//  454 * Booster X3  3~4.5   3~5.2   3.3~6.3 3.5~6     X       X       X       X
//  455 * Booster X4  3~4.5   3~5.7   3.3~7.4 3.5~8.55  3.5~8.1 4~8.1   X       X
//  456 * Booster X5  3~4.5   3~5.7   3.3~7.4 3.5~8.8   3.5~9.1 4~9.1 4.2~9.6 4.6~9.6
//  457 *
//  458 * X: Do not select this setting.
//  459 * 
//  460 * The bias setting will have to be set manually and permanently in this
//  461 * function
//  462 *
//  463 * This function also sets booster efficiency.  The setting of booster
//  464 * efficiency is hard programmed here and must be manually changed.
//  465 * Efficiency is set at level 2.  The efficiency levels are:
//  466 * for booster efficiency level 1: 0x9D, 0x9E, 0x9F
//  467 * for booster efficiency level 2: 0x99, 0x9A, 0x9B
//  468 * for booster efficiency level 3: 0x95, 0x96, 0x97
//  469 * for booster efficiency level 4: 0x91, 0x92, 0x93
//  470 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  471 *          : cValue0To17 - booster set value from 0 to 17 is valid.
//  472 * Return Value : none
//  473 * Calling Functions : ST7579_Write
//  474 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  475 void ST7579_SetSystemBiasBooster(T_glyphHandle aHandle, int8_t cValue0To17)
ST7579_SetSystemBiasBooster:
//  476 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      BC
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
//  477     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  478 
//  479     if (cValue0To17 <= 17) {
        MOV       A, B
        XOR       A, #0x80
        SUB       A, #0x92
        SKC
        BR        N:??ST7579_SetLine_15
//  480         /* Select bias and boost settings from value */
//  481         char cBias = 0 ;
//  482         char cBoost = 0 ;
//  483         switch (cValue0To17) {
        MOV       A, B
        MOVW      HL, #LWRD(??ST7579_SetSystemBiasBooster_0)
        MOV       ES, #BYTE3(??ST7579_SetSystemBiasBooster_0)
        MOV       CS, #BYTE3(ST7579_SetSystemBiasBooster)
        BR        N:?C_SSWITCH_L10
//  484             case 0:
//  485                 /* Bias level 1/4 Boost Times 3. */
//  486                 cBias = 0x17 ;
??ST7579_SetSystemBiasBooster_1:
        MOV       C, #0x17
//  487                 cBoost = 0x99 ;
??ST7579_SetSystemBiasBooster_2:
        MOV       B, #0x99
//  488                 break ;
        BR        S:??ST7579_SetLine_16
//  489             case 3:
//  490                 /* Bias level 1/5 Boost Times 3. */
//  491                 cBias = 0x16 ;
??ST7579_SetSystemBiasBooster_3:
        MOV       C, #0x16
//  492                 cBoost = 0x99 ;
        BR        S:??ST7579_SetSystemBiasBooster_2
//  493                 break ;
//  494             case 6:
//  495                 /* Bias level 1/6 Boost Times 3. */
//  496                 cBias = 0x15 ;
??ST7579_SetSystemBiasBooster_4:
        MOV       C, #0x15
//  497                 cBoost = 0x99 ;
        BR        S:??ST7579_SetSystemBiasBooster_2
//  498                 break ;
//  499             case 9:
//  500                 /* Bias level 1/7 Boost Times 3. */
//  501                 cBias = 0x14 ;
??ST7579_SetSystemBiasBooster_5:
        MOV       C, #0x14
//  502                 cBoost = 0x99 ;
        BR        S:??ST7579_SetSystemBiasBooster_2
//  503                 break ;
//  504             case 1:
//  505                 /* Bias level 1/4 Boost Times 4. */
//  506                 cBias = 0x17 ;
??ST7579_SetSystemBiasBooster_6:
        MOV       C, #0x17
//  507                 cBoost = 0x9A ;
??ST7579_SetSystemBiasBooster_7:
        MOV       B, #0x9A
//  508                 break ;
        BR        S:??ST7579_SetLine_16
//  509             case 4:
//  510                 /* Bias level 1/5 Boost Times 4. */
//  511                 cBias = 0x16 ;
??ST7579_SetSystemBiasBooster_8:
        MOV       C, #0x16
//  512                 cBoost = 0x9A ;
        BR        S:??ST7579_SetSystemBiasBooster_7
//  513                 break ;
//  514             case 7:
//  515                 /* Bias level 1/6 Boost Times 4. */
//  516                 cBias = 0x15 ;
??ST7579_SetSystemBiasBooster_9:
        MOV       C, #0x15
//  517                 cBoost = 0x9A ;
        BR        S:??ST7579_SetSystemBiasBooster_7
//  518                 break ;
//  519             case 10:
//  520                 /* Bias level 1/7 Boost Times 4. */
//  521                 cBias = 0x14 ;
??ST7579_SetSystemBiasBooster_10:
        MOV       C, #0x14
//  522                 cBoost = 0x9A ;
        BR        S:??ST7579_SetSystemBiasBooster_7
//  523                 break ;
//  524             case 12:
//  525                 /* Bias level 1/8 Boost Times 4. */
//  526                 cBias = 0x13 ;
??ST7579_SetSystemBiasBooster_11:
        MOV       C, #0x13
//  527                 cBoost = 0x9A ;
        BR        S:??ST7579_SetSystemBiasBooster_7
//  528                 break ;
//  529             case 14:
//  530                 /* Bias level 1/9 Boost Times 4. */
//  531                 cBias = 0x12 ;
??ST7579_SetSystemBiasBooster_12:
        MOV       C, #0x12
//  532                 cBoost = 0x9A ;
        BR        S:??ST7579_SetSystemBiasBooster_7
//  533                 break ;
//  534             case 2:
//  535                 /* Bias level 1/4 Boost Times 5. */
//  536                 cBias = 0x17 ;
??ST7579_SetSystemBiasBooster_13:
        MOV       C, #0x17
//  537                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  538                 break ;
//  539             case 5:
//  540                 /* Bias level 1/5 Boost Times 5. */
//  541                 cBias = 0x16 ;
??ST7579_SetSystemBiasBooster_14:
        MOV       C, #0x16
//  542                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  543                 break ;
//  544             case 8:
//  545                 /* Bias level 1/6 Boost Times 5. */
//  546                 cBias = 0x15 ;
??ST7579_SetSystemBiasBooster_15:
        MOV       C, #0x15
//  547                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  548                 break ;
//  549             case 11:
//  550                 /* Bias level 1/7 Boost Times 5. */
//  551                 cBias = 0x14 ;
??ST7579_SetSystemBiasBooster_16:
        MOV       C, #0x14
//  552                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  553                 break ;
//  554             case 13:
//  555                 /* Bias level 1/8 Boost Times 5. */
//  556                 cBias = 0x13 ;
??ST7579_SetSystemBiasBooster_17:
        MOV       C, #0x13
//  557                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  558                 break ;
//  559             case 15:
//  560                 /* Bias level 1/9 Boost Times 5. */
//  561                 cBias = 0x12 ;
??ST7579_SetSystemBiasBooster_18:
        MOV       C, #0x12
//  562                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  563                 break ;
//  564             case 16:
//  565                 /* Bias level 1/10 Boost Times 5. */
//  566                 cBias = 0x11 ;
??ST7579_SetSystemBiasBooster_19:
        MOV       C, #0x11
//  567                 cBoost = 0x9B ;
        BR        S:??ST7579_SetLine_17
//  568                 break ;
//  569             case 17:
//  570                 /* Bias level 1/11 Boost Times 5. */
//  571                 cBias = 0x10 ;
??ST7579_SetSystemBiasBooster_20:
        MOV       C, #0x10
//  572                 cBoost = 0x9B ;
??ST7579_SetLine_17:
        MOV       B, #0x9B
//  573                 break ;
//  574             default:
//  575                 /* Bias level 7 Boost Times 3. */
//  576                 cBias = 0x14 ;
//  577                 cBoost = 0x99 ;
//  578                 break ;
//  579         }
//  580 
//  581         /* Set Bias */
//  582         /* Use Function Set 1 H[1:0]=(0,1) */
//  583         /* Original Development hardcoded this as CommandSend(0x021) */
//  584         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
??ST7579_SetLine_16:
        INCW      DE
        INCW      DE
        MOV       A, #0x29
        MOVW      HL, AX
        MOVW      AX, [DE]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  585         p_gw->iCommAPI->iCommandSend(cBias) ;
        MOV       A, C
        MOVW      HL, AX
        MOVW      AX, [DE]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  586 
//  587         /* Set Booster */
//  588         /* Use Function Set 3 H[1:0]=(1,1) */
//  589         /* Original Development hardcoded this as CommandSend(0x023) */
//  590         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
        MOV       A, #0x2B
        MOVW      HL, AX
        MOVW      AX, [DE]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  591         /* Set default efficiency and multiplyer on voltage */
//  592         p_gw->iCommAPI->iCommandSend(cBoost) ;
        MOVW      AX, [DE]
        CALL      N:??Subroutine24_0
//  593     }
??CrossCallReturnLabel_57:
        CALL      HL
//  594 }
??ST7579_SetLine_15:
        POP       DE
        POP       BC
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  595 
//  596 /******************************************************************************
//  597 * ID : 40.0
//  598 * Outline : ST7579_SetVO_Range
//  599 * Include : ST7579_LCD.h
//  600 * Function Name: ST7579_SetVO_Range
//  601 * Description : Set the LCD VO Range.  VO is used as a Contrast Control for the LCD
//  602 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  603 *          : nValue0to254 - contrast set value from 0 to 254 is valid.
//  604 * Return Value : none
//  605 * Calling Functions : ST7579_Write
//  606 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  607 void ST7579_SetVO_Range(T_glyphHandle aHandle, int32_t nValue0to254)
ST7579_SetVO_Range:
//  608 {
        ; * Stack frame (at entry) *
        ; Param size: 4
        PUSH      BC
        PUSH      DE
        PUSH      AX
        ; Auto size: 4
        PUSH      AX
//  609     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  610 
//  611     if (nValue0to254 <= 254) {
        CLRW      AX
        PUSH      AX
        MOV       X, #0xFF
        PUSH      AX
        MOVW      AX, [SP+0x12]
        MOVW      BC, AX
        MOVW      AX, [SP+0x10]
        CALL      N:?SL_CMP_L03
        BNC       ??ST7579_SetLine_18
//  612         char cByteToSend = 0 ;
//  613         char cLowHigh = 0 ;
        MOV       D, #0x0
//  614 
//  615         if (nValue0to254 > 127) {
        CLRW      AX
        PUSH      AX
        MOV       X, #0x80
        PUSH      AX
        MOVW      AX, [SP+0x10]
        CALL      N:?SL_CMP_L03
        MOV       A, [SP+0x0C]
        BC        ??ST7579_SetLine_19
//  616             cByteToSend = ((nValue0to254 - 127) | 0x80) & 0x00FF ;
        ADD       A, #0x81
        OR        A, #0x80
        MOV       B, A
//  617             cLowHigh = 1 ;
        MOV       D, #0x1
        BR        S:??ST7579_SetLine_20
//  618         }
//  619         else {
//  620             cByteToSend = (nValue0to254 | 0x80) & 0x00FF ;
??ST7579_SetLine_19:
        OR        A, #0x80
        MOV       B, A
//  621         }
//  622 
//  623         /* Use Function Set 0 H[1:0]=(0,0) */
//  624         /* Original Development hardcoded this as CommandSend(0x020) */
//  625         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
??ST7579_SetLine_20:
        MOVW      AX, [SP+0x02]
        INCW      AX
        INCW      AX
        MOVW      [SP], AX
        MOV       A, #0x28
        MOVW      HL, AX
        MOVW      AX, [SP]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL]
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  626         /* Set VO range to Low if 0x04 or High if 0x05 */
//  627         /* here low would be PRS=0 and high would be PRS=1 */
//  628         if (cLowHigh == 0) p_gw->iCommAPI->iCommandSend(0x04) ;
        MOV       A, D
        CMP0      A
        BNZ       ??ST7579_SetLine_21
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, [HL]
        CALL      N:??Subroutine25_0
??CrossCallReturnLabel_66:
        MOV       A, #0x4
        BR        S:??ST7579_SetLine_22
//  629         if (cLowHigh == 1) p_gw->iCommAPI->iCommandSend(0x05) ;
??ST7579_SetLine_21:
        CMP       A, #0x1
        BNZ       ??ST7579_SetLine_23
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, [HL]
        CALL      N:??Subroutine25_0
??CrossCallReturnLabel_67:
        MOV       A, #0x5
??ST7579_SetLine_22:
        CALL      HL
//  630     
//  631         /* Use Function Set 1 H[1:0]=(0,1) */
//  632         /* Original Development hardcoded this as CommandSend(0x021) */
//  633         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
??ST7579_SetLine_23:
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, [HL]
        CALL      N:??Subroutine25_0
??CrossCallReturnLabel_68:
        MOV       A, #0x29
        CALL      HL
//  634         /* Set PRS=0 to 2.94 V or PRS=1 2.95V to 6.75V */
//  635         /* the value here can be 0 to 127 or 0x00 to 0x7F */
//  636         p_gw->iCommAPI->iCommandSend(cByteToSend) ;
        MOVW      AX, [SP]
        MOVW      HL, AX
        MOVW      AX, [HL]
        CALL      N:??Subroutine24_0
//  637     }
??CrossCallReturnLabel_58:
        CALL      HL
//  638 }
??ST7579_SetLine_18:
        ADDW      SP, #0x4
        BR        N:??Subroutine19_0
        REQUIRE ?CLRL78_V1_0_L00
//  639 
//  640 /******************************************************************************
//  641 * ID : 41.0
//  642 * Outline : ST7579_Config
//  643 * Include : ST7579_LCD.h
//  644 * Function Name: ST7579_Config
//  645 * Description : Used to configure the LCD with preset settings.
//  646 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  647 * Return Value : none
//  648 * Calling Functions : ST7579_Open
//  649 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  650 void ST7579_Config(T_glyphHandle aHandle)
ST7579_Config:
//  651 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      BC
        PUSH      DE
        ; Auto size: 2
        PUSH      AX
        MOVW      DE, AX
//  652     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  653     volatile int i = 0 ;
        CLRW      AX
        MOVW      [SP], AX
//  654 
//  655     /* Inialize Display */
//  656     ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
        MOVW      AX, [DE]
        MOVW      HL, AX
        MOV       A, [HL+0x3C]
        MOV       B, A
        MOVW      AX, DE
        CALL      ST7579_SetSystemBiasBooster
//  657     ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
        MOVW      AX, [DE]
        CALL      N:??Subroutine21_0
??CrossCallReturnLabel_47:
        PUSH      BC
        PUSH      AX
        MOVW      AX, DE
        CALL      ST7579_SetVO_Range
//  658     for (i=0;i<1000;i++){}
        CLRW      AX
        BR        S:??ST7579_SetLine_24
??ST7579_Config_0:
        MOVW      AX, [SP]
        INCW      AX
??ST7579_SetLine_24:
        MOVW      [SP], AX
        MOVW      AX, [SP]
        XOR       A, #0x80
        CMPW      AX, #0x83E8
        BC        ??ST7579_Config_0
//  659     ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
        MOVW      AX, [DE]
        CALL      N:??Subroutine22_0
??CrossCallReturnLabel_50:
        PUSH      BC
        PUSH      AX
        MOVW      AX, DE
        CALL      ST7579_SetFrameRate
//  660     
//  661     ST7579_SetPage(aHandle, 0) ;
        CLRB      B
        MOVW      AX, DE
        CALL      ST7579_SetPage
//  662     ST7579_SetChar(aHandle, 0) ;
        CLRB      B
        MOVW      AX, DE
        CALL      ST7579_SetChar
//  663 }
        ADDW      SP, #0x2
        POP       DE
        POP       BC
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  664 
//  665 /******************************************************************************
//  666 * ID : 42.0
//  667 * Outline : ST7579_Send16bitsCommand
//  668 * Include : ST7579_LCD.h
//  669 * Function Name: ST7579_Send16bitsCommand
//  670 * Description : Send 2 commands from the same integer.  For example:
//  671 *                       if you wanted to send 0x28 and then 0xD0 just send
//  672 *                       0x28D0 using this command.
//  673 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  674 *          : nCommand - 2 commands to send.
//  675 * Return Value : none
//  676 * Calling Functions : none
//  677 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  678 void ST7579_Send16bitsCommand(T_glyphHandle aHandle, int32_t nCommand)
ST7579_Send16bitsCommand:
//  679 {
        ; * Stack frame (at entry) *
        ; Param size: 4
        PUSH      BC
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
//  680     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  681     int8_t cCommandOne = (int8_t)((nCommand >> 8) & 0x00FF) ;
//  682     int8_t cCommandTwo = (int8_t)(nCommand & 0x00FF) ;
//  683 
//  684     p_gw->iCommAPI->iCommandSend(cCommandOne) ;
        MOVW      AX, [SP+0x08]
        SARW      AX, 0x8
        MOV       A, X
        CALL      N:?Subroutine2
??CrossCallReturnLabel_61:
        CALL      HL
//  685     p_gw->iCommAPI->iCommandSend(cCommandTwo) ;
        MOV       A, [SP+0x08]
        CALL      N:?Subroutine2
??CrossCallReturnLabel_62:
        BR        N:?Subroutine0
        REQUIRE ?CLRL78_V1_0_L00
//  686 }

        RSEG CODE:CODE:NOROOT(0)
?Subroutine2:
        MOV       B, A
        MOVW      AX, [DE+0x02]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine24_0:
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        BR        N:?Subroutine18
        REQUIRE ?CLRL78_V1_0_L00
//  687 
//  688 /******************************************************************************
//  689 * ID : 43.0
//  690 * Outline : ST7579_Send8bitsData
//  691 * Include : ST7579_LCD.h
//  692 * Function Name: ST7579_Send8bitsData
//  693 * Description : Send 8 bits of data to the LCD RAM at the current location.
//  694 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  695 *          : cData - 8 bits of data to send.
//  696 * Return Value : none
//  697 * Calling Functions : none
//  698 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  699 void ST7579_Send8bitsData(T_glyphHandle aHandle, int8_t cData)
ST7579_Send8bitsData:
//  700 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
        MOVW      HL, AX
//  701     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  702 
//  703     p_gw->iCommAPI->iDataSend(cData) ;
        MOVW      AX, [HL+0x02]
        CALL      N:??Subroutine23_0
??CrossCallReturnLabel_53:
        CALL      HL
//  704 }
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  705 
//  706 /******************************************************************************
//  707 * ID : 44.0
//  708 * Outline : ST7579_SetFrameRate
//  709 * Include : ST7579_LCD.h
//  710 * Function Name: ST7579_SetFrameRate
//  711 * Description : Set the Frame Rate to one of:
//  712 * 55Hz
//  713 * 65Hz
//  714 * 68Hz
//  715 * 70Hz
//  716 * 73Hz
//  717 * 76Hz
//  718 * 80Hz
//  719 * 137Hz
//  720 * Currently set at 73 hertz.  Must be manually set and recompliled
//  721 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  722 *          : nRate55To137 - Frame rate to set from 55 to 137 see above
//  723 * Return Value : none
//  724 * Calling Functions : ST7579_Config
//  725 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  726 void ST7579_SetFrameRate(T_glyphHandle aHandle, int32_t nRate55To137)
ST7579_SetFrameRate:
//  727 {
        ; * Stack frame (at entry) *
        ; Param size: 4
        PUSH      BC
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
//  728     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  729 
//  730     /* Use Function Set 3 H[1:0]=(1,1) */
//  731     /* Original Development hardcoded this as CommandSend(0x023) */
//  732     p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
        INCW      DE
        INCW      DE
        CALL      N:?Subroutine9
??CrossCallReturnLabel_70:
        MOV       A, #0x2B
        CALL      HL
//  733 
//  734     switch(nRate55To137) {
        MOVW      AX, [SP+0x0A]
        MOVW      BC, AX
        MOVW      AX, [SP+0x08]
        CALL      N:?Subroutine17
??CrossCallReturnLabel_46:
        BNZ       ??ST7579_SetLine_25
        CMPW      AX, #0x37
        BZ        ??ST7579_SetLine_26
        CMPW      AX, #0x41
        BZ        ??ST7579_SetLine_27
        CMPW      AX, #0x44
        BZ        ??ST7579_SetLine_28
        CMPW      AX, #0x46
        BZ        ??ST7579_SetLine_29
        CMPW      AX, #0x4C
        BZ        ??ST7579_SetLine_30
        CMPW      AX, #0x50
        BZ        ??ST7579_SetLine_31
        CMPW      AX, #0x89
        BZ        ??ST7579_SetLine_32
        BR        S:??ST7579_SetLine_25
//  735         case 55:
//  736             /* Set frame rate of 55 */
//  737             p_gw->iCommAPI->iCommandSend(0x08) ;
??ST7579_SetLine_26:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_71:
        MOV       A, #0x8
        BR        S:??ST7579_SetLine_33
//  738             break ;
//  739         case 65:
//  740             /* Set frame rate of 65 */
//  741             p_gw->iCommAPI->iCommandSend(0x09) ;
??ST7579_SetLine_27:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_72:
        MOV       A, #0x9
        BR        S:??ST7579_SetLine_33
//  742             break ;
//  743         case 68:
//  744             /* Set frame rate of 68 */
//  745             p_gw->iCommAPI->iCommandSend(0x0A) ;
??ST7579_SetLine_28:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_73:
        MOV       A, #0xA
        BR        S:??ST7579_SetLine_33
//  746             break ;
//  747         case 70:
//  748             /* Set frame rate of 70 */
//  749             p_gw->iCommAPI->iCommandSend(0x0B) ;
??ST7579_SetLine_29:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_74:
        MOV       A, #0xB
        BR        S:??ST7579_SetLine_33
//  750             break ;
//  751         case 73:
//  752             /* Set frame rate of 73(Default) */
//  753             p_gw->iCommAPI->iCommandSend(0x0C) ;
??ST7579_SetLine_25:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_75:
        MOV       A, #0xC
        BR        S:??ST7579_SetLine_33
//  754             break ;
//  755         case 76:
//  756             /* Set frame rate of 76 */
//  757             p_gw->iCommAPI->iCommandSend(0x0D) ;
??ST7579_SetLine_30:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_76:
        MOV       A, #0xD
        BR        S:??ST7579_SetLine_33
//  758             break ;
//  759         case 80:
//  760             /* Set frame rate of 80 */
//  761             p_gw->iCommAPI->iCommandSend(0x0E) ;
??ST7579_SetLine_31:
        CALL      N:?Subroutine9
??CrossCallReturnLabel_77:
        MOV       A, #0xE
        BR        S:??ST7579_SetLine_33
//  762             break ;
//  763         case 137:
//  764             /* Set frame rate of 137 */
//  765             p_gw->iCommAPI->iCommandSend(0x0F) ;
??ST7579_SetLine_32:
        CALL      N:?Subroutine9
//  766             break ;
//  767         default:
//  768             /* Set frame rate of 73(Default) */
//  769             p_gw->iCommAPI->iCommandSend(0x0C) ;
//  770     }
??CrossCallReturnLabel_78:
        MOV       A, #0xF
??ST7579_SetLine_33:
        BR        N:?Subroutine0
        REQUIRE ?CLRL78_V1_0_L00
//  771 }
//  772 
//  773 /******************************************************************************
//  774 * ID : 45.0
//  775 * Outline : ST7579_SetPage
//  776 * Include : ST7579_LCD.h
//  777 * Function Name: ST7579_SetPage
//  778 * Description : Set the current page to the current set of 8 rows where:
//  779 *                   page 0 is row 0 to 7
//  780 *                   page 1 is row 8 to 15
//  781 *                   page 2 is row 16 to 23
//  782 *                   page 3 is row 24 to 31
//  783 *                   page 4 is row 32 to 39
//  784 *                   page 5 is row 40 to 47
//  785 *                   page 6 is row 48 to 55
//  786 *                   page 7 is row 56 to 63
//  787 *                   page 8 is row 64, 65, 66
//  788 *                   page 9 is row 67
//  789 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  790 *          : cValue0To9 - page number to set valid from 0 to 9.
//  791 * Return Value : none
//  792 * Calling Functions : ST7579_Write
//  793 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  794 void ST7579_SetPage(T_glyphHandle aHandle, int8_t cValue0To9)
ST7579_SetPage:
//  795 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
//  796     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  797     char cValueToSend = cValue0To9 | 0x40 ;
//  798 
//  799     if (cValue0To9 <= 9) {
        MOV       A, B
        XOR       A, #0x80
        SUB       A, #0x8A
        BNC       ??ST7579_SetLine_34
//  800         cValueToSend &= 0x4F ;
//  801     
//  802         /* Use Function Set 0 H[1:0]=(0,0) */
//  803         /* Original Development hardcoded this as CommandSend(0x020) */
//  804         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
        MOV       A, #0x28
        MOVW      HL, AX
        MOVW      AX, [DE+0x02]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  805         /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
//  806         p_gw->iCommAPI->iCommandSend(cValueToSend) ;
        MOV       A, B
        AND       A, #0x4F
        OR        A, #0x40
        CALL      N:?Subroutine2
//  807     }
??CrossCallReturnLabel_63:
        CALL      HL
//  808 }
??ST7579_SetLine_34:
        POP       DE
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  809 
//  810 /******************************************************************************
//  811 * ID : 46.0
//  812 * Outline : ST7579_SetChar
//  813 * Include : ST7579_LCD.h
//  814 * Function Name: ST7579_SetChar
//  815 * Description : Set the current column of the current page that the next batch of
//  816 * data will write to.
//  817 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  818 *          : cValue0To101 - column number to set valid from 0 to 101.
//  819 * Return Value : none
//  820 * Calling Functions : ST7579_Write
//  821 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  822 void ST7579_SetChar(T_glyphHandle aHandle, int8_t cValue0To101)
ST7579_SetChar:
//  823 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      DE
        ; Auto size: 0
        MOVW      DE, AX
//  824     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  825     char cValueToSend = cValue0To101 | 0x80 ;
//  826     
//  827     if (cValue0To101 <= 101) {
        MOV       A, B
        XOR       A, #0x80
        SUB       A, #0xE6
        BNC       ??ST7579_SetLine_35
//  828         cValueToSend &= 0xFF ;
//  829     
//  830         /* Use Function Set 0 H[1:0]=(0,0) */
//  831         /* Original Development hardcoded this as CommandSend(0x020) */
//  832         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
        MOV       A, #0x28
        MOVW      HL, AX
        MOVW      AX, [DE+0x02]
        XCHW      AX, HL
        PUSH      AX
        MOVW      AX, [HL+0x02]
        MOVW      HL, AX
        POP       AX
        MOV       CS, #0x0
        CALL      HL
//  833         /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
//  834         p_gw->iCommAPI->iCommandSend(cValueToSend) ;
        MOV       A, B
        OR        A, #0x80
        CALL      N:?Subroutine2
//  835     }
??CrossCallReturnLabel_64:
        CALL      HL
//  836 }
??ST7579_SetLine_35:
        POP       DE
        RET       
        REQUIRE ?CLRL78_V1_0_L00
//  837 
//  838 /******************************************************************************
//  839 * ID : 47.0
//  840 * Outline : ST7579_SetLine
//  841 * Include : ST7579_LCD.h
//  842 * Function Name: ST7579_SetLine
//  843 * Description : Set the current line to become the top line of the LCD Display.
//  844 * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
//  845 *          : cValue0To66 - line number to set valid from 0 to 66.
//  846 * Return Value : none
//  847 * Calling Functions : ST7579_Write
//  848 ******************************************************************************/

        RSEG CODE:CODE:NOROOT(0)
//  849 void ST7579_SetLine(T_glyphHandle aHandle, int8_t cValue0To66)
ST7579_SetLine:
//  850 {
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      BC
        PUSH      DE
        PUSH      AX
        ; Auto size: 12
        SUBW      SP, #0xA
        MOV       A, B
        MOV       X, A
//  851     T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
//  852 
//  853     if (cValue0To66 <= 66) {
        XOR       A, #0x80
        SUB       A, #0xC3
        SKC
        BR        N:??ST7579_SetLine_36
//  854         int8_t cData[10] = "" ;
        MOVW      DE, SP
        MOVW      HL, #`?<Constant "">`
        MOVW      BC, #0xA
        CALL      N:?MOVE_LONG_L06
//  855         int8_t cValueToSendLow = 0 ;
//  856         int8_t cValueToSendHigh = 0 ;
//  857     
//  858         cData[0] = 0 ;
        CLRB      A
        MOV       [SP], A
//  859         cData[1] = 0 ;
        MOV       [SP+0x01], A
//  860         cData[2] = 0 ;
        MOV       [SP+0x02], A
//  861         cData[3] = 0 ;
        MOV       [SP+0x03], A
//  862         cData[4] = 0 ;
        MOV       [SP+0x04], A
//  863         cData[5] = 0 ;
        MOV       [SP+0x05], A
//  864         cData[6] = 0 ;
        MOV       [SP+0x06], A
//  865     
//  866         /*  binary 1111 1111 becomes 0000 0001 */
//  867         cData[0] = 0x01 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x1
        MOV       [SP], A
//  868         /*  binary 1111 1111 becomes 0000 0010 */
//  869         cData[1] = 0x02 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x2
        MOV       [SP+0x01], A
//  870         /*  binary 1111 1111 becomes 0000 0100 */
//  871         cData[2] = 0x04 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x4
        MOV       [SP+0x02], A
//  872         /*  binary 1111 1111 becomes 0000 1000 */
//  873         cData[3] = 0x08 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x8
        MOV       [SP+0x03], A
//  874         /* binary 1111 1111 becomes 0001 0000 */
//  875         cData[4] = 0x010 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x10
        MOV       [SP+0x04], A
//  876         /* binary 1111 1111 becomes 0010 0000 */
//  877         cData[5] = 0x020 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x20
        MOV       [SP+0x05], A
//  878         /* binary 1111 1111 becomes 0100 0000 */
//  879         cData[6] = 0x040 & cValue0To66 ;
        MOV       A, X
        AND       A, #0x40
        MOV       [SP+0x06], A
//  880     
//  881         /* binary 10 becomes binary 1 */
//  882         cData[1] = cData[1] >> 1 ;
        MOV       A, [SP+0x01]
        SAR       A, 0x1
        MOV       [SP+0x01], A
//  883         /* binary 100 becomes binary 1 */
//  884         cData[2] = cData[2] >> 2 ;
        MOV       A, [SP+0x02]
        SAR       A, 0x2
        MOV       [SP+0x02], A
//  885         /* binary 1000 becomes binary 1 */
//  886         cData[3] = cData[3] >> 3 ;
        MOV       A, [SP+0x03]
        SAR       A, 0x3
        MOV       [SP+0x03], A
//  887         /* binary 1 0000 becomes binary 1 */
//  888         cData[4] = cData[4] >> 4 ;
        MOV       A, [SP+0x04]
        SAR       A, 0x4
        MOV       [SP+0x04], A
//  889         /* binary 10 0000 becomes binary 1 */
//  890         cData[5] = cData[5] >> 5 ;
        MOV       A, [SP+0x05]
        SAR       A, 0x5
        MOV       [SP+0x05], A
//  891         /* binary 100 0000 becomes binary 1 */
//  892         cData[6] = cData[6] >> 6 ;
        MOV       A, [SP+0x06]
        SAR       A, 0x6
        MOV       [SP+0x06], A
//  893     
//  894         cValueToSendLow = cData[6] | 0x04 ;
//  895         cValueToSendHigh = cData[0] | cData[1] | cData[2] | cData[3] | cData[4] | cData[5] | 0x040 ;
//  896 
//  897         /* Use Function Set 1 H[1:0]=(0,1) */
//  898         /* Original Development hardcoded this as CommandSend(0x021) */
//  899         p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
        MOVW      AX, [SP+0x0A]
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        CALL      N:??Subroutine25_0
??CrossCallReturnLabel_69:
        MOV       A, #0x29
        CALL      HL
//  900 
//  901         /* Set Ram Start Line of 0 to 66 using a high and low value and two command sends */
//  902         p_gw->iCommAPI->iCommandSend(cValueToSendHigh) ;
        MOV       A, [SP+0x05]
        MOV       X, A
        MOV       A, [SP+0x04]
        MOV       B, A
        MOV       A, [SP+0x03]
        MOV       C, A
        MOV       A, [SP+0x02]
        MOV       D, A
        MOV       A, [SP+0x01]
        MOV       E, A
        MOV       A, [SP]
        OR        A, E
        OR        A, D
        OR        A, C
        OR        A, B
        OR        A, X
        OR        A, #0x40
        MOV       B, A
        MOVW      AX, [SP+0x0A]
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        CALL      N:??Subroutine24_0
??CrossCallReturnLabel_59:
        CALL      HL
//  903         p_gw->iCommAPI->iCommandSend(cValueToSendLow) ;
        MOV       A, [SP+0x06]
        OR        A, #0x4
        MOV       B, A
        MOVW      AX, [SP+0x0A]
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        CALL      N:??Subroutine24_0
//  904     }
??CrossCallReturnLabel_60:
        CALL      HL
//  905 }
??ST7579_SetLine_36:
        ADDW      SP, #0xC
        POP       DE
        POP       BC
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG CODE:CODE:NOROOT(0)
?Subroutine9:
        MOVW      AX, [DE]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine25_0:
        MOVW      HL, AX
        MOVW      AX, [HL+0x02]
        REQUIRE ?CLRL78_V1_0_L00
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG CODE:CODE:NOROOT(0)
??Subroutine26_0:
        MOVW      HL, AX
        MOV       CS, #0x0
        RET       
        REQUIRE ?CLRL78_V1_0_L00

        RSEG SWITCH:CONST:REORDER:NOROOT(1)
??ST7579_Write_0:
        DD        1
        DW        21
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_2
        DW        ??ST7579_Write_4
        DW        ??ST7579_Write_5
        DW        ??ST7579_Write_34
        DW        ??ST7579_Write_7
        DW        ??ST7579_Write_39
        DW        ??ST7579_Write_44
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_49
        DW        ??ST7579_Write_50
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_6
        DW        ??ST7579_Write_51
        DW        ??ST7579_Write_52
        DW        ??ST7579_Write_53

        RSEG SWITCH:CONST:REORDER:NOROOT(1)
??ST7579_Write_1:
        DD        1
        DW        8
        DW        ??ST7579_SetLine_2
        DW        ??ST7579_Write_8
        DW        ??ST7579_Write_13
        DW        ??ST7579_Write_15
        DW        ??ST7579_SetLine_2
        DW        ??ST7579_SetLine_2
        DW        ??ST7579_Write_16
        DW        ??ST7579_Write_21
        DW        ??ST7579_Write_29

        RSEG SWITCH:CONST:REORDER:NOROOT(1)
??ST7579_Read_0:
        DD        0
        DW        22
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_1
        DW        ??ST7579_Read_2
        DW        ??ST7579_Read_3
        DW        ??ST7579_Read_4
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_5
        DW        ??ST7579_Read_6
        DW        ??ST7579_Read_7
        DW        ??ST7579_Read_8
        DW        ??ST7579_Read_9
        DW        ??ST7579_Read_10
        DW        ??ST7579_Read_11
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_15
        DW        ??ST7579_Read_12
        DW        ??ST7579_Read_13
        DW        ??ST7579_Read_14

        RSEG SWITCH:CONST:REORDER:NOROOT(1)
??ST7579_SetSystemBiasBooster_0:
        DW        0
        DW        18
        DW        ??ST7579_SetSystemBiasBooster_5
        DW        ??ST7579_SetSystemBiasBooster_1
        DW        ??ST7579_SetSystemBiasBooster_6
        DW        ??ST7579_SetSystemBiasBooster_13
        DW        ??ST7579_SetSystemBiasBooster_3
        DW        ??ST7579_SetSystemBiasBooster_8
        DW        ??ST7579_SetSystemBiasBooster_14
        DW        ??ST7579_SetSystemBiasBooster_4
        DW        ??ST7579_SetSystemBiasBooster_9
        DW        ??ST7579_SetSystemBiasBooster_15
        DW        ??ST7579_SetSystemBiasBooster_5
        DW        ??ST7579_SetSystemBiasBooster_10
        DW        ??ST7579_SetSystemBiasBooster_16
        DW        ??ST7579_SetSystemBiasBooster_11
        DW        ??ST7579_SetSystemBiasBooster_17
        DW        ??ST7579_SetSystemBiasBooster_12
        DW        ??ST7579_SetSystemBiasBooster_18
        DW        ??ST7579_SetSystemBiasBooster_19
        DW        ??ST7579_SetSystemBiasBooster_20

        RSEG NEAR_CONST:CONST:REORDER:NOROOT(1)
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0

        END
//  906 
//  907 
// 
// 2 715 bytes in segment CODE
//    10 bytes in segment NEAR_CONST
//   168 bytes in segment SWITCH
// 
// 2 715 bytes of CODE  memory
//   178 bytes of CONST memory
//
//Errors: none
//Warnings: none
